=== ./backend/src/middleware/AuthMiddleware.php ===
<?php
// backend/src/middleware/AuthMiddleware.php

namespace PawPath\middleware;

use Psr\Http\Message\ServerRequestInterface as Request;
use Psr\Http\Server\RequestHandlerInterface as RequestHandler;
use Slim\Psr7\Response;
use PawPath\services\AuthService;  // Changed from PawPath\Services\AuthService

class AuthMiddleware
{
    private AuthService $authService;
    
    public function __construct()
    {
        $this->authService = new AuthService();
    }
    
    public function __invoke(Request $request, RequestHandler $handler): Response
    {
        error_log('Processing auth middleware');
        
        $token = $this->extractToken($request);
        
        if (!$token) {
            error_log('No token provided - returning 401');
            $response = new Response();
            $response->getBody()->write(json_encode([
                'success' => false,
                'error' => 'No token provided'
            ]));
            return $response
                ->withStatus(401)
                ->withHeader('Content-Type', 'application/json');
        }
        
        try {
            $payload = $this->authService->validateToken($token);
            if (!$payload) {
                throw new \Exception('Invalid token');
            }
            
            error_log('Token validated successfully for user: ' . ($payload['user_id'] ?? 'unknown'));
            $request = $request->withAttribute('user_id', $payload['user_id']);
            return $handler->handle($request);
            
        } catch (\Exception $e) {
            error_log('Token validation failed: ' . $e->getMessage());
            $response = new Response();
            $response->getBody()->write(json_encode([
                'success' => false,
                'error' => 'Invalid token'
            ]));
            return $response
                ->withStatus(401)
                ->withHeader('Content-Type', 'application/json');
        }
    }
    
    private function extractToken(Request $request): ?string
    {
        $header = $request->getHeaderLine('Authorization');
        
        if (empty($header)) {
            error_log('No Authorization header found');
            return null;
        }
        
        if (preg_match('/Bearer\s+(.*)$/i', $header, $matches)) {
            error_log('Token extracted: ' . substr($matches[1], 0, 10) . '...');
            return $matches[1];
        }
        
        error_log('Invalid Authorization header format');
        return null;
    }
}
=== ./backend/src/middleware/RoleMiddleware.php ===
<?php
namespace PawPath\middleware;

use Psr\Http\Message\ServerRequestInterface as Request;
use Psr\Http\Server\RequestHandlerInterface as RequestHandler;
use Slim\Psr7\Response;
use PawPath\config\Permissions;

class RoleMiddleware
{
    private string $requiredRole;
    
    public function __construct(string $role)
    {
        $this->requiredRole = $role;
    }
    
    public function __invoke(Request $request, RequestHandler $handler): Response
    {
        $userId = $request->getAttribute('user_id');
        
        // Get user from the database
        $db = \PawPath\config\database\DatabaseConfig::getConnection();
        $stmt = $db->prepare("SELECT role FROM User WHERE user_id = ?");
        $stmt->execute([$userId]);
        $user = $stmt->fetch();
        
        if (!$user) {
            $response = new Response();
            $response->getBody()->write(json_encode([
                'success' => false,
                'error' => 'Authentication required'
            ]));
            return $response->withStatus(401)
                           ->withHeader('Content-Type', 'application/json');
        }
        
        // Get role hierarchy
        $roleHierarchy = [
            'admin' => ['admin'],
            'shelter_staff' => ['admin', 'shelter_staff'],
            'adopter' => ['admin', 'shelter_staff', 'adopter']
        ];
        
        // Check if user's role has permission
        if (!in_array($user['role'], $roleHierarchy[$this->requiredRole] ?? [])) {
            $response = new Response();
            $response->getBody()->write(json_encode([
                'success' => false,
                'error' => 'Insufficient permissions'
            ]));
            return $response->withStatus(403)
                           ->withHeader('Content-Type', 'application/json');
        }
        
        // Add user to request attributes
        $request = $request->withAttribute('user', [
            'user_id' => $userId,
            'role' => $user['role']
        ]);
        
        return $handler->handle($request);
    }
}
=== ./backend/src/config/Permissions.php ===
<?php
namespace PawPath\config;

class Permissions {
    // User roles
    public const ROLE_ADMIN = 'admin';
    public const ROLE_SHELTER_STAFF = 'shelter_staff';
    public const ROLE_ADOPTER = 'adopter';
    
    // Permission sets by role
    public const PERMISSIONS = [
        self::ROLE_ADMIN => [
            'users:manage',
            'shelters:manage',
            'pets:manage',
            'applications:manage',
            'blog:manage',
            'products:manage'
        ],
        self::ROLE_SHELTER_STAFF => [
            'pets:create',
            'pets:update',
            'pets:delete',
            'applications:view',
            'applications:process'
        ],
        self::ROLE_ADOPTER => [
            'pets:view',
            'applications:create',
            'applications:view-own',
            'profile:manage-own'
        ]
    ];
    
    public static function hasPermission(string $role, string $permission): bool {
        return isset(self::PERMISSIONS[$role]) && 
               in_array($permission, self::PERMISSIONS[$role]);
    }
    
    public static function validateRole(string $role): bool {
        return in_array($role, [self::ROLE_ADMIN, self::ROLE_SHELTER_STAFF, self::ROLE_ADOPTER]);
    }
}
=== ./backend/src/config/email/EmailConfig.php ===
<?php
namespace PawPath\config\email;

class EmailConfig {
    public static function getConfig(): array {
        $env = $_ENV['APP_ENV'] ?? 'development';
        
        if ($env === 'development') {
            // Use Mailtrap in development
            return [
                'host' => 'sandbox.smtp.mailtrap.io',
                'port' => 2525,
                'username' => $_ENV['MAILTRAP_USERNAME'],
                'password' => $_ENV['MAILTRAP_PASSWORD'],
                'encryption' => 'tls',
                'from_address' => 'testing@pawpath.com',
                'from_name' => 'PawPath Testing'
            ];
        } else {
            // Use production settings (Gmail or other SMTP)
            return [
                'host' => $_ENV['MAIL_HOST'],
                'port' => $_ENV['MAIL_PORT'],
                'username' => $_ENV['MAIL_USERNAME'],
                'password' => $_ENV['MAIL_PASSWORD'],
                'encryption' => 'tls',
                'from_address' => $_ENV['MAIL_FROM_ADDRESS'],
                'from_name' => $_ENV['MAIL_FROM_NAME']
            ];
        }
    }
}
=== ./backend/src/config/database/DatabaseConfig.php ===
<?php
// backend/src/config/database/DatabaseConfig.php

namespace PawPath\config\database;

use PDO;
use PDOException;

class DatabaseConfig {
    private static ?PDO $connection = null;
    
    public static function getConnection(): PDO {
        if (self::$connection === null) {
            try {
                // Get environment variables
                $dotenv = \Dotenv\Dotenv::createImmutable(__DIR__ . '/../../../');
                $dotenv->load();

                // Debug environment variables
                error_log("Environment variables:");
                error_log("DB_HOST: " . ($_ENV['DB_HOST'] ?? 'not set'));
                error_log("DB_PORT: " . ($_ENV['DB_PORT'] ?? 'not set'));
                error_log("DB_DATABASE: " . ($_ENV['DB_DATABASE'] ?? 'not set'));
                error_log("DB_USERNAME: " . ($_ENV['DB_USERNAME'] ?? 'not set'));
                error_log("DB_PASSWORD is set: " . (isset($_ENV['DB_PASSWORD']) ? 'Yes' : 'No'));
                
                // Use exact matches to your .env file
                $host = $_ENV['DB_HOST'] ?? 'localhost';
                $port = $_ENV['DB_PORT'] ?? '3306';
                $dbName = $_ENV['DB_DATABASE'] ?? 'pawpath';
                $username = $_ENV['DB_USERNAME'] ?? 'root';
                $password = $_ENV['DB_PASSWORD'] ?? '';
                
                $dsn = "mysql:host=$host;port=$port;dbname=$dbName;charset=utf8mb4";
                
                error_log("Attempting to connect with DSN: $dsn");
                error_log("Username: $username");
                
                self::$connection = new PDO(
                    $dsn,
                    $username,
                    $password,
                    [
                        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
                        PDO::ATTR_EMULATE_PREPARES => false
                    ]
                );
                
                error_log("Database connection successful");
            } catch (PDOException $e) {
                error_log("Database connection failed: " . $e->getMessage());
                throw new PDOException("Connection failed: " . $e->getMessage());
            }
        }
        
        return self::$connection;
    }
}
=== ./backend/src/api/PetController.php ===
<?php
// backend/src/api/PetController.php

namespace PawPath\api;

use PawPath\services\PetService;
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use PawPath\utils\ResponseHelper;

class PetController {
    private PetService $petService;
    
    public function __construct() {
        $this->petService = new PetService();
    }
    
    public function createPet(Request $request, Response $response): Response {
        try {
            $data = $request->getParsedBody();
            error_log('Creating pet with data: ' . print_r($data, true));
            
            if (!is_array($data)) {
                $body = (string) $request->getBody();
                $data = json_decode($body, true);
                error_log('Parsed JSON data: ' . print_r($data, true));
                
                if (json_last_error() !== JSON_ERROR_NONE) {
                    throw new \RuntimeException('Invalid JSON data provided: ' . json_last_error_msg());
                }
            }
            
            if (empty($data)) {
                throw new \RuntimeException('No data provided');
            }
            
            $result = $this->petService->createPet($data);
            error_log('Pet creation result: ' . print_r($result, true));
            
            $response->getBody()->write(json_encode([
                'success' => true,
                'data' => $result
            ]));
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(201);
        } catch (\Exception $e) {
            error_log('Error creating pet: ' . $e->getMessage() . "\n" . $e->getTraceAsString());
            
            $response->getBody()->write(json_encode([
                'success' => false,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString() // Remove in production
            ]));
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(400);
        }
    }
       

    public function getPet(Request $request, Response $response, array $args): Response {
        try {
            $petId = (int) $args['id'];
            $result = $this->petService->getPet($petId);
            return ResponseHelper::sendResponse($response, $result);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage(), 404);
        }
    }
    
    public function listPets(Request $request, Response $response): Response {
        try {
            $queryParams = $request->getQueryParams();
            error_log("Received request params: " . print_r($queryParams, true));
            
            // Get pagination parameters
            $page = isset($queryParams['page']) ? (int)$queryParams['page'] : 1;
            $perPage = isset($queryParams['perPage']) ? (int)$queryParams['perPage'] : 12;
            $offset = ($page - 1) * $perPage;

            // Add offset and limit to filters
            $queryParams['offset'] = $offset;
            $queryParams['limit'] = $perPage;
            
            $result = $this->petService->listPets($queryParams);
            error_log("Query result: " . print_r($result, true));
            
            $responseData = [
                'success' => true,
                'data' => [
                    'items' => $result['pets'],
                    'total' => $result['total'],
                    'page' => $page,
                    'perPage' => $perPage
                ]
            ];
            
            error_log("Sending response: " . print_r($responseData, true));
            
            $response->getBody()->write(json_encode($responseData));
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(200);
                
        } catch (\Exception $e) {
            error_log("Error in listPets: " . $e->getMessage());
            $response->getBody()->write(json_encode([
                'success' => false,
                'error' => $e->getMessage()
            ]));
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(500);
        }
    }
    
    public function updatePet(Request $request, Response $response, array $args): Response {
        try {
            $petId = (int) $args['id'];
            $data = $request->getParsedBody();
            
            if (!is_array($data)) {
                $body = (string) $request->getBody();
                $data = json_decode($body, true);
                
                if (json_last_error() !== JSON_ERROR_NONE) {
                    throw new \RuntimeException('Invalid JSON data provided');
                }
            }
            
            $result = $this->petService->updatePet($petId, $data);
            
            $response->getBody()->write(json_encode($result));
            return $response->withHeader('Content-Type', 'application/json');
        } catch (\Exception $e) {
            error_log('Error updating pet: ' . $e->getMessage());
            
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response->withHeader('Content-Type', 'application/json')
                           ->withStatus(400);
        }
    }
    
    public function deletePet(Request $request, Response $response, array $args): Response {
        try {
            $petId = (int) $args['id'];
            $this->petService->deletePet($petId);
            
            return $response->withStatus(204);
        } catch (\Exception $e) {
            error_log('Error deleting pet: ' . $e->getMessage());
            
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response->withHeader('Content-Type', 'application/json')
                           ->withStatus(400);
        }
    }
    
    public function createTrait(Request $request, Response $response): Response {
        try {
            $data = $request->getParsedBody();
            
            if (!is_array($data) || !isset($data['trait_name'])) {
                throw new \RuntimeException('trait_name is required');
            }
            
            $result = $this->petService->addTrait($data['trait_name']);
            
            $response->getBody()->write(json_encode($result));
            return $response->withHeader('Content-Type', 'application/json')
                           ->withStatus(201);
        } catch (\Exception $e) {
            error_log('Error creating trait: ' . $e->getMessage());
            
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response->withHeader('Content-Type', 'application/json')
                           ->withStatus(400);
        }
    }
    
    public function listTraits(Request $request, Response $response): Response {
        try {
            $result = $this->petService->listTraits();
            
            $response->getBody()->write(json_encode($result));
            return $response->withHeader('Content-Type', 'application/json');
        } catch (\Exception $e) {
            error_log('Error listing traits: ' . $e->getMessage());
            
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response->withHeader('Content-Type', 'application/json')
                           ->withStatus(500);
        }
    }
}
=== ./backend/src/api/UserProfileController.php ===
<?php
namespace PawPath\api;

use PawPath\models\UserProfile;
use PawPath\utils\ResponseHelper;
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;

class UserProfileController {
    private UserProfile $profileModel;
    
    public function __construct() {
        $this->profileModel = new UserProfile();
    }
    
    public function getProfile(Request $request, Response $response): Response {
        try {
            $userId = $request->getAttribute('user_id');
            $profile = $this->profileModel->findByUserId($userId);
            
            if (!$profile) {
                return ResponseHelper::sendError($response, "Profile not found", 404);
            }
            
            return ResponseHelper::sendResponse($response, $profile);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }
    
    public function updateProfile(Request $request, Response $response): Response {
        try {
            $userId = $request->getAttribute('user_id');
            $data = $request->getParsedBody();
            
            // Validate required fields
            $requiredFields = ['first_name', 'last_name', 'phone'];
            foreach ($requiredFields as $field) {
                if (empty($data[$field])) {
                    return ResponseHelper::sendError(
                        $response, 
                        "Missing required field: $field",
                        400
                    );
                }
            }
            
            // Check if profile exists
            $existingProfile = $this->profileModel->findByUserId($userId);
            
            if ($existingProfile) {
                $success = $this->profileModel->update($userId, $data);
            } else {
                $data['user_id'] = $userId;
                $profileId = $this->profileModel->create($data);
                $success = $profileId > 0;
            }
            
            if (!$success) {
                return ResponseHelper::sendError(
                    $response,
                    "Failed to update profile",
                    400
                );
            }
            
            $updatedProfile = $this->profileModel->findByUserId($userId);
            return ResponseHelper::sendResponse($response, $updatedProfile);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }
}
=== ./backend/src/api/BlogController.php ===
<?php
// src/api/BlogController.php
namespace PawPath\api;

use PawPath\services\BlogService;
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;

class BlogController {
    private BlogService $blogService;
    
    public function __construct() {
        $this->blogService = new BlogService();
    }
    
    public function createPost(Request $request, Response $response): Response {
        try {
            $data = $request->getParsedBody();
            $data['author_id'] = $request->getAttribute('user_id');
            
            $result = $this->blogService->createPost($data);
            
            $response->getBody()->write(json_encode($result));
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(201);
        } catch (\Exception $e) {
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(400);
        }
    }
    
    public function getPost(Request $request, Response $response, array $args): Response {
        try {
            $postId = (int) $args['id'];
            $result = $this->blogService->getPost($postId);
            
            $response->getBody()->write(json_encode($result));
            return $response->withHeader('Content-Type', 'application/json');
        } catch (\Exception $e) {
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(404);
        }
    }
    
    public function listPosts(Request $request, Response $response): Response {
        try {
            $filters = $request->getQueryParams();
            $result = $this->blogService->listPosts($filters);
            
            $response->getBody()->write(json_encode($result));
            return $response->withHeader('Content-Type', 'application/json');
        } catch (\Exception $e) {
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(400);
        }
    }
    
    public function updatePost(Request $request, Response $response, array $args): Response {
        try {
            $postId = (int) $args['id'];
            $data = $request->getParsedBody();
            
            // Verify user is the author
            $userId = $request->getAttribute('user_id');
            $result = $this->blogService->updatePost($postId, $data, $userId);
            
            $response->getBody()->write(json_encode($result));
            return $response->withHeader('Content-Type', 'application/json');
        } catch (\Exception $e) {
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(400);
        }
    }
    
    public function deletePost(Request $request, Response $response, array $args): Response {
        try {
            $postId = (int) $args['id'];
            $userId = $request->getAttribute('user_id');
            
            $this->blogService->deletePost($postId, $userId);
            
            return $response->withStatus(204);
        } catch (\Exception $e) {
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(400);
        }
    }
}
=== ./backend/src/api/QuizController.php ===
<?php
namespace PawPath\api;

use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use PawPath\services\QuizService;
use PawPath\models\StartingQuiz;

class QuizController {
    private QuizService $quizService;
    private StartingQuiz $startingQuiz;
    
    public function __construct() {
        $this->quizService = new QuizService();
        $this->startingQuiz = new StartingQuiz();
    }
    
    /**
     * Initialize a new quiz and return questions
     */
    public function startQuiz(Request $request, Response $response): Response {
        try {
            $questions = $this->quizService->getQuizQuestions();
            
            $response->getBody()->write(json_encode([
                'success' => true,
                'data' => [
                    'questions' => $questions,
                    'total_sections' => count($questions['sections']),
                    'estimated_time' => '5-10 minutes'
                ]
            ]));
            
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(200);
        } catch (\Exception $e) {
            $response->getBody()->write(json_encode([
                'success' => false,
                'error' => 'Failed to initialize quiz',
                'message' => $e->getMessage()
            ]));
            
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(500);
        }
    }
    
    /**
     * Submit quiz answers and get recommendations
     */
    public function submitQuiz(Request $request, Response $response): Response {
        try {
            $userId = $request->getAttribute('user_id');
            $data = json_decode((string)$request->getBody(), true);
            
            if (json_last_error() !== JSON_ERROR_NONE) {
                throw new \InvalidArgumentException('Invalid JSON data: ' . json_last_error_msg());
            }
            
            if (empty($data['answers'])) {
                throw new \InvalidArgumentException('Quiz answers are required');
            }
            
            // Process quiz and get recommendations
            $result = $this->quizService->processQuiz($userId, $data['answers']);
            
            $response->getBody()->write(json_encode([
                'success' => true,
                'data' => [
                    'quiz_id' => $result['quiz_id'],
                    'recommendations' => [
                        'species' => $result['recommendations']['recommended_species'],
                        'breed' => $result['recommendations']['recommended_breed'],
                        'traits' => $result['recommendations']['trait_preferences']
                    ],
                    'confidence_score' => $result['confidence_score'],
                    'matching_pets' => $result['matching_pets']
                ]
            ]));
            
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(200);
        } catch (\InvalidArgumentException $e) {
            $response->getBody()->write(json_encode([
                'success' => false,
                'error' => 'Invalid quiz submission',
                'message' => $e->getMessage()
            ]));
            
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(400);
        } catch (\Exception $e) {
            // Add error logging
            error_log("Quiz submission error: " . $e->getMessage());
            error_log("Stack trace: " . $e->getTraceAsString());
            $response->getBody()->write(json_encode([
                'success' => false,
                'error' => 'Failed to process quiz',
                'message' => $e->getMessage()
            ]));
            
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(500);
        }
    }
    
    /**
     * Get quiz history for a user
     */
    public function getQuizHistory(Request $request, Response $response): Response {
        try {
            $userId = $request->getAttribute('user_id');
            $history = $this->startingQuiz->findByUser($userId);
            
            // Process history to include more readable data
            $processedHistory = array_map(function($entry) {
                return [
                    'quiz_id' => $entry['quiz_id'],
                    'date_taken' => $entry['quiz_date'],
                    'recommendations' => [
                        'species' => $entry['recommended_species'],
                        'breed' => $entry['recommended_breed'],
                        'traits' => json_decode($entry['trait_preferences'] ?? '{}', true)
                    ]
                ];
            }, $history);
            
            $response->getBody()->write(json_encode([
                'success' => true,
                'data' => [
                    'history' => $processedHistory,
                    'total_quizzes' => count($history)
                ]
            ]));
            
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(200);
        } catch (\Exception $e) {
            $response->getBody()->write(json_encode([
                'success' => false,
                'error' => 'Failed to retrieve quiz history',
                'message' => $e->getMessage()
            ]));
            
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(500);
        }
    }
    
    /**
     * Get specific quiz result
     */
    public function getQuizResult(Request $request, Response $response, array $args): Response {
        try {
            $quizId = (int) $args['id'];
            $userId = $request->getAttribute('user_id');
            
            // Get quiz and verify it belongs to the user
            $quiz = $this->startingQuiz->findById($quizId);
            
            if (!$quiz) {
                throw new \InvalidArgumentException('Quiz not found');
            }
            
            if ($quiz['user_id'] !== $userId) {
                throw new \InvalidArgumentException('Unauthorized access to quiz result');
            }
            
            $response->getBody()->write(json_encode([
                'success' => true,
                'data' => [
                    'quiz_id' => $quiz['quiz_id'],
                    'date_taken' => $quiz['quiz_date'],
                    'recommendations' => [
                        'species' => $quiz['recommended_species'],
                        'breed' => $quiz['recommended_breed'],
                        'traits' => json_decode($quiz['trait_preferences'] ?? '{}', true)
                    ]
                ]
            ]));
            
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(200);
        } catch (\InvalidArgumentException $e) {
            $response->getBody()->write(json_encode([
                'success' => false,
                'error' => 'Invalid quiz request',
                'message' => $e->getMessage()
            ]));
            
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(400);
        } catch (\Exception $e) {
            $response->getBody()->write(json_encode([
                'success' => false,
                'error' => 'Failed to retrieve quiz result',
                'message' => $e->getMessage()
            ]));
            
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(500);
        }
    }
}
=== ./backend/src/api/ProductController.php ===
<?php
// src/api/ProductController.php
namespace PawPath\api;

use PawPath\services\ProductService;
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;

class ProductController {
    private ProductService $productService;
    
    public function __construct() {
        $this->productService = new ProductService();
    }
    
    public function createProduct(Request $request, Response $response): Response {
        try {
            $data = $request->getParsedBody();
            
            $result = $this->productService->createProduct($data);
            
            $response->getBody()->write(json_encode($result));
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(201);
        } catch (\Exception $e) {
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(400);
        }
    }
    
    public function getProduct(Request $request, Response $response, array $args): Response {
        try {
            $productId = (int) $args['id'];
            $result = $this->productService->getProduct($productId);
            
            $response->getBody()->write(json_encode($result));
            return $response->withHeader('Content-Type', 'application/json');
        } catch (\Exception $e) {
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(404);
        }
    }
    
    public function listProducts(Request $request, Response $response): Response {
        try {
            $filters = $request->getQueryParams();
            $result = $this->productService->listProducts($filters);
            
            $response->getBody()->write(json_encode($result));
            return $response->withHeader('Content-Type', 'application/json');
        } catch (\Exception $e) {
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(400);
        }
    }
    
    public function updateProduct(Request $request, Response $response, array $args): Response {
        try {
            $productId = (int) $args['id'];
            $data = $request->getParsedBody();
            
            $result = $this->productService->updateProduct($productId, $data);
            
            $response->getBody()->write(json_encode($result));
            return $response->withHeader('Content-Type', 'application/json');
        } catch (\Exception $e) {
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(400);
        }
    }
    
    public function deleteProduct(Request $request, Response $response, array $args): Response {
        try {
            $productId = (int) $args['id'];
            $this->productService->deleteProduct($productId);
            
            return $response->withStatus(204);
        } catch (\Exception $e) {
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(400);
        }
    }
}
=== ./backend/src/api/ShelterController.php ===
<?php
// backend/src/api/ShelterController.php

namespace PawPath\api;

use PawPath\services\ShelterService;
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;

class ShelterController {
    private ShelterService $shelterService;
    
    public function __construct() {
        $this->shelterService = new ShelterService();
    }
    
    public function createShelter(Request $request, Response $response): Response {
        try {
            $data = $request->getParsedBody();
            error_log('Creating shelter with data: ' . print_r($data, true));
            
            if (!is_array($data)) {
                $body = (string) $request->getBody();
                $data = json_decode($body, true);
                
                if (json_last_error() !== JSON_ERROR_NONE) {
                    throw new \RuntimeException('Invalid JSON data provided');
                }
            }
            
            $result = $this->shelterService->createShelter($data);
            
            $response->getBody()->write(json_encode($result));
            return $response->withHeader('Content-Type', 'application/json')
                           ->withStatus(201);
        } catch (\Exception $e) {
            error_log('Error creating shelter: ' . $e->getMessage());
            
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response->withHeader('Content-Type', 'application/json')
                           ->withStatus(400);
        }
    }
    
    public function getShelter(Request $request, Response $response, array $args): Response {
        try {
            $shelterId = (int) $args['id'];
            $result = $this->shelterService->getShelter($shelterId);
            
            $response->getBody()->write(json_encode($result));
            return $response->withHeader('Content-Type', 'application/json');
        } catch (\Exception $e) {
            error_log('Error getting shelter: ' . $e->getMessage());
            
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response->withHeader('Content-Type', 'application/json')
                           ->withStatus(404);
        }
    }
    
    public function listShelters(Request $request, Response $response): Response {
        try {
            $queryParams = $request->getQueryParams();
            $filters = [];
            
            // Handle search parameter
            if (!empty($queryParams['search'])) {
                $filters['search'] = $queryParams['search'];
            }
            
            // Handle no-kill filter
            if (isset($queryParams['is_no_kill'])) {
                $filters['is_no_kill'] = (bool) $queryParams['is_no_kill'];
            }
            
            $result = $this->shelterService->listShelters($filters);
            
            $response->getBody()->write(json_encode($result));
            return $response->withHeader('Content-Type', 'application/json');
        } catch (\Exception $e) {
            error_log('Error listing shelters: ' . $e->getMessage());
            
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response->withHeader('Content-Type', 'application/json')
                           ->withStatus(500);
        }
    }
    
    public function updateShelter(Request $request, Response $response, array $args): Response {
        try {
            $shelterId = (int) $args['id'];
            $data = $request->getParsedBody();
            
            if (!is_array($data)) {
                $body = (string) $request->getBody();
                $data = json_decode($body, true);
                
                if (json_last_error() !== JSON_ERROR_NONE) {
                    throw new \RuntimeException('Invalid JSON data provided');
                }
            }
            
            $result = $this->shelterService->updateShelter($shelterId, $data);
            
            $response->getBody()->write(json_encode($result));
            return $response->withHeader('Content-Type', 'application/json');
        } catch (\Exception $e) {
            error_log('Error updating shelter: ' . $e->getMessage());
            
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response->withHeader('Content-Type', 'application/json')
                           ->withStatus(400);
        }
    }
    
    public function deleteShelter(Request $request, Response $response, array $args): Response {
        try {
            $shelterId = (int) $args['id'];
            $this->shelterService->deleteShelter($shelterId);
            
            return $response->withStatus(204);
        } catch (\Exception $e) {
            error_log('Error deleting shelter: ' . $e->getMessage());
            
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response->withHeader('Content-Type', 'application/json')
                           ->withStatus(400);
        }
    }
}
=== ./backend/src/api/AdoptionController.php ===
<?php
// backend/src/api/AdoptionController.php

namespace PawPath\api;

use PawPath\utils\ResponseHelper;
use PawPath\services\AdoptionService;
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;

class AdoptionController {
    private AdoptionService $adoptionService;
    
    public function __construct() {
        $this->adoptionService = new AdoptionService();
    }
    
    public function submitApplication(Request $request, Response $response): Response {
        try {
            $userId = $request->getAttribute('user_id');
            $data = $request->getParsedBody();
            
            if (!isset($data['pet_id'])) {
                throw new \RuntimeException('pet_id is required');
            }
            
            // Add application details to the database
            $result = $this->adoptionService->createApplication([
                'user_id' => $userId,
                'pet_id' => (int) $data['pet_id'],
                'reason' => $data['reason'] ?? null,
                'experience' => $data['experience'] ?? null,
                'living_situation' => $data['living_situation'] ?? null,
                'has_other_pets' => $data['has_other_pets'] ?? false,
                'other_pets_details' => $data['other_pets_details'] ?? null,
                'daily_schedule' => $data['daily_schedule'] ?? null,
                'veterinarian' => $data['veterinarian'] ?? null,
                'status' => 'pending'
            ]);
            
            return ResponseHelper::sendResponse($response, $result, 201);
        } catch (\Exception $e) {
            return ResponseHelper::sendError(
                $response, 
                $e->getMessage(),
                400
            );
        }
    }
    
    public function getUserApplications(Request $request, Response $response): Response {
        try {
            $userId = $request->getAttribute('user_id');
            $applications = $this->adoptionService->getUserApplications($userId);
            
            return ResponseHelper::sendResponse($response, $applications);
        } catch (\Exception $e) {
            error_log('Error getting user applications: ' . $e->getMessage());
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }
    
    public function getShelterApplications(Request $request, Response $response, array $args): Response {
        try {
            $shelterId = (int) $args['shelter_id'];
            $result = $this->adoptionService->getShelterApplications($shelterId);
            
            $response->getBody()->write(json_encode($result));
            return $response->withHeader('Content-Type', 'application/json');
        } catch (\Exception $e) {
            error_log('Error getting shelter applications: ' . $e->getMessage());
            
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response->withHeader('Content-Type', 'application/json')
                           ->withStatus(400);
        }
    }
    
    public function getApplication(Request $request, Response $response, array $args): Response {
        try {
            $applicationId = (int) $args['id'];
            $result = $this->adoptionService->getApplication($applicationId);
            
            $response->getBody()->write(json_encode($result));
            return $response->withHeader('Content-Type', 'application/json');
        } catch (\Exception $e) {
            error_log('Error getting application: ' . $e->getMessage());
            
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response->withHeader('Content-Type', 'application/json')
                           ->withStatus(404);
        }
    }
    
    public function updateApplicationStatus(Request $request, Response $response, array $args): Response {
        try {
            $applicationId = (int) $args['id'];
            $data = $request->getParsedBody();
            
            if (!isset($data['status'])) {
                throw new \RuntimeException('status is required');
            }
            
            $result = $this->adoptionService->updateApplicationStatus(
                $applicationId,
                $data['status']
            );
            
            $response->getBody()->write(json_encode($result));
            return $response->withHeader('Content-Type', 'application/json');
        } catch (\Exception $e) {
            error_log('Error updating application status: ' . $e->getMessage());
            
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response->withHeader('Content-Type', 'application/json')
                           ->withStatus(400);
        }
    }
    
    public function getPetApplications(Request $request, Response $response, array $args): Response {
        try {
            $petId = (int) $args['pet_id'];
            $result = $this->adoptionService->getPetApplications($petId);
            
            $response->getBody()->write(json_encode($result));
            return $response->withHeader('Content-Type', 'application/json');
        } catch (\Exception $e) {
            error_log('Error getting pet applications: ' . $e->getMessage());
            
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response->withHeader('Content-Type', 'application/json')
                           ->withStatus(400);
        }
    }
}
=== ./backend/src/api/AuthController.php ===
<?php
namespace PawPath\api;

use PawPath\services\AuthService;
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use PawPath\utils\ResponseHelper;

class AuthController {
    private AuthService $authService;
    
    public function __construct() {
        $this->authService = new AuthService();
    }

    public function register(Request $request, Response $response): Response {
        try {
            $data = $request->getParsedBody();
            error_log('Registration attempt: ' . print_r($data, true));
            
            if (empty($data['email']) || empty($data['password']) || empty($data['username'])) {
                return ResponseHelper::sendError($response, 'Missing required fields', 400);
            }
            
            $result = $this->authService->register($data);
            
            // Try to send verification email
            try {
                $emailService = new EmailService();
                $emailService->sendVerificationEmail(
                    $data['email'],
                    $data['username'],
                    $result['user']['email_verification_token']
                );
            } catch (\Exception $e) {
                // Log email error but don't fail registration
                error_log('Failed to send verification email: ' . $e->getMessage());
            }
            
            return ResponseHelper::sendResponse($response, $result, 201);
            
        } catch (\Exception $e) {
            error_log('Registration error: ' . $e->getMessage());
            return ResponseHelper::sendError(
                $response, 
                $e->getMessage(), 
                $e instanceof RuntimeException ? 400 : 500
            );
        }
    }
    
    public function login(Request $request, Response $response): Response {
        try {
            $data = $request->getParsedBody();
            error_log('Login attempt for email: ' . ($data['email'] ?? 'not provided'));
            
            if (empty($data['email']) || empty($data['password'])) {
                return ResponseHelper::sendError($response, 'Email and password are required', 400);
            }
            
            $result = $this->authService->login($data);
            return ResponseHelper::sendResponse($response, $result);
            
        } catch (\Exception $e) {
            error_log('Login error: ' . $e->getMessage());
            error_log('Stack trace: ' . $e->getTraceAsString());
            return ResponseHelper::sendError(
                $response, 
                'An error occurred during login. Please try again.', 
                500
            );
        }
    }

    public function getCurrentUser(Request $request, Response $response): Response {
        try {
            $userId = $request->getAttribute('user_id');
            $user = $this->authService->getUser($userId);
            
            if (!$user) {
                throw new \RuntimeException('User not found');
            }
            
            return ResponseHelper::sendResponse($response, [
                'user' => $user
            ]);
        } catch (\Exception $e) {
            error_log('Error getting current user: ' . $e->getMessage());
            return ResponseHelper::sendError(
                $response, 
                'Failed to get user information', 
                500
            );
        }
    }

    public function verifyEmail(Request $request, Response $response): Response {
        try {
            $data = $request->getParsedBody();
            
            if (empty($data['token'])) {
                return ResponseHelper::sendError($response, 'Verification token is required', 400);
            }
            
            $result = $this->authService->verifyEmailToken($data['token']);
            return ResponseHelper::sendResponse($response, [
                'message' => 'Email verified successfully'
            ]);
        } catch (\Exception $e) {
            error_log('Email verification error: ' . $e->getMessage());
            return ResponseHelper::sendError($response, 'Failed to verify email', 500);
        }
    }

    public function resendVerification(Request $request, Response $response): Response {
        try {
            $userId = $request->getAttribute('user_id');
            $result = $this->authService->resendVerificationEmail($userId);
            
            return ResponseHelper::sendResponse($response, [
                'message' => 'Verification email sent successfully'
            ]);
        } catch (\Exception $e) {
            error_log('Resend verification error: ' . $e->getMessage());
            return ResponseHelper::sendError(
                $response, 
                'Failed to resend verification email', 
                500
            );
        }
    }
}
=== ./backend/src/api/AdminController.php ===
<?php
namespace PawPath\api;

use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use PawPath\models\User;
use PawPath\models\Shelter;
use PawPath\services\EmailService;
use PawPath\utils\ResponseHelper;
use PawPath\config\database\DatabaseConfig;
use PDO;

class AdminController {
    private User $userModel;
    private EmailService $emailService;
    private PDO $db;
    private Shelter $shelterModel;

    public function __construct() {
        $this->userModel = new User();
        $this->emailService = new EmailService();
        $this->db = DatabaseConfig::getConnection();
        $this->shelterModel = new Shelter();
    }

    public function getStats(Request $request, Response $response): Response {
        try {
            $stats = [
                'totalUsers' => $this->userModel->countUsers(),
                'totalShelters' => $this->userModel->countByRole('shelter_staff'),
                'totalPets' => count($this->userModel->findAll(['role' => 'admin'])),
                'totalApplications' => 0, // Implement this with your applications model
                'pendingApplications' => 0,
                'activeUsers' => $this->userModel->countByStatus('active'),
                'recentActivity' => [] // Implement activity logging if needed
            ];

            return ResponseHelper::sendResponse($response, $stats);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }

    public function listUsers(Request $request, Response $response): Response {
        try {
            $queryParams = $request->getQueryParams();
            $filters = [];

            // Handle search
            if (!empty($queryParams['search'])) {
                $filters['search'] = $queryParams['search'];
            }

            // Handle role filter
            if (!empty($queryParams['role']) && $queryParams['role'] !== 'all') {
                $filters['role'] = $queryParams['role'];
            }

            // Handle status filter
            if (!empty($queryParams['status']) && $queryParams['status'] !== 'all') {
                $filters['account_status'] = $queryParams['status'];
            }

            $users = $this->userModel->findAll($filters);

            return ResponseHelper::sendResponse($response, $users);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }

    public function updateUserRole(Request $request, Response $response, array $args): Response {
        try {
            $userId = (int) $args['id'];
            $data = $request->getParsedBody();

            if (empty($data['role'])) {
                throw new \InvalidArgumentException('Role is required');
            }

            $success = $this->userModel->updateRole($userId, $data['role']);

            if (!$success) {
                throw new \RuntimeException('Failed to update user role');
            }

            $updatedUser = $this->userModel->findById($userId);
            return ResponseHelper::sendResponse($response, $updatedUser);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }

    public function updateUserStatus(Request $request, Response $response, array $args): Response {
        try {
            $userId = (int) $args['id'];
            $data = $request->getParsedBody();

            if (empty($data['status'])) {
                throw new \InvalidArgumentException('Status is required');
            }

            $success = $this->userModel->updateAccountStatus($userId, $data['status']);

            if (!$success) {
                throw new \RuntimeException('Failed to update user status');
            }

            $updatedUser = $this->userModel->findById($userId);
            return ResponseHelper::sendResponse($response, $updatedUser);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }

    public function listShelters(Request $request, Response $response): Response {
        try {
            $queryParams = $request->getQueryParams();
            $filters = [];

            // Handle search
            if (!empty($queryParams['search'])) {
                $filters['search'] = $queryParams['search'];
            }

            // Handle no-kill filter
            if (isset($queryParams['is_no_kill'])) {
                $filters['is_no_kill'] = (bool)$queryParams['is_no_kill'];
            }

            $shelterModel = new \PawPath\models\Shelter();
            $shelters = $shelterModel->findAll($filters);

            // Get additional stats for each shelter
            foreach ($shelters as &$shelter) {
                // Get total pets
                $stmt = $this->db->prepare("
                    SELECT COUNT(*) FROM Pet 
                    WHERE shelter_id = ?
                ");
                $stmt->execute([$shelter['shelter_id']]);
                $shelter['total_pets'] = (int)$stmt->fetchColumn();

                // Get active applications
                $stmt = $this->db->prepare("
                    SELECT COUNT(*) FROM Adoption_Application aa
                    JOIN Pet p ON aa.pet_id = p.pet_id
                    WHERE p.shelter_id = ? 
                    AND aa.status IN ('pending', 'under_review')
                ");
                $stmt->execute([$shelter['shelter_id']]);
                $shelter['active_applications'] = (int)$stmt->fetchColumn();
            }

            return ResponseHelper::sendResponse($response, $shelters);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }

    public function createShelter(Request $request, Response $response): Response {
        try {
            $data = $request->getParsedBody();
            
            if (empty($data['name']) || empty($data['address']) || empty($data['phone']) || empty($data['email'])) {
                throw new \InvalidArgumentException('Missing required shelter information');
            }

            $shelterModel = new \PawPath\models\Shelter();
            $shelterId = $shelterModel->create($data);
            $shelter = $shelterModel->findById($shelterId);

            return ResponseHelper::sendResponse($response, $shelter);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }

    public function deleteShelter(Request $request, Response $response, array $args): Response {
        try {
            $shelterId = (int)$args['id'];
            $shelterModel = new \PawPath\models\Shelter();
            
            // Check if shelter has any pets
            $stmt = $this->db->prepare("SELECT COUNT(*) FROM Pet WHERE shelter_id = ?");
            $stmt->execute([$shelterId]);
            if ($stmt->fetchColumn() > 0) {
                throw new \RuntimeException('Cannot delete shelter with existing pets');
            }

            $success = $shelterModel->delete($shelterId);
            
            if (!$success) {
                throw new \RuntimeException('Failed to delete shelter');
            }

            return ResponseHelper::sendResponse($response, ['message' => 'Shelter deleted successfully']);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }

    public function resendVerification(Request $request, Response $response, array $args): Response {
        try {
            $userId = (int) $args['id'];
            $user = $this->userModel->findById($userId);

            if (!$user) {
                throw new \RuntimeException('User not found');
            }

            $token = $this->userModel->createEmailVerificationToken($userId);
            $this->emailService->sendVerificationEmail($user['email'], $user['username'], $token);

            return ResponseHelper::sendResponse($response, [
                'message' => 'Verification email sent successfully'
            ]);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }
}
=== ./backend/src/utils/ResponseHelper.php ===
<?php
namespace PawPath\utils;

use Psr\Http\Message\ResponseInterface;

class ResponseHelper {
    public static function sendResponse(ResponseInterface $response, $data, int $status = 200): ResponseInterface {
        $body = json_encode([
            'success' => true,
            'data' => $data
        ]);
        
        if (json_last_error() !== JSON_ERROR_NONE) {
            error_log("JSON encode error: " . json_last_error_msg());
            return self::sendError($response, "Internal server error", 500);
        }
        
        $response->getBody()->write($body);
        
        return $response
            ->withHeader('Content-Type', 'application/json')
            ->withStatus($status);
    }

    public static function sendError(ResponseInterface $response, string $message, int $status = 400): ResponseInterface {
        $body = json_encode([
            'success' => false,
            'error' => $message
        ]);
        
        $response->getBody()->write($body);
        
        return $response
            ->withHeader('Content-Type', 'application/json')
            ->withStatus($status);
    }
}
=== ./backend/src/models/Pet.php ===
<?php
namespace PawPath\models;

use PDO;
use PDOException;
use PawPath\config\database\DatabaseConfig;

class Pet {
    private PDO $db;
    private static array $validSpecies = ['Dog', 'Cat', 'Bird', 'Rabbit', 'Other'];

    private function formatTraits(array $traits): array {
        $formatted = [];
        foreach ($traits as $trait) {
            $category = $trait['category'] ?? 'General';
            if (!isset($formatted[$category])) {
                $formatted[$category] = [];
            }
            $formatted[$category][] = $trait['trait_name'];
        }
        return $formatted;
    }

    private function validatePetData(array $data): void {
        $requiredFields = ['name', 'species', 'shelter_id'];
        foreach ($requiredFields as $field) {
            if (empty($data[$field])) {
                throw new \InvalidArgumentException("Missing required field: $field");
            }
        }
        
        if (!in_array(ucfirst(strtolower($data['species'])), self::$validSpecies)) {
            throw new \InvalidArgumentException("Invalid species. Must be one of: " . implode(', ', self::$validSpecies));
        }
    }
 
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
    }
    
    public function findAll(array $filters = []): array {
        try {
            $query = "
                SELECT p.*, s.name as shelter_name 
                FROM Pet p
                LEFT JOIN Shelter s ON p.shelter_id = s.shelter_id
                WHERE 1=1
            ";
            $params = [];
            
            if (isset($filters['species'])) {
                $query .= " AND p.species = ?";
                $params[] = $filters['species'];
            }
            
            if (isset($filters['shelter_id'])) {
                $query .= " AND p.shelter_id = ?";
                $params[] = $filters['shelter_id'];
            }

            if (isset($filters['breed'])) {
                $query .= " AND p.breed LIKE ?";
                $params[] = '%' . $filters['breed'] . '%';
            }

            if (isset($filters['age_min'])) {
                $query .= " AND p.age >= ?";
                $params[] = $filters['age_min'];
            }

            if (isset($filters['age_max'])) {
                $query .= " AND p.age <= ?";
                $params[] = $filters['age_max'];
            }

            if (isset($filters['gender'])) {
                $query .= " AND p.gender = ?";
                $params[] = $filters['gender'];
            }
            
            $stmt = $this->db->prepare($query);
            $stmt->execute($params);
            $pets = $stmt->fetchAll();
        
        foreach ($pets as &$pet) {
            $stmt = $this->db->prepare("
                SELECT t.trait_id, t.trait_name, tc.name as category
                FROM Pet_Trait_Relation ptr
                JOIN Pet_Trait t ON ptr.trait_id = t.trait_id
                LEFT JOIN Trait_Category tc ON t.category_id = tc.category_id
                WHERE ptr.pet_id = ?
            ");
            $stmt->execute([$pet['pet_id']]);
            $traits = $stmt->fetchAll();
            $pet['traits'] = $this->formatTraits($traits);
            }
            
            return $pets;
        } catch (PDOException $e) {
            error_log("Error finding pets: " . $e->getMessage());
            throw $e;
        }
    }

    public function findById(int $id): ?array {
        try {
            $stmt = $this->db->prepare("
                SELECT p.*, s.name as shelter_name
                FROM Pet p
                LEFT JOIN Shelter s ON p.shelter_id = s.shelter_id
                WHERE p.pet_id = ?
            ");
            
            $stmt->execute([$id]);
            $pet = $stmt->fetch();
            
            if (!$pet) {
                return null;
            }
            
            // Get pet traits with categories
            $stmt = $this->db->prepare("
                SELECT t.trait_id, t.trait_name, tc.name as category
                FROM Pet_Trait_Relation ptr
                JOIN Pet_Trait t ON ptr.trait_id = t.trait_id
                LEFT JOIN Trait_Category tc ON t.category_id = tc.category_id
                WHERE ptr.pet_id = ?
            ");
            $stmt->execute([$id]);
            $traits = $stmt->fetchAll();
            
            $pet['traits'] = $this->formatTraits($traits);
            
            return $pet;
        } catch (PDOException $e) {
            error_log("Error finding pet by ID: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function create(array $data): int {
        try {
            $this->db->beginTransaction();
            
            error_log("Starting pet creation with data: " . print_r($data, true));
            
            // Validate required fields
            $this->validatePetData($data);
            
            $stmt = $this->db->prepare("
                INSERT INTO Pet (name, species, breed, age, gender, description, shelter_id)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ");
            
            $result = $stmt->execute([
                $data['name'],
                $data['species'],
                $data['breed'] ?? null,
                $data['age'] ?? null,
                $data['gender'] ?? null,
                $data['description'] ?? null,
                $data['shelter_id']
            ]);
            
            if (!$result) {
                error_log("SQL Error: " . print_r($stmt->errorInfo(), true));
                throw new \PDOException("Failed to insert pet");
            }
            
            $petId = (int) $this->db->lastInsertId();
            error_log("Created pet with ID: $petId");
            
            // Add traits if provided
            if (!empty($data['traits']) && is_array($data['traits'])) {
                $this->addTraitsToPet($petId, $data['traits']);
            }
            
            $this->db->commit();
            return $petId;
        } catch (\Exception $e) {
            $this->db->rollBack();
            error_log("Error in Pet::create: " . $e->getMessage() . "\n" . $e->getTraceAsString());
            throw $e;
        }
    }
    
    public function update(int $id, array $data): bool {
        try {
            $this->db->beginTransaction();
            
            $fields = [];
            $params = [];
            
            foreach ($data as $key => $value) {
                if (in_array($key, ['name', 'species', 'breed', 'age', 'gender', 'description', 'shelter_id'])) {
                    $fields[] = "$key = ?";
                    $params[] = $value;
                }
            }
            
            if (!empty($fields)) {
                $params[] = $id;
                $query = "UPDATE Pet SET " . implode(', ', $fields) . " WHERE pet_id = ?";
                
                $stmt = $this->db->prepare($query);
                $stmt->execute($params);
            }
            
            // Update traits if provided
            if (isset($data['traits']) && is_array($data['traits'])) {
                // Remove existing traits
                $stmt = $this->db->prepare("DELETE FROM Pet_Trait_Relation WHERE pet_id = ?");
                $stmt->execute([$id]);
                
                // Add new traits
                $this->addTraitsToPet($id, $data['traits']);
            }
            
            $this->db->commit();
            return true;
        } catch (PDOException $e) {
            $this->db->rollBack();
            error_log("Error updating pet: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function delete(int $id): bool {
        try {
            $this->db->beginTransaction();
            
            // Delete trait relations first
            $stmt = $this->db->prepare("DELETE FROM Pet_Trait_Relation WHERE pet_id = ?");
            $stmt->execute([$id]);
            
            // Delete pet
            $stmt = $this->db->prepare("DELETE FROM Pet WHERE pet_id = ?");
            $result = $stmt->execute([$id]);
            
            $this->db->commit();
            return $result;
        } catch (PDOException $e) {
            $this->db->rollBack();
            error_log("Error deleting pet: " . $e->getMessage());
            throw $e;
        }
    }

    public function findAllWithTraits(array $filters = []): array {
        try {
            error_log("Finding pets with filters: " . json_encode($filters, JSON_PRETTY_PRINT));
            
            // First, let's verify what traits exist in the database
            $stmt = $this->db->query("
                SELECT t.trait_id, t.trait_name, tc.name as category 
                FROM Pet_Trait t 
                LEFT JOIN Trait_Category tc ON t.category_id = tc.category_id
            ");
            error_log("Available traits: " . json_encode($stmt->fetchAll(), JSON_PRETTY_PRINT));
            
            // Then verify what pets and their traits exist
            $stmt = $this->db->query("
                SELECT p.pet_id, p.name, t.trait_name 
                FROM Pet p 
                LEFT JOIN Pet_Trait_Relation ptr ON p.pet_id = ptr.pet_id 
                LEFT JOIN Pet_Trait t ON ptr.trait_id = t.trait_id
            ");
            error_log("Existing pets and traits: " . json_encode($stmt->fetchAll(), JSON_PRETTY_PRINT));
            
            $query = "
                SELECT 
                    p.*,
                    s.name as shelter_name,
                    GROUP_CONCAT(DISTINCT t.trait_name) as trait_names,
                    COUNT(DISTINCT CASE 
                        WHEN t.trait_name IN (" . $this->buildTraitNameList($filters) . ") 
                        THEN t.trait_id 
                    END) as matching_trait_count
                FROM Pet p
                LEFT JOIN Shelter s ON p.shelter_id = s.shelter_id
                LEFT JOIN Pet_Trait_Relation ptr ON p.pet_id = ptr.pet_id
                LEFT JOIN Pet_Trait t ON ptr.trait_id = t.trait_id
                WHERE 1=1
            ";
            
            $params = [];
            
            if (!empty($filters['species'])) {
                $query .= " AND p.species = ?";
                $params[] = $filters['species'];
            }
            
            $query .= " GROUP BY p.pet_id";
            
            if (!empty($filters['traits'])) {
                $query .= " HAVING matching_trait_count > 0";
            }
            
            $query .= " ORDER BY matching_trait_count DESC, p.name";
            
            error_log("Executing query: " . $query);
            error_log("With params: " . json_encode($params));
            
            $stmt = $this->db->prepare($query);
            $stmt->execute($params);
            $pets = $stmt->fetchAll();
            
            error_log("Found pets: " . json_encode($pets, JSON_PRETTY_PRINT));
            
            foreach ($pets as &$pet) {
                $stmt = $this->db->prepare("
                    SELECT t.trait_name, tc.name as category
                    FROM Pet_Trait_Relation ptr
                    JOIN Pet_Trait t ON ptr.trait_id = t.trait_id
                    LEFT JOIN Trait_Category tc ON t.category_id = tc.category_id
                    WHERE ptr.pet_id = ?
                ");
                $stmt->execute([$pet['pet_id']]);
                $traits = $stmt->fetchAll();
                
                $pet['traits'] = [];
                foreach ($traits as $trait) {
                    $category = $trait['category'] ?? 'Uncategorized';
                    if (!isset($pet['traits'][$category])) {
                        $pet['traits'][$category] = [];
                    }
                    $pet['traits'][$category][] = $trait['trait_name'];
                }
            }
            
            return $pets;
        } catch (PDOException $e) {
            error_log("Error finding pets with traits: " . $e->getMessage());
            throw $e;
        }
    }

    private function addTraitsToPet(int $petId, array $traitIds): void {
        // First verify all traits exist
        $placeholders = str_repeat('?,', count($traitIds) - 1) . '?';
        $stmt = $this->db->prepare("
            SELECT trait_id FROM Pet_Trait 
            WHERE trait_id IN ($placeholders)
        ");
        $stmt->execute($traitIds);
        $validTraits = $stmt->fetchAll(PDO::FETCH_COLUMN);
        
        error_log("Valid traits found for pet $petId: " . implode(', ', $validTraits));
        
        if (count($validTraits) !== count($traitIds)) {
            throw new \InvalidArgumentException("Some trait IDs are invalid");
        }
        
        // Insert valid traits
        $stmt = $this->db->prepare("
            INSERT INTO Pet_Trait_Relation (pet_id, trait_id)
            VALUES (?, ?)
        ");
        
        foreach ($validTraits as $traitId) {
            $stmt->execute([$petId, $traitId]);
            error_log("Added trait $traitId to pet $petId");
        }
    }

    private function buildTraitNameList(array $filters): string {
        if (empty($filters['traits'])) {
            return "''";
        }
        
        $traitNames = array_map(function($trait) {
            return $this->db->quote($trait['trait']);
        }, $filters['traits']);
        
        // Add debugging
        error_log("Building trait list from: " . json_encode($filters['traits']));
        error_log("Generated trait list: " . implode(',', $traitNames));
        
        return implode(',', $traitNames);
    }

    private function processTraits(?string $traitsJson): array {
        if (empty($traitsJson)) {
            return [];
        }
        
        $formatted = [];
        $traits = array_filter(explode('},{', trim($traitsJson, '[]')));
        
        foreach ($traits as $trait) {
            if (!str_ends_with($trait, '}')) $trait .= '}';
            if (!str_starts_with($trait, '{')) $trait = '{' . $trait;
            
            $traitData = json_decode($trait, true);
            if ($traitData) {
                $category = $traitData['category'];
                if (!isset($formatted[$category])) {
                    $formatted[$category] = [];
                }
                $formatted[$category][] = $traitData['name'];
            }
        }
        
        return $formatted;
    }
}
=== ./backend/src/models/Shelter.php ===
<?php
// backend/src/models/Shelter.php

namespace PawPath\models;

use PDO;
use PDOException;
use PawPath\config\database\DatabaseConfig;

class Shelter {
    private PDO $db;
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
    }
    
    public function create(array $data): int {
        try {
            error_log("Creating new shelter: " . $data['name']);
            
            $stmt = $this->db->prepare("
                INSERT INTO Shelter (name, address, phone, email, is_no_kill)
                VALUES (?, ?, ?, ?, ?)
            ");
            
            $success = $stmt->execute([
                $data['name'],
                $data['address'],
                $data['phone'],
                $data['email'],
                $data['is_no_kill'] ?? false
            ]);
            
            if (!$success) {
                error_log("Failed to create shelter: " . print_r($stmt->errorInfo(), true));
                throw new PDOException("Failed to create shelter");
            }
            
            $shelterId = (int) $this->db->lastInsertId();
            error_log("Created shelter with ID: " . $shelterId);
            
            return $shelterId;
        } catch (PDOException $e) {
            error_log("Error creating shelter: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function findById(int $id): ?array {
        try {
            $stmt = $this->db->prepare("
                SELECT shelter_id, name, address, phone, email, is_no_kill
                FROM Shelter
                WHERE shelter_id = ?
            ");
            
            $stmt->execute([$id]);
            $shelter = $stmt->fetch();
            
            return $shelter ?: null;
        } catch (PDOException $e) {
            error_log("Error finding shelter: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function findAll(array $filters = []): array {
        try {
            $query = "SELECT shelter_id, name, address, phone, email, is_no_kill FROM Shelter WHERE 1=1";
            $params = [];
            
            // Add filter for no-kill shelters
            if (isset($filters['is_no_kill'])) {
                $query .= " AND is_no_kill = ?";
                $params[] = $filters['is_no_kill'];
            }
            
            // Add search by name
            if (!empty($filters['search'])) {
                $query .= " AND name LIKE ?";
                $params[] = '%' . $filters['search'] . '%';
            }
            
            $stmt = $this->db->prepare($query);
            $stmt->execute($params);
            
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            error_log("Error finding shelters: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function update(int $id, array $data): bool {
        try {
            $fields = [];
            $params = [];
            
            // Build update fields dynamically
            foreach (['name', 'address', 'phone', 'email', 'is_no_kill'] as $field) {
                if (isset($data[$field])) {
                    $fields[] = "$field = ?";
                    $params[] = $data[$field];
                }
            }
            
            if (empty($fields)) {
                return false;
            }
            
            $params[] = $id;
            $query = "UPDATE Shelter SET " . implode(', ', $fields) . " WHERE shelter_id = ?";
            
            $stmt = $this->db->prepare($query);
            return $stmt->execute($params);
        } catch (PDOException $e) {
            error_log("Error updating shelter: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function delete(int $id): bool {
        try {
            // First check if there are any pets associated with this shelter
            $stmt = $this->db->prepare("SELECT COUNT(*) FROM Pet WHERE shelter_id = ?");
            $stmt->execute([$id]);
            $petCount = $stmt->fetchColumn();
            
            if ($petCount > 0) {
                throw new \RuntimeException("Cannot delete shelter with existing pets");
            }
            
            $stmt = $this->db->prepare("DELETE FROM Shelter WHERE shelter_id = ?");
            return $stmt->execute([$id]);
        } catch (PDOException $e) {
            error_log("Error deleting shelter: " . $e->getMessage());
            throw $e;
        }
    }
}
=== ./backend/src/models/Product.php ===
<?php

namespace PawPath\models;

use PDOException;
use PDO;
use PawPath\config\database\DatabaseConfig;

class Product {
    private PDO $db;
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
    }
    
    public function create(array $data): int {
        try {
            $stmt = $this->db->prepare("
                INSERT INTO Product (
                    name,
                    description,
                    price,
                    affiliate_link
                ) VALUES (?, ?, ?, ?)
            ");
            
            $stmt->execute([
                $data['name'],
                $data['description'] ?? null,
                $data['price'],
                $data['affiliate_link'] ?? null
            ]);
            
            return (int) $this->db->lastInsertId();
        } catch (PDOException $e) {
            error_log("Error creating product: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function findById(int $id): ?array {
        try {
            $stmt = $this->db->prepare("SELECT * FROM Product WHERE product_id = ?");
            $stmt->execute([$id]);
            return $stmt->fetch() ?: null;
        } catch (PDOException $e) {
            error_log("Error finding product: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function findAll(array $filters = []): array {
        try {
            $query = "SELECT * FROM Product WHERE 1=1";
            $params = [];
            
            if (!empty($filters['search'])) {
                $query .= " AND (name LIKE ? OR description LIKE ?)";
                $searchTerm = '%' . $filters['search'] . '%';
                $params[] = $searchTerm;
                $params[] = $searchTerm;
            }
            
            if (isset($filters['price_min'])) {
                $query .= " AND price >= ?";
                $params[] = $filters['price_min'];
            }
            
            if (isset($filters['price_max'])) {
                $query .= " AND price <= ?";
                $params[] = $filters['price_max'];
            }
            
            $stmt = $this->db->prepare($query);
            $stmt->execute($params);
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            error_log("Error finding products: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function update(int $id, array $data): bool {
        try {
            $fields = [];
            $params = [];
            
            foreach (['name', 'description', 'price', 'affiliate_link'] as $field) {
                if (isset($data[$field])) {
                    $fields[] = "$field = ?";
                    $params[] = $data[$field];
                }
            }
            
            if (empty($fields)) {
                return false;
            }
            
            $params[] = $id;
            $query = "UPDATE Product SET " . implode(', ', $fields) . " WHERE product_id = ?";
            
            $stmt = $this->db->prepare($query);
            return $stmt->execute($params);
        } catch (PDOException $e) {
            error_log("Error updating product: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function delete(int $id): bool {
        try {
            $this->db->beginTransaction();
            
            // Delete blog relations first
            $stmt = $this->db->prepare("DELETE FROM Blog_Product_Relation WHERE product_id = ?");
            $stmt->execute([$id]);
            
            // Delete product
            $stmt = $this->db->prepare("DELETE FROM Product WHERE product_id = ?");
            $result = $stmt->execute([$id]);
            
            $this->db->commit();
            return $result;
        } catch (PDOException $e) {
            $this->db->rollBack();
            error_log("Error deleting product: " . $e->getMessage());
            throw $e;
        }
    }
}
=== ./backend/src/models/User.php ===
<?php
// backend/src/models/User.php

namespace PawPath\models;

use PDO;
use PDOException;
use PawPath\config\database\DatabaseConfig;

class User {
    private PDO $db;
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
    }
    
    public function create(array $data): int {
        try {
            error_log("Attempting to create user with username: " . $data['username']);
            
            $stmt = $this->db->prepare("
                INSERT INTO User (username, email, password_hash, registration_date)
                VALUES (?, ?, ?, CURDATE())
            ");
            
            $success = $stmt->execute([
                $data['username'],
                $data['email'],
                password_hash($data['password'], PASSWORD_DEFAULT)
            ]);
            
            if (!$success) {
                error_log("Failed to execute user creation query");
                error_log(print_r($stmt->errorInfo(), true));
                throw new PDOException("Failed to create user");
            }
            
            $userId = (int) $this->db->lastInsertId();
            error_log("Successfully created user with ID: " . $userId);
            
            return $userId;
        } catch (PDOException $e) {
            error_log("Error creating user: " . $e->getMessage());
            throw $e;
        }
    }

    public function findById(int $id): ?array {
        try {
            error_log("Looking up user with ID: " . $id);
            
            $stmt = $this->db->prepare("
                SELECT user_id, username, email, registration_date 
                FROM User 
                WHERE user_id = ?
            ");
            
            $stmt->execute([$id]);
            $user = $stmt->fetch();
            
            if ($user === false) {
                error_log("No user found with ID: " . $id);
                return null;
            }
            
            error_log("Found user: " . print_r($user, true));
            return $user;
        } catch (PDOException $e) {
            error_log("Error finding user: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function findByEmail(string $email): ?array {
        try {
            $stmt = $this->db->prepare("
                SELECT user_id, username, email, password_hash, registration_date 
                FROM User 
                WHERE email = ?
            ");
            
            $stmt->execute([$email]);
            $user = $stmt->fetch();
            
            return $user === false ? null : $user;
        } catch (PDOException $e) {
            error_log("Error finding user by email: " . $e->getMessage());
            throw $e;
        }
    }

    public function updateRole(int $userId, string $role): bool {
        try {
            $stmt = $this->db->prepare("
                UPDATE User 
                SET role = ? 
                WHERE user_id = ?
            ");
            
            return $stmt->execute([$role, $userId]);
        } catch (PDOException $e) {
            error_log("Error updating user role: " . $e->getMessage());
            throw $e;
        }
    }

    public function findAll(array $filters = []): array {
        try {
            $query = "
                SELECT user_id, username, email, role, account_status, 
                       registration_date, last_login, email_verified_at
                FROM User
                WHERE 1=1
            ";
            $params = [];

            if (!empty($filters['search'])) {
                $query .= " AND (username LIKE ? OR email LIKE ?)";
                $searchTerm = '%' . $filters['search'] . '%';
                $params[] = $searchTerm;
                $params[] = $searchTerm;
            }

            if (!empty($filters['role'])) {
                $query .= " AND role = ?";
                $params[] = $filters['role'];
            }

            if (!empty($filters['account_status'])) {
                $query .= " AND account_status = ?";
                $params[] = $filters['account_status'];
            }

            $query .= " ORDER BY registration_date DESC";

            $stmt = $this->db->prepare($query);
            $stmt->execute($params);
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            error_log("Error in findAll: " . $e->getMessage());
            throw $e;
        }
    }

    public function countUsers(): int {
        try {
            $stmt = $this->db->query("SELECT COUNT(*) FROM User");
            return (int) $stmt->fetchColumn();
        } catch (PDOException $e) {
            error_log("Error counting users: " . $e->getMessage());
            throw $e;
        }
    }

    public function countByRole(string $role): int {
        try {
            $stmt = $this->db->prepare("SELECT COUNT(*) FROM User WHERE role = ?");
            $stmt->execute([$role]);
            return (int) $stmt->fetchColumn();
        } catch (PDOException $e) {
            error_log("Error counting users by role: " . $e->getMessage());
            throw $e;
        }
    }

    public function countByStatus(string $status): int {
        try {
            $stmt = $this->db->prepare("SELECT COUNT(*) FROM User WHERE account_status = ?");
            $stmt->execute([$status]);
            return (int) $stmt->fetchColumn();
        } catch (PDOException $e) {
            error_log("Error counting users by status: " . $e->getMessage());
            throw $e;
        }
    }

    public function verifyEmail(int $userId): bool {
        try {
            $stmt = $this->db->prepare("
                UPDATE User 
                SET email_verified_at = CURRENT_TIMESTAMP,
                    email_verification_token = NULL,
                    account_status = 'active'
                WHERE user_id = ?
            ");
            
            return $stmt->execute([$userId]);
        } catch (PDOException $e) {
            error_log("Error verifying email: " . $e->getMessage());
            throw $e;
        }
    }

    public function updateAccountStatus(int $userId, string $status): bool {
        try {
            $stmt = $this->db->prepare("
                UPDATE User 
                SET account_status = ? 
                WHERE user_id = ?
            ");
            
            return $stmt->execute([$status, $userId]);
        } catch (PDOException $e) {
            error_log("Error updating account status: " . $e->getMessage());
            throw $e;
        }
    }

    public function createEmailVerificationToken(int $userId): string {
        try {
            $token = bin2hex(random_bytes(32));
            $expires = date('Y-m-d H:i:s', strtotime('+24 hours'));
            
            $stmt = $this->db->prepare("
                UPDATE User 
                SET email_verification_token = ?,
                    email_token_expires_at = ?
                WHERE user_id = ?
            ");
            
            $stmt->execute([$token, $expires, $userId]);
            return $token;
        } catch (PDOException $e) {
            error_log("Error creating email verification token: " . $e->getMessage());
            throw $e;
        }
    }

    public function updateLastLogin(int $userId): bool {
        try {
            $stmt = $this->db->prepare("
                UPDATE User 
                SET last_login = CURRENT_TIMESTAMP 
                WHERE user_id = ?
            ");
            
            return $stmt->execute([$userId]);
        } catch (PDOException $e) {
            error_log("Error updating last login: " . $e->getMessage());
            throw $e;
        }
    }
}
=== ./backend/src/models/AdoptionApplication.php ===
<?php
namespace PawPath\models;

use PDO;
use PDOException;
use PawPath\config\database\DatabaseConfig;

class AdoptionApplication {
    private PDO $db;
    
    public const STATUS_PENDING = 'pending';
    public const STATUS_UNDER_REVIEW = 'under_review';
    public const STATUS_APPROVED = 'approved';
    public const STATUS_REJECTED = 'rejected';
    public const STATUS_WITHDRAWN = 'withdrawn';
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
    }
    
    public function create(array $data): int {
        try {
            $stmt = $this->db->prepare("
                INSERT INTO Adoption_Application (
                    user_id, pet_id, application_date, status,
                    status_history, reason, experience, living_situation,
                    has_other_pets, other_pets_details, daily_schedule,
                    veterinarian
                ) VALUES (
                    :user_id, :pet_id, :application_date, :status,
                    :status_history, :reason, :experience, :living_situation,
                    :has_other_pets, :other_pets_details, :daily_schedule,
                    :veterinarian
                )
            ");
            
            $stmt->execute([
                'user_id' => $data['user_id'],
                'pet_id' => $data['pet_id'],
                'application_date' => $data['application_date'],
                'status' => $data['status'],
                'status_history' => $data['status_history'],
                'reason' => $data['reason'] ?? null,
                'experience' => $data['experience'] ?? null,
                'living_situation' => $data['living_situation'] ?? null,
                'has_other_pets' => $data['has_other_pets'] ? 1 : 0,
                'other_pets_details' => $data['other_pets_details'] ?? null,
                'daily_schedule' => $data['daily_schedule'] ?? null,
                'veterinarian' => $data['veterinarian'] ?? null
            ]);
            
            return (int) $this->db->lastInsertId();
        } catch (PDOException $e) {
            error_log("Error creating adoption application: " . $e->getMessage());
            throw $e;
        }
    }

    public function findById(int $id): ?array {
        try {
            $stmt = $this->db->prepare("
                SELECT aa.*, p.name as pet_name, p.species as pet_species,
                       p.breed as pet_breed, s.name as shelter_name
                FROM Adoption_Application aa
                JOIN Pet p ON aa.pet_id = p.pet_id
                JOIN Shelter s ON p.shelter_id = s.shelter_id
                WHERE aa.application_id = ?
            ");
            
            $stmt->execute([$id]);
            $result = $stmt->fetch();
            
            return $result ?: null;
        } catch (PDOException $e) {
            error_log("Error finding adoption application: " . $e->getMessage());
            throw $e;
        }
    }

    public function findByUser(int $userId): array {
        try {
            $stmt = $this->db->prepare("
                SELECT 
                    aa.application_id,
                    aa.pet_id,
                    aa.status,
                    aa.application_date,
                    p.name as pet_name,
                    p.species as pet_species,
                    p.breed as pet_breed,
                    s.name as shelter_name
                FROM Adoption_Application aa
                JOIN Pet p ON aa.pet_id = p.pet_id
                JOIN Shelter s ON p.shelter_id = s.shelter_id
                WHERE aa.user_id = ?
                ORDER BY aa.application_date DESC
            ");
            
            $stmt->execute([$userId]);
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            error_log("Error finding user's applications: " . $e->getMessage());
            throw $e;
        }
    }

    public function findByShelter(int $shelterId): array {
        try {
            $stmt = $this->db->prepare("
                SELECT aa.*, p.name as pet_name,
                       u.username as applicant_name
                FROM Adoption_Application aa
                JOIN Pet p ON aa.pet_id = p.pet_id
                JOIN User u ON aa.user_id = u.user_id
                WHERE p.shelter_id = ?
                ORDER BY aa.application_date DESC
            ");
            
            $stmt->execute([$shelterId]);
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            error_log("Error finding shelter's applications: " . $e->getMessage());
            throw $e;
        }
    }

    public function findByPet(int $petId): array {
        try {
            $stmt = $this->db->prepare("
                SELECT aa.*, u.username as applicant_name
                FROM Adoption_Application aa
                JOIN User u ON aa.user_id = u.user_id
                WHERE aa.pet_id = ?
                ORDER BY aa.application_date DESC
            ");
            
            $stmt->execute([$petId]);
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            error_log("Error finding pet's applications: " . $e->getMessage());
            throw $e;
        }
    }

    public function hasUserAppliedForPet(int $userId, int $petId): bool {
        try {
            $stmt = $this->db->prepare("
                SELECT COUNT(*) FROM Adoption_Application
                WHERE user_id = ? AND pet_id = ?
                AND status NOT IN (?, ?)
            ");
            
            $stmt->execute([
                $userId, 
                $petId, 
                self::STATUS_WITHDRAWN, 
                self::STATUS_REJECTED
            ]);
            
            return (bool) $stmt->fetchColumn();
        } catch (PDOException $e) {
            error_log("Error checking user's pet application: " . $e->getMessage());
            throw $e;
        }
    }

    public function updateStatus(int $id, string $status): bool {
        try {
            $stmt = $this->db->prepare("
                UPDATE Adoption_Application
                SET status = ?,
                    last_updated = CURRENT_TIMESTAMP
                WHERE application_id = ?
            ");
            
            return $stmt->execute([$status, $id]);
        } catch (PDOException $e) {
            error_log("Error updating application status: " . $e->getMessage());
            throw $e;
        }
    }
}
=== ./backend/src/models/QuizResult.php ===
<?php

namespace PawPath\Models;

class QuizResult {
    private PDO $db;
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
    }
    
    public function create(array $data): int {
        $stmt = $this->db->prepare("
            INSERT INTO Quiz_Result (quiz_id, recommended_species, recommended_breed)
            VALUES (?, ?, ?)
        ");
        
        $stmt->execute([
            $data['quiz_id'],
            $data['recommended_species'] ?? null,
            $data['recommended_breed'] ?? null
        ]);
        
        return (int) $this->db->lastInsertId();
    }
    
    public function findByQuizId(int $quizId): ?array {
        $stmt = $this->db->prepare("
            SELECT * FROM Quiz_Result WHERE quiz_id = ?
        ");
        
        $stmt->execute([$quizId]);
        $result = $stmt->fetch();
        return $result !== false ? $result : null;
    }
}
=== ./backend/src/models/PetTrait.php ===
<?php
// backend/src/models/PetTrait.php

namespace PawPath\models;

use PDO;
use PDOException;
use PawPath\config\database\DatabaseConfig;

class PetTrait {
    private PDO $db;
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
    }
    
    public function create(string $traitName): int {
        try {
            $stmt = $this->db->prepare("
                INSERT INTO Pet_Trait (trait_name)
                VALUES (?)
            ");
            
            $stmt->execute([$traitName]);
            return (int) $this->db->lastInsertId();
        } catch (PDOException $e) {
            error_log("Error creating pet trait: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function findAll(): array {
        try {
            $stmt = $this->db->prepare("
                SELECT trait_id, trait_name
                FROM Pet_Trait
                ORDER BY trait_name
            ");
            
            $stmt->execute();
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            error_log("Error finding pet traits: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function findById(int $id): ?array {
        try {
            $stmt = $this->db->prepare("
                SELECT trait_id, trait_name
                FROM Pet_Trait
                WHERE trait_id = ?
            ");
            
            $stmt->execute([$id]);
            $result = $stmt->fetch();
            
            return $result ?: null;
        } catch (PDOException $e) {
            error_log("Error finding pet trait: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function update(int $id, string $traitName): bool {
        try {
            $stmt = $this->db->prepare("
                UPDATE Pet_Trait
                SET trait_name = ?
                WHERE trait_id = ?
            ");
            
            return $stmt->execute([$traitName, $id]);
        } catch (PDOException $e) {
            error_log("Error updating pet trait: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function delete(int $id): bool {
        try {
            // Check if trait is in use
            $stmt = $this->db->prepare("
                SELECT COUNT(*) FROM Pet_Trait_Relation
                WHERE trait_id = ?
            ");
            $stmt->execute([$id]);
            
            if ($stmt->fetchColumn() > 0) {
                throw new \RuntimeException("Cannot delete trait that is in use");
            }
            
            $stmt = $this->db->prepare("
                DELETE FROM Pet_Trait
                WHERE trait_id = ?
            ");
            
            return $stmt->execute([$id]);
        } catch (PDOException $e) {
            error_log("Error deleting pet trait: " . $e->getMessage());
            throw $e;
        }
    }
}
=== ./backend/src/models/UserProfile.php ===
<?php
namespace PawPath\models;

use PDO;
use PDOException;
use PawPath\config\database\DatabaseConfig;

class UserProfile {
    private PDO $db;
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
    }
    
    public function create(array $data): int {
        try {
            $stmt = $this->db->prepare("
                INSERT INTO UserProfile (
                    user_id, first_name, last_name, phone, 
                    address, city, state, zip_code,
                    housing_type, has_yard, other_pets, household_members
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ");
            
            $stmt->execute([
                $data['user_id'],
                $data['first_name'] ?? null,
                $data['last_name'] ?? null,
                $data['phone'] ?? null,
                $data['address'] ?? null,
                $data['city'] ?? null,
                $data['state'] ?? null,
                $data['zip_code'] ?? null,
                $data['housing_type'] ?? null,
                $data['has_yard'] ?? null,
                $data['other_pets'] ?? null,
                $data['household_members'] ?? null
            ]);
            
            return (int) $this->db->lastInsertId();
        } catch (PDOException $e) {
            error_log("Error creating user profile: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function findByUserId(int $userId): ?array {
        try {
            $stmt = $this->db->prepare("
                SELECT up.*, u.email, u.username, u.role, u.account_status
                FROM UserProfile up
                JOIN User u ON up.user_id = u.user_id
                WHERE up.user_id = ?
            ");
            
            $stmt->execute([$userId]);
            return $stmt->fetch() ?: null;
        } catch (PDOException $e) {
            error_log("Error finding user profile: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function update(int $userId, array $data): bool {
        try {
            $fields = [];
            $params = [];
            
            foreach ($data as $key => $value) {
                if (in_array($key, [
                    'first_name', 'last_name', 'phone', 'address', 'city',
                    'state', 'zip_code', 'housing_type', 'has_yard',
                    'other_pets', 'household_members'
                ])) {
                    $fields[] = "$key = ?";
                    $params[] = $value;
                }
            }
            
            if (empty($fields)) {
                return false;
            }
            
            $params[] = $userId;
            $query = "UPDATE UserProfile SET " . implode(', ', $fields) . " WHERE user_id = ?";
            
            $stmt = $this->db->prepare($query);
            return $stmt->execute($params);
        } catch (PDOException $e) {
            error_log("Error updating user profile: " . $e->getMessage());
            throw $e;
        }
    }
}
=== ./backend/src/models/StartingQuiz.php ===
<?php
// src/models/StartingQuiz.php
namespace PawPath\models;

use PDO;
use PDOException;
use PawPath\config\database\DatabaseConfig;

class StartingQuiz {
    private PDO $db;
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
    }
    
    public function create(int $userId): int {
        try {
            $stmt = $this->db->prepare("
                INSERT INTO Starting_Quiz (user_id, quiz_date)
                VALUES (?, CURRENT_TIMESTAMP)
            ");
            
            $stmt->execute([$userId]);
            return (int) $this->db->lastInsertId();
        } catch (PDOException $e) {
            error_log("Error creating quiz: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function findByUser(int $userId): array {
        try {
            $stmt = $this->db->prepare("
                SELECT sq.*, qr.recommended_species, qr.recommended_breed,
                       qr.trait_preferences
                FROM Starting_Quiz sq
                LEFT JOIN Quiz_Result qr ON sq.quiz_id = qr.quiz_id
                WHERE sq.user_id = ?
                ORDER BY sq.quiz_date DESC
            ");
            
            $stmt->execute([$userId]);
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            error_log("Error finding user quizzes: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function findById(int $quizId): ?array {
        try {
            $stmt = $this->db->prepare("
                SELECT sq.*, qr.recommended_species, qr.recommended_breed,
                       qr.trait_preferences
                FROM Starting_Quiz sq
                LEFT JOIN Quiz_Result qr ON sq.quiz_id = qr.quiz_id
                WHERE sq.quiz_id = ?
            ");
            
            $stmt->execute([$quizId]);
            $result = $stmt->fetch();
            
            return $result ?: null;
        } catch (PDOException $e) {
            error_log("Error finding quiz: " . $e->getMessage());
            throw $e;
        }
    }
}

// src/models/QuizResult.php
class QuizResult {
    private PDO $db;
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
    }
    
    public function create(array $data): int {
        try {
            $stmt = $this->db->prepare("
                INSERT INTO Quiz_Result (
                    quiz_id, 
                    recommended_species, 
                    recommended_breed,
                    trait_preferences,
                    confidence_score
                ) VALUES (?, ?, ?, ?, ?)
            ");
            
            $stmt->execute([
                $data['quiz_id'],
                $data['recommended_species'],
                $data['recommended_breed'],
                json_encode($data['trait_preferences'] ?? []),
                $data['confidence_score'] ?? 0
            ]);
            
            return (int) $this->db->lastInsertId();
        } catch (PDOException $e) {
            error_log("Error creating quiz result: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function findByQuizId(int $quizId): ?array {
        try {
            $stmt = $this->db->prepare("
                SELECT * FROM Quiz_Result WHERE quiz_id = ?
            ");
            
            $stmt->execute([$quizId]);
            $result = $stmt->fetch();
            
            if ($result && isset($result['trait_preferences'])) {
                $result['trait_preferences'] = json_decode($result['trait_preferences'], true);
            }
            
            return $result ?: null;
        } catch (PDOException $e) {
            error_log("Error finding quiz result: " . $e->getMessage());
            throw $e;
        }
    }
}
=== ./backend/src/models/BlogPost.php ===
<?php
// src/models/BlogPost.php
namespace PawPath\models;

use PDO;
use PDOException;
use PawPath\config\database\DatabaseConfig;

class BlogPost {
    private PDO $db;
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
    }
    
    public function create(array $data): int {
        try {
            $stmt = $this->db->prepare("
                INSERT INTO Blog_Post (
                    title,
                    content,
                    publication_date,
                    author_id
                ) VALUES (?, ?, CURDATE(), ?)
            ");
            
            $stmt->execute([
                $data['title'],
                $data['content'],
                $data['author_id']
            ]);
            
            $postId = (int) $this->db->lastInsertId();
            
            // Handle product relationships if provided
            if (!empty($data['product_ids'])) {
                $this->updateProductRelations($postId, $data['product_ids']);
            }
            
            return $postId;
        } catch (PDOException $e) {
            error_log("Error creating blog post: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function findById(int $id): ?array {
        try {
            $stmt = $this->db->prepare("
                SELECT 
                    bp.*,
                    u.username as author_name
                FROM Blog_Post bp
                JOIN User u ON bp.author_id = u.user_id
                WHERE bp.post_id = ?
            ");
            
            $stmt->execute([$id]);
            $post = $stmt->fetch();
            
            if ($post) {
                // Get related products
                $stmt = $this->db->prepare("
                    SELECT p.*
                    FROM Product p
                    JOIN Blog_Product_Relation bpr ON p.product_id = bpr.product_id
                    WHERE bpr.post_id = ?
                ");
                $stmt->execute([$id]);
                $post['products'] = $stmt->fetchAll();
            }
            
            return $post ?: null;
        } catch (PDOException $e) {
            error_log("Error finding blog post: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function findAll(array $filters = []): array {
        try {
            $query = "
                SELECT 
                    bp.*,
                    u.username as author_name
                FROM Blog_Post bp
                JOIN User u ON bp.author_id = u.user_id
                WHERE 1=1
            ";
            $params = [];
            
            if (!empty($filters['search'])) {
                $query .= " AND (
                    bp.title LIKE ? OR 
                    bp.content LIKE ? OR 
                    bp.title LIKE ?
                )";
                $searchTerm = '%' . $filters['search'] . '%';
                $params[] = $searchTerm;
                $params[] = $searchTerm;
                $params[] = $searchTerm;
            }
            
            // Always order by newest first
            $query .= " ORDER BY bp.post_id DESC";
            
            $stmt = $this->db->prepare($query);
            $stmt->execute($params);
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            error_log("Error finding blog posts: " . $e->getMessage());
            throw $e;
        }
    }
        
    public function update(int $id, array $data): bool {
        try {
            $this->db->beginTransaction();
            
            $fields = [];
            $params = [];
            
            if (isset($data['title'])) {
                $fields[] = "title = ?";
                $params[] = $data['title'];
            }
            
            if (isset($data['content'])) {
                $fields[] = "content = ?";
                $params[] = $data['content'];
            }
            
            if (!empty($fields)) {
                $params[] = $id;
                $query = "UPDATE Blog_Post SET " . implode(', ', $fields) . " WHERE post_id = ?";
                
                $stmt = $this->db->prepare($query);
                $stmt->execute($params);
            }
            
            // Update product relations if provided
            if (isset($data['product_ids'])) {
                $this->updateProductRelations($id, $data['product_ids']);
            }
            
            $this->db->commit();
            return true;
        } catch (PDOException $e) {
            $this->db->rollBack();
            error_log("Error updating blog post: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function delete(int $id): bool {
        try {
            $this->db->beginTransaction();
            
            // Delete product relations first
            $stmt = $this->db->prepare("DELETE FROM Blog_Product_Relation WHERE post_id = ?");
            $stmt->execute([$id]);
            
            // Delete blog post
            $stmt = $this->db->prepare("DELETE FROM Blog_Post WHERE post_id = ?");
            $result = $stmt->execute([$id]);
            
            $this->db->commit();
            return $result;
        } catch (PDOException $e) {
            $this->db->rollBack();
            error_log("Error deleting blog post: " . $e->getMessage());
            throw $e;
        }
    }
    
    private function updateProductRelations(int $postId, array $productIds): void {
        // Remove existing relations
        $stmt = $this->db->prepare("DELETE FROM Blog_Product_Relation WHERE post_id = ?");
        $stmt->execute([$postId]);
        
        // Add new relations
        $stmt = $this->db->prepare("
            INSERT INTO Blog_Product_Relation (post_id, product_id)
            VALUES (?, ?)
        ");
        
        foreach ($productIds as $productId) {
            $stmt->execute([$postId, $productId]);
        }
    }
}
=== ./backend/src/services/EmailTemplateService.php ===
<?php
namespace PawPath\services;

class EmailTemplateService {
    public static function getVerificationEmail(string $name, string $link): string {
        return self::getTemplate('verification', [
            'name' => $name,
            'link' => $link
        ]);
    }
    
    public static function getPasswordResetEmail(string $name, string $link): string {
        return self::getTemplate('password-reset', [
            'name' => $name,
            'link' => $link
        ]);
    }
    
    public static function getWelcomeEmail(string $name): string {
        return self::getTemplate('welcome', [
            'name' => $name
        ]);
    }
    
    public static function getAdoptionApplicationEmail(array $data): string {
        return self::getTemplate('adoption-application', $data);
    }
    
    private static function getTemplate(string $name, array $data): string {
        $template = file_get_contents(__DIR__ . "/../templates/emails/{$name}.html");
        
        foreach ($data as $key => $value) {
            $template = str_replace("{{" . $key . "}}", $value, $template);
        }
        
        return $template;
    }
}
=== ./backend/src/services/ProductService.php ===
<?php

namespace PawPath\services;

use PawPath\models\Product;
use RuntimeException;

class ProductService {
    private Product $productModel;
    
    public function __construct() {
        $this->productModel = new Product();
    }
    
    public function createProduct(array $data): array {
        // Validate required fields
        if (empty($data['name']) || !isset($data['price'])) {
            throw new RuntimeException("Name and price are required");
        }
        
        // Validate price
        if ($data['price'] < 0) {
            throw new RuntimeException("Price cannot be negative");
        }
        
        // Create product
        $productId = $this->productModel->create($data);
        return $this->productModel->findById($productId);
    }
    
    public function getProduct(int $id): array {
        $product = $this->productModel->findById($id);
        if (!$product) {
            throw new RuntimeException("Product not found");
        }
        return $product;
    }
    
    public function listProducts(array $filters = []): array {
        // Validate price filters
        if (isset($filters['price_min']) && $filters['price_min'] < 0) {
            throw new RuntimeException("Minimum price cannot be negative");
        }
        
        if (isset($filters['price_max']) && $filters['price_max'] < 0) {
            throw new RuntimeException("Maximum price cannot be negative");
        }
        
        if (isset($filters['price_min'], $filters['price_max']) 
            && $filters['price_min'] > $filters['price_max']) {
            throw new RuntimeException("Minimum price cannot be greater than maximum price");
        }
        
        return $this->productModel->findAll($filters);
    }
    
    public function updateProduct(int $id, array $data): array {
        // Verify product exists
        $product = $this->productModel->findById($id);
        if (!$product) {
            throw new RuntimeException("Product not found");
        }
        
        // Validate price if provided
        if (isset($data['price']) && $data['price'] < 0) {
            throw new RuntimeException("Price cannot be negative");
        }
        
        // Update product
        $this->productModel->update($id, $data);
        return $this->productModel->findById($id);
    }
    
    public function deleteProduct(int $id): void {
        // Verify product exists
        $product = $this->productModel->findById($id);
        if (!$product) {
            throw new RuntimeException("Product not found");
        }
        
        // Delete product
        if (!$this->productModel->delete($id)) {
            throw new RuntimeException("Failed to delete product");
        }
    }
}
=== ./backend/src/services/AdoptionService.php ===
<?php
// backend/src/services/AdoptionService.php

namespace PawPath\services;

use PawPath\models\AdoptionApplication;
use PawPath\models\Pet;
use PawPath\models\User;
use RuntimeException;

class AdoptionService {
    private AdoptionApplication $applicationModel;
    private Pet $petModel;
    private User $userModel;
    
    public function __construct() {
        $this->applicationModel = new AdoptionApplication();
        $this->petModel = new Pet();
        $this->userModel = new User();
    }
    

    public function createApplication(array $data): array {
        try {
            // Verify required fields
            if (!isset($data['user_id']) || !isset($data['pet_id'])) {
                throw new RuntimeException("User ID and Pet ID are required");
            }

            // Verify user exists
            $user = $this->userModel->findById($data['user_id']);
            if (!$user) {
                throw new RuntimeException("User not found");
            }
            
            // Verify pet exists
            $pet = $this->petModel->findById($data['pet_id']);
            if (!$pet) {
                throw new RuntimeException("Pet not found");
            }
            
            // Check if user has already applied for this pet
            if ($this->applicationModel->hasUserAppliedForPet($data['user_id'], $data['pet_id'])) {
                throw new RuntimeException("You have already applied to adopt this pet");
            }
            
            // Create application with all provided fields
            $applicationData = [
                'user_id' => $data['user_id'],
                'pet_id' => $data['pet_id'],
                'status' => 'pending',
                'application_date' => date('Y-m-d'),
                'reason' => $data['reason'] ?? null,
                'experience' => $data['experience'] ?? null,
                'living_situation' => $data['living_situation'] ?? null,
                'has_other_pets' => $data['has_other_pets'] ?? false,
                'other_pets_details' => $data['other_pets_details'] ?? null,
                'daily_schedule' => $data['daily_schedule'] ?? null,
                'veterinarian' => $data['veterinarian'] ?? null,
                'status_history' => json_encode([
                    [
                        'status' => 'pending',
                        'date' => date('Y-m-d H:i:s'),
                        'note' => 'Application submitted'
                    ]
                ])
            ];
            
            // Create application
            $applicationId = $this->applicationModel->create($applicationData);
            
            // Get and format the created application
            $application = $this->applicationModel->findById($applicationId);
            if (!$application) {
                throw new RuntimeException("Failed to create application");
            }

            return [
                'success' => true,
                'data' => $application
            ];
            
        } catch (\Exception $e) {
            error_log("Error in createApplication: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function getUserApplications(int $userId): array {
        // Verify user exists
        $user = $this->userModel->findById($userId);
        if (!$user) {
            throw new RuntimeException("User not found");
        }
        
        return $this->applicationModel->findByUser($userId);
    }
    
    public function getShelterApplications(int $shelterId): array {
        return $this->applicationModel->findByShelter($shelterId);
    }
    
    public function getApplication(int $applicationId): ?array {
        $application = $this->applicationModel->findById($applicationId);
        if (!$application) {
            throw new RuntimeException("Application not found");
        }
        return $application;
    }
    
    public function updateApplicationStatus(int $applicationId, string $status): array {
        // Verify application exists
        $application = $this->applicationModel->findById($applicationId);
        if (!$application) {
            throw new RuntimeException("Application not found");
        }
        
        // Validate status
        $validStatuses = [
            AdoptionApplication::STATUS_PENDING,
            AdoptionApplication::STATUS_UNDER_REVIEW,
            AdoptionApplication::STATUS_APPROVED,
            AdoptionApplication::STATUS_REJECTED,
            AdoptionApplication::STATUS_WITHDRAWN
        ];
        
        if (!in_array($status, $validStatuses)) {
            throw new RuntimeException("Invalid application status");
        }
        
        // Update status
        $this->applicationModel->updateStatus($applicationId, $status);
        
        return $this->applicationModel->findById($applicationId);
    }
    
    public function getPetApplications(int $petId): array {
        // Verify pet exists
        $pet = $this->petModel->findById($petId);
        if (!$pet) {
            throw new RuntimeException("Pet not found");
        }
        
        return $this->applicationModel->findByPet($petId);
    }
}
=== ./backend/src/services/FavoriteService.php ===
<?php
namespace PawPath\services;

use PDO;
use RuntimeException;
use PawPath\config\database\DatabaseConfig;

class FavoriteService {
    private PDO $db;
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
    }
    
    public function addFavorite(int $userId, int $petId): array {
        try {
            // Check if favorite already exists
            $stmt = $this->db->prepare("
                SELECT favorite_id FROM Pet_Favorite
                WHERE user_id = ? AND pet_id = ?
            ");
            $stmt->execute([$userId, $petId]);
            
            if ($stmt->fetch()) {
                throw new RuntimeException('Pet is already favorited');
            }
            
            // Add favorite
            $stmt = $this->db->prepare("
                INSERT INTO Pet_Favorite (user_id, pet_id)
                VALUES (?, ?)
            ");
            
            $stmt->execute([$userId, $petId]);
            
            return [
                'favorite_id' => $this->db->lastInsertId(),
                'user_id' => $userId,
                'pet_id' => $petId
            ];
        } catch (\PDOException $e) {
            throw new RuntimeException('Failed to add favorite: ' . $e->getMessage());
        }
    }
    
    public function removeFavorite(int $userId, int $petId): bool {
        try {
            $stmt = $this->db->prepare("
                DELETE FROM Pet_Favorite
                WHERE user_id = ? AND pet_id = ?
            ");
            
            $stmt->execute([$userId, $petId]);
            return $stmt->rowCount() > 0;
        } catch (\PDOException $e) {
            throw new RuntimeException('Failed to remove favorite: ' . $e->getMessage());
        }
    }
    
    public function getUserFavorites(int $userId): array {
        try {
            // First get the basic pet information
            $stmt = $this->db->prepare("
                SELECT DISTINCT 
                    p.*,
                    s.name as shelter_name,
                    pf.created_at as favorited_at
                FROM Pet_Favorite pf
                JOIN Pet p ON pf.pet_id = p.pet_id
                JOIN Shelter s ON p.shelter_id = s.shelter_id
                WHERE pf.user_id = ?
                ORDER BY pf.created_at DESC
            ");
            
            $stmt->execute([$userId]);
            $pets = $stmt->fetchAll();
            
            // For each pet, get its traits
            foreach ($pets as &$pet) {
                $stmt = $this->db->prepare("
                    SELECT t.trait_name, tc.name as category
                    FROM Pet_Trait_Relation ptr
                    JOIN Pet_Trait t ON ptr.trait_id = t.trait_id
                    LEFT JOIN Trait_Category tc ON t.category_id = tc.category_id
                    WHERE ptr.pet_id = ?
                ");
                
                $stmt->execute([$pet['pet_id']]);
                $traits = $stmt->fetchAll();
                
                // Format traits by category
                $formattedTraits = [];
                foreach ($traits as $trait) {
                    $category = $trait['category'] ?? 'General';
                    if (!isset($formattedTraits[$category])) {
                        $formattedTraits[$category] = [];
                    }
                    $formattedTraits[$category][] = $trait['trait_name'];
                }
                
                $pet['traits'] = $formattedTraits;
            }
            
            return $pets;
        } catch (\PDOException $e) {
            throw new RuntimeException('Failed to get favorites: ' . $e->getMessage());
        }
    }
    
    public function isFavorited(int $userId, int $petId): bool {
        try {
            $stmt = $this->db->prepare("
                SELECT 1 FROM Pet_Favorite
                WHERE user_id = ? AND pet_id = ?
            ");
            
            $stmt->execute([$userId, $petId]);
            return (bool) $stmt->fetch();
        } catch (\PDOException $e) {
            throw new RuntimeException('Failed to check favorite status: ' . $e->getMessage());
        }
    }
}
=== ./backend/src/services/ShelterService.php ===
<?php
// backend/src/services/ShelterService.php

namespace PawPath\services;

use PawPath\models\Shelter;
use RuntimeException;

class ShelterService {
    private Shelter $shelterModel;
    
    public function __construct() {
        $this->shelterModel = new Shelter();
    }
    
    public function createShelter(array $data): array {
        // Validate required fields
        $requiredFields = ['name', 'address', 'phone', 'email'];
        foreach ($requiredFields as $field) {
            if (empty($data[$field])) {
                throw new RuntimeException("Missing required field: $field");
            }
        }
        
        // Validate email format
        if (!filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {
            throw new RuntimeException("Invalid email format");
        }
        
        // Validate phone number (basic validation)
        if (!preg_match("/^[0-9\-\(\)\/\+\s]*$/", $data['phone'])) {
            throw new RuntimeException("Invalid phone number format");
        }
        
        // Create shelter
        $shelterId = $this->shelterModel->create($data);
        
        // Return the created shelter
        return $this->shelterModel->findById($shelterId);
    }
    
    public function updateShelter(int $id, array $data): array {
        // Verify shelter exists
        $shelter = $this->shelterModel->findById($id);
        if (!$shelter) {
            throw new RuntimeException("Shelter not found");
        }
        
        // Validate email if provided
        if (isset($data['email']) && !filter_var($data['email'], FILTER_VALIDATE_EMAIL)) {
            throw new RuntimeException("Invalid email format");
        }
        
        // Validate phone if provided
        if (isset($data['phone']) && !preg_match("/^[0-9\-\(\)\/\+\s]*$/", $data['phone'])) {
            throw new RuntimeException("Invalid phone number format");
        }
        
        // Update shelter
        $success = $this->shelterModel->update($id, $data);
        if (!$success) {
            throw new RuntimeException("Failed to update shelter");
        }
        
        // Return updated shelter
        return $this->shelterModel->findById($id);
    }
    
    public function deleteShelter(int $id): bool {
        // Verify shelter exists
        $shelter = $this->shelterModel->findById($id);
        if (!$shelter) {
            throw new RuntimeException("Shelter not found");
        }
        
        return $this->shelterModel->delete($id);
    }
    
    public function getShelter(int $id): ?array {
        $shelter = $this->shelterModel->findById($id);
        if (!$shelter) {
            throw new RuntimeException("Shelter not found");
        }
        return $shelter;
    }
    
    public function listShelters(array $filters = []): array {
        return $this->shelterModel->findAll($filters);
    }
}
=== ./backend/src/services/UserRoleService.php ===
<?php
namespace PawPath\services;

use PawPath\config\database\DatabaseConfig;
use PawPath\models\User;
use RuntimeException;
use PDO;

class UserRoleService {
    private PDO $db;
    private User $userModel;
    
    private const VALID_ROLES = ['adopter', 'shelter_staff', 'admin'];
    private const ROLE_HIERARCHY = [
        'admin' => ['admin', 'shelter_staff', 'adopter'],
        'shelter_staff' => ['shelter_staff', 'adopter'],
        'adopter' => ['adopter']
    ];
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
        $this->userModel = new User();
    }
    
    public function changeUserRole(int $userId, string $newRole, int $changedBy, string $reason = null): bool {
        try {
            // Start transaction
            $this->db->beginTransaction();
            
            // Get user's current role
            $user = $this->userModel->findById($userId);
            if (!$user) {
                throw new RuntimeException('User not found');
            }
            
            // Get admin user making the change
            $admin = $this->userModel->findById($changedBy);
            if (!$admin) {
                throw new RuntimeException('Admin user not found');
            }
            
            // Validate role change permissions
            if (!$this->canChangeRole($admin['role'], $user['role'], $newRole)) {
                throw new RuntimeException('Insufficient permissions to change role');
            }
            
            // Update user's role
            $stmt = $this->db->prepare("
                UPDATE User 
                SET role = ? 
                WHERE user_id = ?
            ");
            
            $stmt->execute([$newRole, $userId]);
            
            // Log the role change
            $stmt = $this->db->prepare("
                INSERT INTO RoleChangeLog (
                    user_id, old_role, new_role, 
                    changed_by, reason
                ) VALUES (?, ?, ?, ?, ?)
            ");
            
            $stmt->execute([
                $userId,
                $user['role'],
                $newRole,
                $changedBy,
                $reason
            ]);
            
            // If changing to shelter staff, may need additional setup
            if ($newRole === 'shelter_staff') {
                // Handle shelter staff specific setup here
                // e.g., default shelter assignment
            }
            
            $this->db->commit();
            return true;
            
        } catch (\Exception $e) {
            $this->db->rollBack();
            throw $e;
        }
    }
    
    public function assignToShelter(int $userId, int $shelterId, string $position = 'staff'): bool {
        try {
            $this->db->beginTransaction();
            
            // Verify user is shelter_staff
            $user = $this->userModel->findById($userId);
            if ($user['role'] !== 'shelter_staff') {
                throw new RuntimeException('User must be shelter staff');
            }
            
            // Add shelter staff relationship
            $stmt = $this->db->prepare("
                INSERT INTO ShelterStaff (
                    shelter_id, user_id, position
                ) VALUES (?, ?, ?)
                ON DUPLICATE KEY UPDATE position = ?
            ");
            
            $stmt->execute([$shelterId, $userId, $position, $position]);
            
            $this->db->commit();
            return true;
            
        } catch (\Exception $e) {
            $this->db->rollBack();
            throw $e;
        }
    }
    
    public function getUsersByRole(string $role): array {
        $stmt = $this->db->prepare("
            SELECT user_id, username, email, registration_date, account_status
            FROM User 
            WHERE role = ?
            ORDER BY username
        ");
        
        $stmt->execute([$role]);
        return $stmt->fetchAll();
    }
    
    private function canChangeRole(string $adminRole, string $currentRole, string $newRole): bool {
        // Only admins can change roles
        if ($adminRole !== 'admin') {
            return false;
        }
        
        // Validate role exists
        if (!in_array($newRole, self::VALID_ROLES)) {
            return false;
        }
        
        // Special case: can't change own role or other admins
        if ($currentRole === 'admin') {
            return false;
        }
        
        return true;
    }
}
=== ./backend/src/services/AuthService.php ===
<?php
namespace PawPath\services;

use PDO;
use RuntimeException;
use Firebase\JWT\JWT;
use Firebase\JWT\Key;
use PawPath\config\database\DatabaseConfig;

class AuthService {
    private PDO $db;
    private string $jwtSecret;
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
        $this->jwtSecret = $_ENV['JWT_SECRET'] ?? throw new RuntimeException('JWT_SECRET not set');
    }
    
    public function register(array $data): array {
        try {
            // Validate required fields
            if (empty($data['username']) || empty($data['email']) || empty($data['password'])) {
                throw new RuntimeException('Missing required fields');
            }

            // Check if email already exists
            $stmt = $this->db->prepare("
                SELECT user_id FROM User WHERE email = ?
            ");
            $stmt->execute([$data['email']]);
            if ($stmt->fetch()) {
                throw new RuntimeException('Email already registered');
            }

            // Check if username already exists
            $stmt = $this->db->prepare("
                SELECT user_id FROM User WHERE username = ?
            ");
            $stmt->execute([$data['username']]);
            if ($stmt->fetch()) {
                throw new RuntimeException('Username already taken');
            }

            // Create user
            $stmt = $this->db->prepare("
                INSERT INTO User (
                    username, 
                    email, 
                    password_hash, 
                    registration_date,
                    role,
                    account_status,
                    email_verification_token,
                    email_token_expires_at
                ) VALUES (?, ?, ?, CURRENT_TIMESTAMP, 'adopter', 'pending', ?, DATE_ADD(NOW(), INTERVAL 24 HOUR))
            ");

            $verificationToken = bin2hex(random_bytes(32));
            $passwordHash = password_hash($data['password'], PASSWORD_DEFAULT);

            $stmt->execute([
                $data['username'],
                $data['email'],
                $passwordHash,
                $verificationToken
            ]);

            $userId = (int) $this->db->lastInsertId();

            // Get the created user
            $user = $this->getUser($userId);
            if (!$user) {
                throw new RuntimeException('Failed to create user');
            }

            // Generate JWT token
            $token = $this->generateToken($userId);

            // Return user data and token
            return [
                'user' => $user,
                'token' => $token
            ];

        } catch (\PDOException $e) {
            error_log("Database error during registration: " . $e->getMessage());
            throw new RuntimeException('Registration failed: Database error');
        } catch (\Exception $e) {
            error_log("Registration error: " . $e->getMessage());
            throw $e;
        }
    }

    public function login(array $data): array {
        try {
            if (empty($data['email']) || empty($data['password'])) {
                throw new RuntimeException('Email and password are required');
            }

            // Find user
            $stmt = $this->db->prepare("
                SELECT 
                    user_id, 
                    username, 
                    email, 
                    password_hash, 
                    role, 
                    account_status
                FROM User 
                WHERE email = ?
            ");
            
            $stmt->execute([$data['email']]);
            $user = $stmt->fetch(PDO::FETCH_ASSOC);
            
            if (!$user) {
                throw new RuntimeException('Invalid credentials');
            }

            if (!password_verify($data['password'], $user['password_hash'])) {
                throw new RuntimeException('Invalid credentials');
            }
            
            // Remove sensitive data
            unset($user['password_hash']);
            
            // Generate token
            $token = $this->generateToken($user['user_id']);
            
            // Update last login
            $this->updateLastLogin($user['user_id']);
            
            return [
                'token' => $token,
                'user' => $user
            ];
        } catch (\Exception $e) {
            error_log('Login error in service: ' . $e->getMessage());
            throw $e;
        }
    }
    
    public function getUser(int $userId): ?array {
        try {
            $stmt = $this->db->prepare("
                SELECT 
                    user_id,
                    username,
                    email,
                    role,
                    account_status,
                    registration_date,
                    last_login
                FROM User 
                WHERE user_id = ?
            ");
            
            $stmt->execute([$userId]);
            return $stmt->fetch(PDO::FETCH_ASSOC);
        } catch (\PDOException $e) {
            error_log("Database error while fetching user: " . $e->getMessage());
            throw new RuntimeException('Failed to fetch user data');
        }
    }

    public function createEmailVerificationToken(int $userId): string {
        try {
            $token = bin2hex(random_bytes(32));
            $stmt = $this->db->prepare("
                UPDATE User 
                SET email_verification_token = ?,
                    email_token_expires_at = DATE_ADD(NOW(), INTERVAL 24 HOUR)
                WHERE user_id = ?
            ");
            
            $stmt->execute([$token, $userId]);
            return $token;
        } catch (\Exception $e) {
            error_log("Error creating verification token: " . $e->getMessage());
            throw new RuntimeException('Failed to create verification token');
        }
    }

    public function verifyEmailToken(string $token): bool {
        try {
            $stmt = $this->db->prepare("
                UPDATE User 
                SET email_verified_at = CURRENT_TIMESTAMP,
                    account_status = 'active',
                    email_verification_token = NULL
                WHERE email_verification_token = ?
                AND email_token_expires_at > CURRENT_TIMESTAMP
                AND email_verified_at IS NULL
            ");
            
            $stmt->execute([$token]);
            return $stmt->rowCount() > 0;
        } catch (\PDOException $e) {
            error_log("Database error during email verification: " . $e->getMessage());
            throw new RuntimeException('Failed to verify email');
        }
    }

    public function generateToken(int $userId): string {
        $payload = [
            'user_id' => $userId,
            'iat' => time(),
            'exp' => time() + (24 * 60 * 60) // 24 hours
        ];
        
        return JWT::encode($payload, $this->jwtSecret, 'HS256');
    }
    
    public function validateToken(string $token): ?array {
        try {
            return (array) JWT::decode($token, new Key($this->jwtSecret, 'HS256'));
        } catch (\Exception $e) {
            error_log('Token validation error: ' . $e->getMessage());
            return null;
        }
    }

    public function resendVerificationEmail(int $userId): bool {
        try {
            // Check if user exists and needs verification
            $stmt = $this->db->prepare("
                SELECT email, username, email_verified_at 
                FROM User 
                WHERE user_id = ?
            ");
            $stmt->execute([$userId]);
            $user = $stmt->fetch(PDO::FETCH_ASSOC);

            if (!$user) {
                throw new RuntimeException('User not found');
            }

            if ($user['email_verified_at']) {
                throw new RuntimeException('Email already verified');
            }

            // Create new verification token
            $token = $this->createEmailVerificationToken($userId);

            // Send verification email
            $emailService = new EmailService();
            return $emailService->sendVerificationEmail(
                $user['email'],
                $user['username'],
                $token
            );
        } catch (\Exception $e) {
            error_log("Error resending verification email: " . $e->getMessage());
            throw $e;
        }
    }
    
    private function updateLastLogin(int $userId): void {
        try {
            $stmt = $this->db->prepare("
                UPDATE User 
                SET last_login = CURRENT_TIMESTAMP 
                WHERE user_id = ?
            ");
            $stmt->execute([$userId]);
        } catch (\PDOException $e) {
            error_log("Error updating last login: " . $e->getMessage());
            // Non-critical error, don't throw
        }
    }
}
=== ./backend/src/services/PetService.php ===
<?php
// backend/src/services/PetService.php

namespace PawPath\services;

use PawPath\models\Pet;
use PawPath\models\PetTrait;
use PawPath\models\Shelter;
use RuntimeException;
use PawPath\config\database\DatabaseConfig;

class PetService {
    private $db;
    private Pet $petModel;
    private PetTrait $traitModel;
    private Shelter $shelterModel;
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
        $this->petModel = new Pet();
        $this->traitModel = new PetTrait();
        $this->shelterModel = new Shelter();
    }
    
    public function createPet(array $data): array {
        try {
            error_log("Creating pet with data: " . json_encode($data));
            
            // Validate required fields
            $requiredFields = ['name', 'species', 'shelter_id'];
            foreach ($requiredFields as $field) {
                if (empty($data[$field])) {
                    throw new RuntimeException("Missing required field: $field");
                }
            }
            
            // Create pet
            $petId = $this->petModel->create($data);
            error_log("Created pet with ID: $petId");
            
            $pet = $this->petModel->findById($petId);
            if (!$pet) {
                throw new RuntimeException("Failed to retrieve created pet");
            }
            
            return $pet;
        } catch (\Exception $e) {
            error_log("Error in PetService::createPet: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function updatePet(int $id, array $data): array {
        // Verify pet exists
        $pet = $this->petModel->findById($id);
        if (!$pet) {
            throw new RuntimeException("Pet not found");
        }
        
        // Validate species if provided
        if (isset($data['species'])) {
            $validSpecies = ['Dog', 'Cat', 'Bird', 'Rabbit', 'Other'];
            if (!in_array($data['species'], $validSpecies)) {
                throw new RuntimeException("Invalid species");
            }
        }
        
        // Validate age if provided
        if (isset($data['age']) && ($data['age'] < 0 || $data['age'] > 30)) {
            throw new RuntimeException("Invalid age");
        }
        
        // Validate gender if provided
        if (isset($data['gender'])) {
            $validGenders = ['Male', 'Female'];
            if (!in_array($data['gender'], $validGenders)) {
                throw new RuntimeException("Invalid gender");
            }
        }
        
        // Validate shelter if provided
        if (isset($data['shelter_id'])) {
            if (!$this->shelterModel->findById($data['shelter_id'])) {
                throw new RuntimeException("Invalid shelter ID");
            }
        }
        
        // Validate traits if provided
        if (isset($data['traits'])) {
            foreach ($data['traits'] as $traitId) {
                if (!$this->traitModel->findById($traitId)) {
                    throw new RuntimeException("Invalid trait ID: $traitId");
                }
            }
        }
        
        // Update pet
        $this->petModel->update($id, $data);
        return $this->petModel->findById($id);
    }

    private function formatTraits(array $traits): array {
        $formatted = [];
        foreach ($traits as $trait) {
            $category = $trait['category'] ?? 'General';
            if (!isset($formatted[$category])) {
                $formatted[$category] = [];
            }
            if (!in_array($trait['trait_name'], $formatted[$category])) {
                $formatted[$category][] = $trait['trait_name'];
            }
        }
        return $formatted;
    }
    
    public function deletePet(int $id): bool {
        // Verify pet exists
        $pet = $this->petModel->findById($id);
        if (!$pet) {
            throw new RuntimeException("Pet not found");
        }
        
        // Check if pet has any pending adoption applications
        // This would be implemented when we add the adoption system
        
        return $this->petModel->delete($id);
    }
    
    public function getPet(int $id): array {
        $pet = $this->petModel->findById($id);
        if (!$pet) {
            throw new RuntimeException("Pet not found");
        }
        return $pet;
    }
    
    public function listPets(array $filters = []): array {
        try {
            // Debug logging
            error_log("PetService::listPets called with filters: " . print_r($filters, true));
            
            // Get total count without pagination
            $countQuery = "SELECT COUNT(DISTINCT p.pet_id) FROM Pet p";
            $whereConditions = [];
            $params = [];
            
            // Build basic query
            $query = "SELECT DISTINCT p.*, s.name as shelter_name 
                     FROM Pet p
                     LEFT JOIN Shelter s ON p.shelter_id = s.shelter_id";
            
            // Add search conditions if present
            if (!empty($filters['search'])) {
                $whereConditions[] = "(p.name LIKE ? OR p.breed LIKE ? OR p.description LIKE ?)";
                $searchTerm = '%' . $filters['search'] . '%';
                $params = array_merge($params, [$searchTerm, $searchTerm, $searchTerm]);
            }
            
            // Add species filter if present
            if (!empty($filters['species'])) {
                $whereConditions[] = "p.species = ?";
                $params[] = $filters['species'];
            }
            
            // Add WHERE clause if conditions exist
            if (!empty($whereConditions)) {
                $whereClause = " WHERE " . implode(" AND ", $whereConditions);
                $countQuery .= $whereClause;
                $query .= $whereClause;
            }
            
            // Add ORDER BY
            $query .= " ORDER BY p.pet_id DESC";
            
            // Add LIMIT and OFFSET
            $limit = (int)($filters['limit'] ?? 12);
            $offset = (int)($filters['offset'] ?? 0);
            $query .= " LIMIT ? OFFSET ?";
            
            // Clone params for count query
            $countParams = $params;
            
            // Add limit and offset to params for main query
            $params[] = $limit;
            $params[] = $offset;
            
            // Get total count
            $stmt = $this->db->prepare($countQuery);
            $stmt->execute($countParams);
            $total = (int)$stmt->fetchColumn();
            
            // Debug logging
            error_log("Query: " . $query);
            error_log("Params: " . print_r($params, true));
            
            // Get paginated results
            $stmt = $this->db->prepare($query);
            $stmt->execute($params);
            $pets = $stmt->fetchAll(\PDO::FETCH_ASSOC);
            
            // Fetch traits for each pet
            foreach ($pets as &$pet) {
                $traitQuery = "
                    SELECT t.trait_name, tc.name as category
                    FROM Pet_Trait_Relation ptr
                    JOIN Pet_Trait t ON ptr.trait_id = t.trait_id
                    LEFT JOIN Trait_Category tc ON t.category_id = tc.category_id
                    WHERE ptr.pet_id = ?
                ";
                
                $stmt = $this->db->prepare($traitQuery);
                $stmt->execute([$pet['pet_id']]);
                $traits = $stmt->fetchAll(\PDO::FETCH_ASSOC);
                
                $pet['traits'] = $this->formatTraits($traits);
            }
            
            // Debug logging
            error_log("Found " . count($pets) . " pets");
            
            return [
                'pets' => $pets,
                'total' => $total
            ];
            
        } catch (\Exception $e) {
            error_log("Error in PetService::listPets: " . $e->getMessage());
            error_log("Stack trace: " . $e->getTraceAsString());
            throw new \RuntimeException("Failed to fetch pets: " . $e->getMessage());
        }
    }
    
    public function addTrait(string $traitName): array {
        // Validate trait name
        if (empty(trim($traitName))) {
            throw new RuntimeException("Trait name cannot be empty");
        }
        
        $traitId = $this->traitModel->create($traitName);
        return $this->traitModel->findById($traitId);
    }
    
    public function listTraits(): array {
        return $this->traitModel->findAll();
    }
}
=== ./backend/src/services/EmailService.php ===
<?php
namespace PawPath\services;

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;
use PHPMailer\PHPMailer\SMTP;
use RuntimeException;

class EmailService {
    private ?PHPMailer $mailer = null;
    
    public function __construct() {
        // Defer mailer initialization until needed
    }
    
    private function initializeMailer(): void {
        if ($this->mailer !== null) {
            return;
        }

        try {
            $this->mailer = new PHPMailer(true);
            
            if (!empty($_ENV['MAIL_HOST'])) {
                $this->mailer->isSMTP();
                $this->mailer->Host = $_ENV['MAIL_HOST'];
                $this->mailer->SMTPAuth = true;
                $this->mailer->Username = $_ENV['MAIL_USERNAME'] ?? '';
                $this->mailer->Password = $_ENV['MAIL_PASSWORD'] ?? '';
                $this->mailer->SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS;
                $this->mailer->Port = $_ENV['MAIL_PORT'] ?? 587;
            } else {
                $this->mailer->isMail();
            }
            
            $this->mailer->setFrom(
                $_ENV['MAIL_FROM_ADDRESS'] ?? 'noreply@pawpath.com',
                $_ENV['MAIL_FROM_NAME'] ?? 'PawPath'
            );
            
            if ($_ENV['APP_ENV'] === 'development') {
                $this->mailer->SMTPDebug = SMTP::DEBUG_SERVER;
            }
        } catch (Exception $e) {
            error_log("Failed to initialize mailer: " . $e->getMessage());
            throw new RuntimeException("Email service configuration error");
        }
    }
    
    public function sendVerificationEmail(string $email, string $name, string $token): bool {
        try {
            $this->initializeMailer();
            
            $this->mailer->clearAddresses();
            $this->mailer->addAddress($email, $name);
            $this->mailer->isHTML(true);
            
            $verificationLink = $_ENV['APP_URL'] . "/verify-email?token=" . $token;
            
            $this->mailer->Subject = 'Verify your PawPath account';
            $this->mailer->Body = $this->getVerificationEmailTemplate($name, $verificationLink);
            $this->mailer->AltBody = strip_tags(str_replace('<br>', "\n", $this->mailer->Body));
            
            return $this->mailer->send();
        } catch (Exception $e) {
            error_log("Failed to send verification email: " . $e->getMessage());
            return false;
        }
    }

    public function sendPasswordResetEmail(string $email, string $name, string $token): bool {
        try {
            $this->initializeMailer();
            
            $this->mailer->clearAddresses();
            $this->mailer->addAddress($email, $name);
            $this->mailer->isHTML(true);
            
            $resetLink = $_ENV['APP_URL'] . "/reset-password?token=" . $token;
            
            $this->mailer->Subject = 'Reset Your PawPath Password';
            $this->mailer->Body = $this->getPasswordResetEmailTemplate($name, $resetLink);
            $this->mailer->AltBody = strip_tags(str_replace('<br>', "\n", $this->mailer->Body));
            
            return $this->mailer->send();
        } catch (Exception $e) {
            error_log("Failed to send password reset email: " . $e->getMessage());
            return false;
        }
    }

    public function sendWelcomeEmail(string $email, string $name): bool {
        try {
            $this->initializeMailer();
            
            $this->mailer->clearAddresses();
            $this->mailer->addAddress($email, $name);
            $this->mailer->isHTML(true);
            
            $this->mailer->Subject = 'Welcome to PawPath!';
            $this->mailer->Body = $this->getWelcomeEmailTemplate($name);
            $this->mailer->AltBody = strip_tags(str_replace('<br>', "\n", $this->mailer->Body));
            
            return $this->mailer->send();
        } catch (Exception $e) {
            error_log("Failed to send welcome email: " . $e->getMessage());
            return false;
        }
    }
    
    private function getVerificationEmailTemplate(string $name, string $link): string {
        return "
            <div style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;'>
                <h2>Welcome to PawPath!</h2>
                <p>Hi {$name},</p>
                <p>Thanks for signing up. Please verify your email address to complete your registration.</p>
                <p style='margin: 25px 0;'>
                    <a href='{$link}' 
                       style='background-color: #4F46E5; color: white; padding: 12px 24px; 
                              text-decoration: none; border-radius: 4px;'>
                        Verify Email Address
                    </a>
                </p>
                <p>If you did not create an account, no further action is required.</p>
                <p>Best regards,<br>The PawPath Team</p>
            </div>
        ";
    }
    
    private function getPasswordResetEmailTemplate(string $name, string $link): string {
        return "
            <div style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;'>
                <h2>Reset Your Password</h2>
                <p>Hi {$name},</p>
                <p>You recently requested to reset your password. Click the button below to proceed:</p>
                <p style='margin: 25px 0;'>
                    <a href='{$link}' 
                       style='background-color: #4F46E5; color: white; padding: 12px 24px; 
                              text-decoration: none; border-radius: 4px;'>
                        Reset Password
                    </a>
                </p>
                <p>If you did not request a password reset, please ignore this email.</p>
                <p>Best regards,<br>The PawPath Team</p>
            </div>
        ";
    }
    
    private function getWelcomeEmailTemplate(string $name): string {
        return "
            <div style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;'>
                <h2>Welcome to PawPath!</h2>
                <p>Hi {$name},</p>
                <p>We're excited to have you join our community of pet lovers!</p>
                <p>With PawPath, you can:</p>
                <ul>
                    <li>Find your perfect pet companion</li>
                    <li>Connect with local shelters</li>
                    <li>Access resources about pet care</li>
                    <li>Join our community of pet lovers</li>
                </ul>
                <p>Ready to get started?</p>
                <p style='margin: 25px 0;'>
                    <a href='{$_ENV['APP_URL']}/quiz' 
                       style='background-color: #4F46E5; color: white; padding: 12px 24px; 
                              text-decoration: none; border-radius: 4px;'>
                        Take Our Pet Match Quiz
                    </a>
                </p>
                <p>Best regards,<br>The PawPath Team</p>
            </div>
        ";
    }
}
=== ./backend/src/services/BlogService.php ===
<?php
// src/services/BlogService.php
namespace PawPath\services;

use PawPath\models\BlogPost;
use PawPath\models\User;
use RuntimeException;

class BlogService {
    private BlogPost $blogModel;
    private User $userModel;
    
    public function __construct() {
        $this->blogModel = new BlogPost();
        $this->userModel = new User();
    }
    
    public function createPost(array $data): array {
        // Validate required fields
        if (empty($data['title']) || empty($data['content'])) {
            throw new RuntimeException("Title and content are required");
        }
        
        // Verify author exists
        if (!$this->userModel->findById($data['author_id'])) {
            throw new RuntimeException("Invalid author");
        }
        
        // Create post
        $postId = $this->blogModel->create($data);
        return $this->blogModel->findById($postId);
    }
    
    public function getPost(int $id): array {
        $post = $this->blogModel->findById($id);
        if (!$post) {
            throw new RuntimeException("Post not found");
        }
        return $post;
    }
    
    public function listPosts(array $filters = []): array {
        return $this->blogModel->findAll($filters);
    }
    
    public function updatePost(int $id, array $data, int $userId): array {
        // Verify post exists and user is the author
        $post = $this->blogModel->findById($id);
        if (!$post) {
            throw new RuntimeException("Post not found");
        }
        
        if ($post['author_id'] !== $userId) {
            throw new RuntimeException("Unauthorized to update this post");
        }
        
        // Update post
        $this->blogModel->update($id, $data);
        return $this->blogModel->findById($id);
    }
    
    public function deletePost(int $id, int $userId): void {
        // Verify post exists and user is the author
        $post = $this->blogModel->findById($id);
        if (!$post) {
            throw new RuntimeException("Post not found");
        }
        
        if ($post['author_id'] !== $userId) {
            throw new RuntimeException("Unauthorized to delete this post");
        }
        
        // Delete post
        if (!$this->blogModel->delete($id)) {
            throw new RuntimeException("Failed to delete post");
        }
    }
}
=== ./backend/src/services/QuizService.php ===
<?php
// src/services/QuizService.php
namespace PawPath\services;

use PawPath\models\StartingQuiz;
use PawPath\models\QuizResult;
use PawPath\models\Pet;

class QuizService {
    private StartingQuiz $startingQuiz;
    private QuizResult $quizResult;
    private Pet $petModel;
    
    // Question weights for scoring
    private const QUESTION_WEIGHTS = [
        'living_space' => 2.0,    // High impact on pet suitability
        'activity_level' => 1.5,  // Important for energy matching
        'time_available' => 1.5,  // Critical for care requirements
        'experience' => 1.0,      // Influences training needs
        'children' => 1.8,        // Important for safety
        'other_pets' => 1.0,      // Affects compatibility
        'budget' => 1.3,          // Practical consideration
        'allergies' => 2.0,       // Critical health factor
        'noise_tolerance' => 1.2  // Environmental factor
    ];
    
    public function __construct() {
        $this->startingQuiz = new StartingQuiz();
        $this->quizResult = new QuizResult();
        $this->petModel = new Pet();
    }
    
    public function getQuizQuestions(): array {
        return [
            'sections' => [
                [
                    'id' => 'living_situation',
                    'title' => 'Living Situation',
                    'questions' => [
                        [
                            'id' => 'living_space',
                            'text' => 'What type of home do you live in?',
                            'type' => 'single_choice',
                            'options' => [
                                'apartment_small' => 'Small Apartment',
                                'apartment_large' => 'Large Apartment',
                                'house_small' => 'Small House',
                                'house_large' => 'Large House with Yard'
                            ],
                            'weight' => self::QUESTION_WEIGHTS['living_space']
                        ],
                        [
                            'id' => 'outdoor_access',
                            'text' => 'Do you have access to outdoor space?',
                            'type' => 'multiple_choice',
                            'options' => [
                                'private_yard' => 'Private Yard',
                                'shared_yard' => 'Shared Yard/Garden',
                                'nearby_park' => 'Nearby Park',
                                'no_outdoor' => 'Limited Outdoor Access'
                            ]
                        ],
                        [
                            'id' => 'rental_restrictions',
                            'text' => 'Do you have any pet restrictions where you live?',
                            'type' => 'multiple_choice',
                            'options' => [
                                'no_restrictions' => 'No Restrictions',
                                'size_limits' => 'Size/Weight Limits',
                                'breed_restrictions' => 'Breed Restrictions',
                                'no_dogs' => 'No Dogs Allowed',
                                'no_cats' => 'No Cats Allowed'
                            ]
                        ]
                    ]
                ],
                [
                    'id' => 'lifestyle',
                    'title' => 'Your Lifestyle',
                    'questions' => [
                        [
                            'id' => 'activity_level',
                            'text' => 'How would you describe your activity level?',
                            'type' => 'single_choice',
                            'options' => [
                                'very_active' => 'Very Active (Daily Exercise)',
                                'moderate' => 'Moderately Active',
                                'somewhat' => 'Somewhat Active',
                                'sedentary' => 'Mostly Sedentary'
                            ],
                            'weight' => self::QUESTION_WEIGHTS['activity_level']
                        ],
                        [
                            'id' => 'time_available',
                            'text' => 'How much time can you dedicate to pet care daily?',
                            'type' => 'single_choice',
                            'options' => [
                                'very_limited' => 'Less than 1 hour',
                                'limited' => '1-2 hours',
                                'moderate' => '2-4 hours',
                                'extensive' => '4+ hours'
                            ],
                            'weight' => self::QUESTION_WEIGHTS['time_available']
                        ],
                        [
                            'id' => 'work_schedule',
                            'text' => 'What best describes your work/daily schedule?',
                            'type' => 'single_choice',
                            'options' => [
                                'home_all_day' => 'Home Most of the Day',
                                'regular_hours' => 'Regular 9-5 Schedule',
                                'long_hours' => 'Long Hours Away',
                                'variable' => 'Variable/Unpredictable Schedule'
                            ]
                        ]
                    ]
                ],
                [
                    'id' => 'household',
                    'title' => 'Household Information',
                    'questions' => [
                        [
                            'id' => 'children',
                            'text' => 'Are there children in your household?',
                            'type' => 'multiple_choice',
                            'options' => [
                                'no_children' => 'No Children',
                                'young_children' => 'Young Children (0-6)',
                                'older_children' => 'Older Children (7-12)',
                                'teenagers' => 'Teenagers (13+)'
                            ],
                            'weight' => self::QUESTION_WEIGHTS['children']
                        ],
                        [
                            'id' => 'other_pets',
                            'text' => 'Do you have other pets?',
                            'type' => 'multiple_choice',
                            'options' => [
                                'no_pets' => 'No Other Pets',
                                'dogs' => 'Dogs',
                                'cats' => 'Cats',
                                'other_pets' => 'Other Pets'
                            ],
                            'weight' => self::QUESTION_WEIGHTS['other_pets']
                        ]
                    ]
                ],
                [
                    'id' => 'experience',
                    'title' => 'Pet Experience',
                    'questions' => [
                        [
                            'id' => 'pet_experience',
                            'text' => 'What is your experience with pets?',
                            'type' => 'single_choice',
                            'options' => [
                                'first_time' => 'First-time Pet Owner',
                                'some_experience' => 'Some Experience',
                                'experienced' => 'Experienced Pet Owner',
                                'professional' => 'Professional Experience'
                            ],
                            'weight' => self::QUESTION_WEIGHTS['experience']
                        ],
                        [
                            'id' => 'training_willingness',
                            'text' => 'Are you willing to attend training classes or work with a trainer?',
                            'type' => 'single_choice',
                            'options' => [
                                'definitely' => 'Definitely',
                                'maybe' => 'Maybe if Needed',
                                'prefer_not' => 'Prefer Not To',
                                'no' => 'Not Interested'
                            ]
                        ]
                    ]
                ],
                [
                    'id' => 'practical_considerations',
                    'title' => 'Practical Considerations',
                    'questions' => [
                        [
                            'id' => 'budget',
                            'text' => 'What is your monthly budget for pet care (including food, supplies, and routine vet care)?',
                            'type' => 'single_choice',
                            'options' => [
                                'limited' => 'Under $50',
                                'moderate' => '$50-$100',
                                'flexible' => '$100-$200',
                                'unlimited' => '$200+'
                            ],
                            'weight' => self::QUESTION_WEIGHTS['budget']
                        ],
                        [
                            'id' => 'grooming',
                            'text' => 'How much grooming are you willing to do?',
                            'type' => 'single_choice',
                            'options' => [
                                'minimal' => 'Minimal (Basic Care)',
                                'moderate' => 'Moderate (Weekly Grooming)',
                                'high' => 'High (Daily Grooming)',
                                'professional' => 'Will Use Professional Groomer'
                            ]
                        ],
                        [
                            'id' => 'allergies',
                            'text' => 'Does anyone in your household have pet allergies?',
                            'type' => 'multiple_choice',
                            'options' => [
                                'no_allergies' => 'No Allergies',
                                'cat_allergies' => 'Cat Allergies',
                                'dog_allergies' => 'Dog Allergies',
                                'other_allergies' => 'Other Animal Allergies'
                            ],
                            'weight' => self::QUESTION_WEIGHTS['allergies']
                        ]
                    ]
                ],
                [
                    'id' => 'preferences',
                    'title' => 'Pet Preferences',
                    'questions' => [
                        [
                            'id' => 'size_preference',
                            'text' => 'What size pet are you looking for?',
                            'type' => 'multiple_choice',
                            'options' => [
                                'small' => 'Small',
                                'medium' => 'Medium',
                                'large' => 'Large',
                                'no_preference' => 'No Preference'
                            ]
                        ],
                        [
                            'id' => 'noise_tolerance',
                            'text' => 'How much noise can you tolerate from a pet?',
                            'type' => 'single_choice',
                            'options' => [
                                'silent' => 'Prefer Silent Pets',
                                'some_noise' => 'Some Noise is OK',
                                'moderate' => 'Moderate Barking/Noise OK',
                                'any_noise' => 'Noise Doesn\'t Bother Me'
                            ],
                            'weight' => self::QUESTION_WEIGHTS['noise_tolerance']
                        ],
                        [
                            'id' => 'exercise_commitment',
                            'text' => 'How much exercise can you provide?',
                            'type' => 'single_choice',
                            'options' => [
                                'minimal' => 'Minimal (Short Walks)',
                                'moderate' => 'Moderate (Daily Walks)',
                                'active' => 'Active (Long Walks/Play)',
                                'very_active' => 'Very Active (Running/Hiking)'
                            ]
                        ]
                    ]
                ]
        ]
    ];
}
     
    public function processQuiz(int $userId, array $answers): array {
        try {
            // Create new quiz entry
            $quizId = $this->startingQuiz->create($userId);
            
            // Analyze answers and generate recommendations
            $analysis = $this->analyzeAnswers($answers);
            
            // Calculate confidence score
            $confidenceScore = $this->calculateConfidenceScore($answers);
            
            // Save results
            $resultData = [
                'quiz_id' => $quizId,
                'recommended_species' => $analysis['recommended_species'],
                'recommended_breed' => $analysis['recommended_breed'],
                'trait_preferences' => $analysis['trait_preferences'],
                'confidence_score' => $confidenceScore
            ];
            
            $resultId = $this->quizResult->create($resultData);
            
            // Find matching pets
            $matchingPets = $this->findMatchingPets($analysis);
            
            return [
                'quiz_id' => $quizId,
                'result_id' => $resultId,
                'recommendations' => $analysis,
                'confidence_score' => $confidenceScore,
                'matching_pets' => $matchingPets
            ];
        } catch (\Exception $e) {
            error_log("Error processing quiz: " . $e->getMessage());
            throw $e;
        }
    }
        
    private function analyzeAnswers(array $answers): array {
        $speciesScores = [
            'dog' => 0,
            'cat' => 0,
            'bird' => 0,
            'rabbit' => 0
        ];
        
        // Use associative array to prevent duplicates
        $traitPreferences = [];
        
        // Helper function to add trait
        $addTrait = function($trait, $value) use (&$traitPreferences) {
            $traitPreferences[$trait] = [
                'trait' => $trait,
                'value' => $value
            ];
        };
        
        // Process living situation
        if (isset($answers['living_situation'])) {
            if (isset($answers['living_situation']['living_space'])) {
                switch ($answers['living_situation']['living_space']) {
                    case 'house_large':
                        $speciesScores['dog'] += 2 * self::QUESTION_WEIGHTS['living_space'];
                        $addTrait('High Energy', 'binary');
                        $addTrait('Easily Trained', 'binary');
                        break;
                    case 'apartment_small':
                        $speciesScores['cat'] += 2 * self::QUESTION_WEIGHTS['living_space'];
                        $addTrait('Apartment Friendly', 'binary');
                        $addTrait('Calm', 'binary');
                        break;
                }
            }
        }
        
        // Process lifestyle
        if (isset($answers['lifestyle'])) {
            if (isset($answers['lifestyle']['activity_level'])) {
                switch ($answers['lifestyle']['activity_level']) {
                    case 'very_active':
                        $speciesScores['dog'] += 2 * self::QUESTION_WEIGHTS['activity_level'];
                        $addTrait('High Energy', 'binary');
                        break;
                    case 'moderate':
                        $addTrait('Easily Trained', 'binary');
                        break;
                    case 'sedentary':
                        $speciesScores['cat'] += 1.5;
                        $addTrait('Calm', 'binary');
                        break;
                }
            }
        }
        
        // Convert trait preferences back to array
        $traitPreferences = array_values($traitPreferences);
        
        // Normalize scores
        $maxScore = max($speciesScores);
        if ($maxScore > 0) {
            array_walk($speciesScores, function(&$score) use ($maxScore) {
                $score = round(($score / $maxScore) * 100, 2);
            });
        }
        
        return [
            'recommended_species' => array_search(max($speciesScores), $speciesScores),
            'recommended_breed' => null,
            'trait_preferences' => $traitPreferences,
            'species_scores' => $speciesScores
        ];
    }
    
    private function calculateConfidenceScore(array $answers): float {
        $answeredQuestions = 0;
        $totalQuestions = 0;
        
        foreach ($answers as $section) {
            if (is_array($section)) {
                foreach ($section as $value) {
                    $totalQuestions++;
                    if (!empty($value)) {
                        $answeredQuestions++;
                    }
                }
            }
        }
        
        return $totalQuestions > 0 ? 
            round(($answeredQuestions / $totalQuestions) * 100, 2) : 0;
    }
    
    private function findMatchingPets(array $analysis): array {
        $filters = [
            'species' => $analysis['recommended_species'],
            'breed' => $analysis['recommended_breed'] ?? null,
            'traits' => array_map(function($trait) {
                return [
                    'trait' => $trait['trait'],
                    'value' => $trait['value']
                ];
            }, $analysis['trait_preferences'])
        ];
        
        error_log("Finding matching pets with filters: " . json_encode($filters, JSON_PRETTY_PRINT));
        return $this->petModel->findAllWithTraits($filters);
    }
    
    private function getBreedRecommendation(string $species, array $traits, array $answers): ?string {
        // Implement breed recommendation logic based on species and traits
        // This would be expanded based on specific breed characteristics
        return null; // Placeholder
    }
    
    private function convertTraitPreferencesToFilters(array $preferences): array {
        $filters = [];
        foreach ($preferences as $trait => $value) {
            $filters[] = [
                'trait' => $trait,
                'value' => $value
            ];
        }
        return $filters;
    }
}
=== ./backend/tests/test_pet_matching.php ===
<?php
// backend/tests/test_pet_matching.php

require_once __DIR__ . '/../vendor/autoload.php';

use Dotenv\Dotenv;
use PawPath\models\Pet;

class TestHelper {
    private PDO $pdo;
    private Pet $petModel;
    
    public function __construct() {
        $dotenv = Dotenv::createImmutable(__DIR__ . '/..');
        $dotenv->load();
        
        $this->connectToDatabase();
        $this->petModel = new Pet();
    }
    
    private function connectToDatabase(): void {
        $dsn = sprintf(
            "mysql:host=%s;port=%s;dbname=%s;charset=utf8mb4",
            $_ENV['DB_HOST'],
            $_ENV['DB_PORT'] ?? '3306',
            $_ENV['DB_DATABASE']
        );
        
        $this->pdo = new PDO($dsn, $_ENV['DB_USERNAME'], $_ENV['DB_PASSWORD'], [
            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION
        ]);
        
        echo "Database connection successful\n";
    }
    
    public function cleanupTestData(): void {
        $this->pdo->exec("DELETE FROM Pet_Trait_Relation WHERE pet_id IN (SELECT pet_id FROM Pet WHERE shelter_id IN (SELECT shelter_id FROM Shelter WHERE email = 'test@shelter.com'))");
        $this->pdo->exec("DELETE FROM Pet WHERE shelter_id IN (SELECT shelter_id FROM Shelter WHERE email = 'test@shelter.com')");
        $this->pdo->exec("DELETE FROM Shelter WHERE email = 'test@shelter.com'");
        echo "Cleaned up existing test data\n";
    }
    
    public function createTestShelter(): int {
        $stmt = $this->pdo->prepare("
            INSERT INTO Shelter (name, address, phone, email, is_no_kill)
            VALUES ('Test Shelter', '123 Test St', '555-0123', 'test@shelter.com', 1)
        ");
        $stmt->execute();
        $shelterId = (int) $this->pdo->lastInsertId();
        echo "Created test shelter with ID: $shelterId\n\n";
        return $shelterId;
    }
    
    public function getAvailableTraits(): array {
        $stmt = $this->pdo->query("
            SELECT t.trait_id, t.trait_name, tc.name as category, t.value_type
            FROM Pet_Trait t
            JOIN Trait_Category tc ON t.category_id = tc.category_id
            ORDER BY tc.name, t.trait_name
        ");
        $traits = $stmt->fetchAll(PDO::FETCH_ASSOC);
        
        echo "Available traits by category:\n";
        $currentCategory = '';
        foreach ($traits as $trait) {
            if ($currentCategory !== $trait['category']) {
                $currentCategory = $trait['category'];
                echo "\n{$trait['category']}:\n";
            }
            echo "  - {$trait['trait_name']} (ID: {$trait['trait_id']}, Type: {$trait['value_type']})\n";
        }
        echo "\n";
        
        return $traits;
    }
    
    public function createTestPets(int $shelterId, array $traits): array {
        $highEnergyTrait = array_filter($traits, fn($t) => $t['trait_name'] === 'High Energy');
        $goodWithKidsTrait = array_filter($traits, fn($t) => $t['trait_name'] === 'Good with kids');
        $highEnergyTrait = reset($highEnergyTrait);
        $goodWithKidsTrait = reset($goodWithKidsTrait);
        
        if (!$highEnergyTrait || !$goodWithKidsTrait) {
            throw new Exception("Could not find required traits");
        }
        
        $testPets = [
            [
                'name' => 'Luna',
                'species' => 'dog',
                'breed' => 'Golden Retriever',
                'age' => 2,
                'gender' => 'female',
                'description' => 'Friendly and energetic Golden Retriever',
                'shelter_id' => $shelterId,
                'traits' => [$highEnergyTrait['trait_id'], $goodWithKidsTrait['trait_id']]
            ],
            [
                'name' => 'Max',
                'species' => 'dog',
                'breed' => 'German Shepherd',
                'age' => 3,
                'gender' => 'male',
                'description' => 'Intelligent and loyal German Shepherd',
                'shelter_id' => $shelterId,
                'traits' => [$goodWithKidsTrait['trait_id']]
            ]
        ];
        
        $petIds = [];
        foreach ($testPets as $petData) {
            try {
                $petIds[] = $this->petModel->create($petData);
                echo "Created {$petData['name']} successfully\n";
            } catch (Exception $e) {
                echo "Error creating {$petData['name']}: " . $e->getMessage() . "\n";
            }
        }
        
        return $petIds;
    }
        
    public function testTraitMatching(array $traits): void {
        echo "\nTesting trait matching functionality:\n";
        echo "────────────────────────────────\n";
        
        $filters = [
            'species' => 'dog',
            'traits' => [
                ['trait' => 'High Energy'],
                ['trait' => 'Good with kids']
            ]
        ];
        
        echo "Searching for dogs with traits: High Energy, Good with kids\n\n";
        
        $matchingPets = $this->petModel->findAllWithTraits($filters);
        echo "Found " . count($matchingPets) . " matching pets:\n\n";
        
        foreach ($matchingPets as $pet) {
            echo "╔══════════════════════════════════\n";
            echo "║ {$pet['name']} ({$pet['breed']})\n";
            echo "║ Matching traits: {$pet['matching_trait_count']}\n";
            echo "║ Traits by category:\n";
            
            if (!empty($pet['traits'])) {
                foreach ($pet['traits'] as $category => $traits) {
                    echo "║   • {$category}: " . implode(', ', $traits) . "\n";
                }
            } else {
                echo "║   No traits assigned\n";
            }
            
            echo "╚══════════════════════════════════\n\n";
        }
    }

    public function cleanup(array $petIds, int $shelterId): void {
        echo "\nCleaning up test data...\n";
        foreach ($petIds as $petId) {
            $this->petModel->delete($petId);
            echo "Deleted pet ID: $petId\n";
        }
        
        $stmt = $this->pdo->prepare("DELETE FROM Shelter WHERE shelter_id = ?");
        $stmt->execute([$shelterId]);
        echo "Deleted test shelter\n";
    }
}

// Run the tests
try {
    $tester = new TestHelper();
    
    // Setup
    $tester->cleanupTestData();
    $shelterId = $tester->createTestShelter();
    $traits = $tester->getAvailableTraits();
    
    // Create test pets
    $petIds = $tester->createTestPets($shelterId, $traits);
    
    // Test trait matching
    $tester->testTraitMatching($traits);
    
    // Cleanup
    $tester->cleanup($petIds, $shelterId);
    
} catch (Exception $e) {
    echo "Error: " . $e->getMessage() . "\n";
    exit(1);
}
=== ./backend/tests/setup_traits.php ===
<?php
// backend/tests/setup_traits.php

require_once __DIR__ . '/../vendor/autoload.php';

use Dotenv\Dotenv;

// Update the path to look in the backend directory
$dotenv = Dotenv::createImmutable(__DIR__ . '/..');
$dotenv->load();

// Add debug output
echo "Environment variables loaded:\n";
echo "DB_HOST: " . $_ENV['DB_HOST'] . "\n";
echo "DB_DATABASE: " . $_ENV['DB_DATABASE'] . "\n";
echo "DB_USERNAME: " . $_ENV['DB_USERNAME'] . "\n";
echo "DB_PASSWORD is set: " . (isset($_ENV['DB_PASSWORD']) ? "Yes" : "No") . "\n";

try {
    $dsn = "mysql:host=" . $_ENV['DB_HOST'] . ";port=" . ($_ENV['DB_PORT'] ?? "3306") . ";dbname=" . $_ENV['DB_DATABASE'] . ";charset=utf8mb4";
    echo "Attempting to connect with DSN: $dsn\n";
    
    $pdo = new PDO($dsn, $_ENV['DB_USERNAME'], $_ENV['DB_PASSWORD'], [
        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION
    ]);
    
    echo "Database connection successful!\n\n";

    // First, create categories if they don't exist
    $categories = [
        ['name' => 'energy_level', 'description' => 'Activity and exercise needs'],
        ['name' => 'social', 'description' => 'Social characteristics'],
        ['name' => 'training', 'description' => 'Training characteristics']
    ];

    foreach ($categories as $category) {
        $stmt = $pdo->prepare("
            INSERT IGNORE INTO Trait_Category (name, description)
            VALUES (?, ?)
        ");
        $stmt->execute([$category['name'], $category['description']]);
        echo "Processed category: {$category['name']}\n";
    }

    // Then create basic traits if they don't exist
    $traits = [
        ['name' => 'High Energy', 'category' => 'energy_level', 'type' => 'binary'],
        ['name' => 'Good with Kids', 'category' => 'social', 'type' => 'scale'],
        ['name' => 'Easily Trained', 'category' => 'training', 'type' => 'binary']
    ];

    foreach ($traits as $trait) {
        // Get category ID
        $stmt = $pdo->prepare("SELECT category_id FROM Trait_Category WHERE name = ?");
        $stmt->execute([$trait['category']]);
        $categoryId = $stmt->fetchColumn();
        
        if ($categoryId) {
            $stmt = $pdo->prepare("
                INSERT IGNORE INTO Pet_Trait (trait_name, category_id, value_type)
                VALUES (?, ?, ?)
            ");
            $stmt->execute([$trait['name'], $categoryId, $trait['type']]);
            echo "Processed trait: {$trait['name']}\n";
        } else {
            echo "Warning: Category {$trait['category']} not found for trait {$trait['name']}\n";
        }
    }

    echo "\nTrait setup complete!\n";
    
} catch (Exception $e) {
    echo "Error: " . $e->getMessage() . "\n";
    exit(1);
}
=== ./backend/tests/test_email.php ===
<?php
require_once __DIR__ . '/../vendor/autoload.php';

use Dotenv\Dotenv;
use PawPath\services\EmailService;

// Load environment variables
$dotenv = Dotenv::createImmutable(__DIR__ . '/..');
$dotenv->load();

class EmailTester {
    private EmailService $emailService;
    
    public function __construct() {
        $this->emailService = new EmailService();
    }
    
    public function testVerificationEmail(): void {
        echo "Testing Verification Email...\n";
        
        $result = $this->emailService->sendVerificationEmail(
            'test@example.com',
            'Test User',
            'test-token-123'
        );
        
        $this->printResult('Verification Email', $result);
    }
    
    public function testPasswordResetEmail(): void {
        echo "\nTesting Password Reset Email...\n";
        
        $result = $this->emailService->sendPasswordResetEmail(
            'test@example.com',
            'Test User',
            'reset-token-123'
        );
        
        $this->printResult('Password Reset Email', $result);
    }
    
    public function testWelcomeEmail(): void {
        echo "\nTesting Welcome Email...\n";
        
        $result = $this->emailService->sendWelcomeEmail(
            'test@example.com',
            'Test User'
        );
        
        $this->printResult('Welcome Email', $result);
    }
    
    private function printResult(string $test, bool $result): void {
        if ($result) {
            echo "\033[32m✓ {$test} sent successfully\033[0m\n";
        } else {
            echo "\033[31m✗ {$test} failed to send\033[0m\n";
        }
    }
}

// Run tests
try {
    $tester = new EmailTester();
    $tester->testVerificationEmail();
    $tester->testPasswordResetEmail();
    $tester->testWelcomeEmail();
} catch (Exception $e) {
    echo "\033[31mError: " . $e->getMessage() . "\033[0m\n";
}
=== ./backend/tests/test_pets.php ===
<?php
// backend/tests/test_pets.php

require __DIR__ . '/../vendor/autoload.php';

// Load environment variables
$dotenv = Dotenv\Dotenv::createImmutable(__DIR__ . '/..');
$dotenv->load();

use PawPath\models\Pet;
use PawPath\models\PetTrait;

// Create instances
$petModel = new Pet();
$traitModel = new PetTrait();

// Get existing traits or create new ones
try {
    $traits = $traitModel->findAll();
    if (empty($traits)) {
        echo "Testing Pet Trait Model...\n";
        
        // Create some traits
        $friendlyId = $traitModel->create("Friendly");
        echo "Created trait 'Friendly' with ID: $friendlyId\n";
        
        $gentleId = $traitModel->create("Gentle");
        echo "Created trait 'Gentle' with ID: $gentleId\n";
        
        // List all traits
        $traits = $traitModel->findAll();
        echo "All traits:\n";
        print_r($traits);
    } else {
        $friendlyId = $traits[0]['trait_id'];
        $gentleId = $traits[1]['trait_id'];
    }
    
    echo "\nTesting Pet Model...\n";
    
    // Create a pet - Use the shelter_id from your actual shelter
    $shelter_id = 3; // Replace with your actual shelter ID from the GET shelters request
    
    try {
        $shelterModel = new \PawPath\models\Shelter();
        $shelter = $shelterModel->findById($shelter_id);
        if (!$shelter) {
            throw new \RuntimeException("Shelter with ID $shelter_id not found");
        }
    } catch (Exception $e) {
        echo "Error checking shelter: " . $e->getMessage() . "\n";
        exit(1);
    }

    echo "Using shelter: " . $shelter['name'] . "\n";

    $petData = [
        'name' => 'Max',
        'species' => 'dog',
        'breed' => 'Golden Retriever',
        'age' => 3,
        'gender' => 'Male',
        'description' => 'A very good boy',
        'shelter_id' => $shelter_id,
        'traits' => [$friendlyId, $gentleId]
    ];
    
    echo "Creating pet with shelter_id: $shelter_id\n";
    $petId = $petModel->create($petData);
    echo "Created pet with ID: $petId\n";
    
    // Retrieve the pet
    $pet = $petModel->findById($petId);
    echo "Retrieved pet:\n";
    print_r($pet);
    
    // Update the pet
    $updateData = [
        'age' => 4,
        'description' => 'A very good and friendly boy'
    ];
    $petModel->update($petId, $updateData);
    
    // Retrieve updated pet
    $updatedPet = $petModel->findById($petId);
    echo "\nUpdated pet:\n";
    print_r($updatedPet);
    
    // Test search functionality
    $searchResults = $petModel->findAll(['species' => 'dog']);
    echo "\nSearch results for dogs:\n";
    print_r($searchResults);
    
} catch (Exception $e) {
    echo "Error: " . $e->getMessage() . "\n";
    echo "Stack trace:\n" . $e->getTraceAsString() . "\n";
}
=== ./backend/tests/test_quiz_controller.php ===
<?php
require_once __DIR__ . '/../vendor/autoload.php';

use Dotenv\Dotenv;
use PawPath\models\Pet;
use PawPath\api\QuizController;
use PawPath\models\StartingQuiz;
use PawPath\models\QuizResult;

class TestQuizHelper {
    private PDO $pdo;
    private $userId = 1; // We'll use this as our test user ID
    
    public function __construct() {
        $dotenv = Dotenv::createImmutable(__DIR__ . '/..');
        $dotenv->load();
        
        $this->connectToDatabase();
    }
    
    private function connectToDatabase(): void {
        $dsn = sprintf(
            "mysql:host=%s;port=%s;dbname=%s;charset=utf8mb4",
            $_ENV['DB_HOST'],
            $_ENV['DB_PORT'] ?? '3306',
            $_ENV['DB_DATABASE']
        );
        
        $this->pdo = new PDO($dsn, $_ENV['DB_USERNAME'], $_ENV['DB_PASSWORD'], [
            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION
        ]);
        
        echo "Database connection successful\n";
    }
    
    public function cleanupTestData(): void {
        // Delete test pets and relations first
        $this->pdo->exec("
            DELETE ptr FROM Pet_Trait_Relation ptr
            INNER JOIN Pet p ON ptr.pet_id = p.pet_id
            INNER JOIN Shelter s ON p.shelter_id = s.shelter_id
            WHERE s.email = 'test@shelter.com'
        ");
        
        $this->pdo->exec("
            DELETE p FROM Pet p
            INNER JOIN Shelter s ON p.shelter_id = s.shelter_id
            WHERE s.email = 'test@shelter.com'
        ");
        
        // Delete test shelter
        $this->pdo->exec("DELETE FROM Shelter WHERE email = 'test@shelter.com'");
        
        // Clean up quiz data
        $this->pdo->exec("
            DELETE qr FROM Quiz_Result qr
            INNER JOIN Starting_Quiz sq ON qr.quiz_id = sq.quiz_id
            WHERE sq.user_id = 1
        ");
        $this->pdo->exec("DELETE FROM Starting_Quiz WHERE user_id = 1");
        
        echo "Cleaned up existing test data\n";
    }
    
    public function setupTestData(): array {
        // Create test shelter
        $stmt = $this->pdo->prepare("
            INSERT INTO Shelter (name, address, phone, email, is_no_kill)
            VALUES ('Test Shelter', '123 Test St', '555-0123', 'test@shelter.com', 1)
        ");
        $stmt->execute();
        $shelterId = $this->pdo->lastInsertId();
        
        echo "Created test shelter with ID: $shelterId\n";
        
        // Create test pets with traits
        $pets = [
            [
                'name' => 'Luna',
                'species' => 'dog',
                'breed' => 'Golden Retriever',
                'age' => 2,
                'gender' => 'female',
                'description' => 'Energetic and friendly Golden',
                'traits' => ['High Energy', 'Good with kids', 'Easily Trained']
            ],
            [
                'name' => 'Max',
                'species' => 'dog',
                'breed' => 'German Shepherd',
                'age' => 3,
                'gender' => 'male',
                'description' => 'Intelligent and active shepherd',
                'traits' => ['High Energy', 'Easily Trained']
            ]
        ];
        
        foreach ($pets as $petData) {
            // Insert pet
            $stmt = $this->pdo->prepare("
                INSERT INTO Pet (name, species, breed, age, gender, description, shelter_id)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ");
            
            $stmt->execute([
                $petData['name'],
                $petData['species'],
                $petData['breed'],
                $petData['age'],
                $petData['gender'],
                $petData['description'],
                $shelterId
            ]);
            
            $petId = $this->pdo->lastInsertId();
            echo "Created test pet {$petData['name']} with ID: $petId\n";
            
            // Add traits
            foreach ($petData['traits'] as $traitName) {
                // Get trait ID
                $stmt = $this->pdo->prepare("
                    SELECT trait_id FROM Pet_Trait WHERE trait_name = ?
                ");
                $stmt->execute([$traitName]);
                $traitId = $stmt->fetchColumn();
                
                if ($traitId) {
                    // Add trait relation
                    $stmt = $this->pdo->prepare("
                        INSERT INTO Pet_Trait_Relation (pet_id, trait_id)
                        VALUES (?, ?)
                    ");
                    $stmt->execute([$petId, $traitId]);
                    echo "Added trait '$traitName' to pet {$petData['name']}\n";
                } else {
                    echo "Warning: Trait '$traitName' not found in database\n";
                }
            }
        }
        
        return ['shelter_id' => $shelterId];
    }

    private function createTestRequest(array $data = [], array $attributes = []): \Slim\Psr7\Request {
        $request = new \Slim\Psr7\Request(
            'POST',
            new \Slim\Psr7\Uri('http', 'localhost', 80, '/api/quiz/submit'),
            new \Slim\Psr7\Headers(['Content-Type' => 'application/json']),
            [],
            [],
            new \Slim\Psr7\Stream(fopen('php://temp', 'r+')),
            []
        );
        
        // Add body data
        if (!empty($data)) {
            $body = json_encode($data);
            if ($body === false) {
                throw new \RuntimeException("Failed to encode request data: " . json_last_error_msg());
            }
            
            $stream = fopen('php://temp', 'r+');
            if ($stream === false) {
                throw new \RuntimeException("Failed to open stream");
            }
            
            fwrite($stream, $body);
            rewind($stream);
            
            $request = $request->withBody(new \Slim\Psr7\Stream($stream));
        }
        
        // Add attributes (like user_id)
        foreach ($attributes as $key => $value) {
            $request = $request->withAttribute($key, $value);
        }
        
        return $request;
    }
    
    private function createTestResponse(): \Slim\Psr7\Response {
        return new \Slim\Psr7\Response();
    }
    
    public function runTests(): void {
        echo "\nRunning Quiz Controller Tests\n";
        echo "═══════════════════════════\n\n";
        
        $this->testStartQuiz();
        $this->testSubmitQuiz();
        $this->testQuizHistory();
        $this->testSpecificQuizResult();
    }
    
    private function testStartQuiz(): void {
        echo "Test 1: Starting a New Quiz\n";
        echo "──────────────────────────\n";
        
        try {
            $controller = new QuizController();
            $response = $controller->startQuiz(
                $this->createTestRequest(),
                $this->createTestResponse()
            );
            
            $result = json_decode((string)$response->getBody(), true);
            
            if ($result['success']) {
                echo "✓ Successfully retrieved quiz questions\n";
                echo "✓ Found " . $result['data']['total_sections'] . " question sections\n";
                foreach ($result['data']['questions']['sections'] as $section) {
                    echo "  • {$section['title']}: " . count($section['questions']) . " questions\n";
                }
            } else {
                echo "✗ Failed to start quiz\n";
            }
        } catch (Exception $e) {
            echo "✗ Error: " . $e->getMessage() . "\n";
        }
        echo "\n";
    }
    
    private function testSubmitQuiz(): void {
        echo "Test 2: Submitting Quiz Answers\n";
        echo "───────────────────────────────\n";
        
        try {
            $controller = new QuizController();
            
            $answers = [
                'answers' => [
                    'living_situation' => [
                        'living_space' => 'house_large',
                        'outdoor_access' => ['private_yard'],
                        'rental_restrictions' => ['no_restrictions']
                    ],
                    'lifestyle' => [
                        'activity_level' => 'very_active',
                        'time_available' => 'extensive',
                        'work_schedule' => 'regular_hours'
                    ],
                    'household' => [
                        'children' => ['no_children'],
                        'other_pets' => ['no_pets']
                    ],
                    'experience' => [
                        'pet_experience' => 'experienced',
                        'training_willingness' => 'definitely'
                    ],
                    'practical_considerations' => [
                        'budget' => 'flexible',
                        'grooming' => 'high',
                        'allergies' => ['no_allergies']
                    ],
                    'preferences' => [
                        'size_preference' => ['medium'],
                        'noise_tolerance' => 'moderate',
                        'exercise_commitment' => 'active'
                    ]
                ]
            ];
            
            echo "Submitting answers: " . json_encode($answers, JSON_PRETTY_PRINT) . "\n";
            
            $response = $controller->submitQuiz(
                $this->createTestRequest($answers, ['user_id' => $this->userId]),
                $this->createTestResponse()
            );
            
            $result = json_decode((string)$response->getBody(), true);
            
            if ($result['success']) {
                echo "✓ Successfully submitted quiz answers\n";
                echo "✓ Received recommendations:\n";
                echo "  • Recommended species: " . $result['data']['recommendations']['species'] . "\n";
                if (!empty($result['data']['recommendations']['breed'])) {
                    echo "  • Recommended breed: " . $result['data']['recommendations']['breed'] . "\n";
                }
                echo "  • Confidence score: " . $result['data']['confidence_score'] . "%\n";
                echo "  • Found " . count($result['data']['matching_pets']) . " matching pets\n";
                
                if (!empty($result['data']['matching_pets'])) {
                    echo "\nMatching pets:\n";
                    foreach ($result['data']['matching_pets'] as $pet) {
                        echo "  • {$pet['name']} ({$pet['breed']})\n";
                        if (!empty($pet['traits'])) {
                            echo "    Traits:\n";
                            foreach ($pet['traits'] as $category => $traits) {
                                echo "      - $category: " . implode(', ', $traits) . "\n";
                            }
                        }
                    }
                }
                
                $this->lastQuizId = $result['data']['quiz_id'];
            } else {
                echo "✗ Failed to submit quiz\n";
                echo "Error: " . ($result['message'] ?? 'Unknown error') . "\n";
            }
        } catch (Exception $e) {
            echo "✗ Error: " . $e->getMessage() . "\n";
            echo "Stack trace:\n" . $e->getTraceAsString() . "\n";
        }
        echo "\n";
    }
    
    private function testQuizHistory(): void {
        echo "Test 3: Retrieving Quiz History\n";
        echo "───────────────────────────────\n";
        
        try {
            $controller = new QuizController();
            $response = $controller->getQuizHistory(
                $this->createTestRequest([], ['user_id' => $this->userId]),
                $this->createTestResponse()
            );
            
            $result = json_decode((string)$response->getBody(), true);
            
            if ($result['success']) {
                echo "✓ Successfully retrieved quiz history\n";
                echo "✓ Found " . $result['data']['total_quizzes'] . " previous quizzes\n";
                foreach ($result['data']['history'] as $quiz) {
                    echo "  • Quiz {$quiz['quiz_id']} taken on {$quiz['date_taken']}\n";
                    echo "    Recommended: {$quiz['recommendations']['species']}\n";
                }
            } else {
                echo "✗ Failed to retrieve quiz history\n";
            }
        } catch (Exception $e) {
            echo "✗ Error: " . $e->getMessage() . "\n";
        }
        echo "\n";
    }
    
    private function testSpecificQuizResult(): void {
        echo "Test 4: Retrieving Specific Quiz Result\n";
        echo "────────────────────────────────────────\n";
        
        if (!isset($this->lastQuizId)) {
            echo "✗ No quiz ID available for testing\n\n";
            return;
        }
        
        try {
            $controller = new QuizController();
            $response = $controller->getQuizResult(
                $this->createTestRequest([], ['user_id' => $this->userId]),
                $this->createTestResponse(),
                ['id' => $this->lastQuizId]
            );
            
            $result = json_decode((string)$response->getBody(), true);
            
            if ($result['success']) {
                echo "✓ Successfully retrieved quiz result\n";
                echo "✓ Quiz details:\n";
                echo "  • Date taken: " . $result['data']['date_taken'] . "\n";
                echo "  • Recommended species: " . $result['data']['recommendations']['species'] . "\n";
                if (!empty($result['data']['recommendations']['breed'])) {
                    echo "  • Recommended breed: " . $result['data']['recommendations']['breed'] . "\n";
                }
                echo "  • Trait preferences: " . count($result['data']['recommendations']['traits']) . " traits\n";
            } else {
                echo "✗ Failed to retrieve quiz result\n";
            }
        } catch (Exception $e) {
            echo "✗ Error: " . $e->getMessage() . "\n";
        }
        echo "\n";
    }
}

// Run the tests
try {
    $tester = new TestQuizHelper();
    
    // Clean up any existing test data
    $tester->cleanupTestData();
    
    // Setup test data
    $testData = $tester->setupTestData();
    
    // Run all tests
    $tester->runTests();
    
} catch (Exception $e) {
    echo "Error: " . $e->getMessage() . "\n";
    exit(1);
}
=== ./backend/tests/test_user_system.sh ===
#!/bin/bash

# Store the base URL
BASE_URL="http://localhost:8000/api"
TOKEN=""

# Colors for output
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

# Test registration with new fields
echo "Testing registration..."
REGISTER_RESPONSE=$(curl -s -X POST "${BASE_URL}/auth/register" \
  -H "Content-Type: application/json" \
  -d '{
    "username": "testuser_'$(date +%s)'",
    "email": "test_'$(date +%s)'@example.com",
    "password": "Password123!"
  }')

echo $REGISTER_RESPONSE | jq .

# Extract token from registration response
TOKEN=$(echo $REGISTER_RESPONSE | jq -r '.data.token')

# Test profile creation
echo -e "\nTesting profile creation..."
PROFILE_RESPONSE=$(curl -s -X PUT "${BASE_URL}/profile" \
  -H "Content-Type: application/json" \
  -H "Authorization: Bearer ${TOKEN}" \
  -d '{
    "first_name": "Test",
    "last_name": "User",
    "phone": "1234567890",
    "housing_type": "house",
    "has_yard": true,
    "household_members": 2
  }')

echo $PROFILE_RESPONSE | jq .

# Test profile retrieval
echo -e "\nTesting profile retrieval..."
curl -s -X GET "${BASE_URL}/profile" \
  -H "Authorization: Bearer ${TOKEN}" | jq .

# Test email verification resend
echo -e "\nTesting verification email resend..."
curl -s -X POST "${BASE_URL}/auth/resend-verification" \
  -H "Authorization: Bearer ${TOKEN}" | jq .
=== ./backend/tests/test_pet_service.php ===
<?php
// backend/tests/test_pet_service.php

require __DIR__ . '/../vendor/autoload.php';

// Load environment variables
$dotenv = Dotenv\Dotenv::createImmutable(__DIR__ . '/..');
$dotenv->load();

use PawPath\services\PetService;

$petService = new PetService();

function printSection($title) {
    echo "\n" . str_repeat("=", 50) . "\n";
    echo $title . "\n";
    echo str_repeat("=", 50) . "\n";
}

try {
    // Test trait management
    printSection("Testing Trait Management");
    
    echo "Adding new traits...\n";
    $playful = $petService->addTrait("Playful");
    echo "Added trait: ";
    print_r($playful);
    
    $quiet = $petService->addTrait("Quiet");
    echo "Added trait: ";
    print_r($quiet);
    
    echo "\nListing all traits:\n";
    $allTraits = $petService->listTraits();
    print_r($allTraits);
    
    // Test pet creation
    printSection("Testing Pet Creation");
    
    // Test validation - should fail
    echo "\nTesting validation with missing required fields...\n";
    try {
        $petService->createPet([
            'name' => 'Buddy'
            // Missing required fields
        ]);
    } catch (RuntimeException $e) {
        echo "Caught expected error: " . $e->getMessage() . "\n";
    }
    
    // Create valid pet
    echo "\nCreating valid pet...\n";
    $petData = [
        'name' => 'Buddy',
        'species' => 'Dog',
        'breed' => 'Labrador',
        'age' => 2,
        'gender' => 'Male',
        'description' => 'A friendly lab who loves to play',
        'shelter_id' => 3, // Use your actual shelter ID
        'traits' => [$playful['trait_id'], $quiet['trait_id']]
    ];
    
    $newPet = $petService->createPet($petData);
    echo "Created new pet:\n";
    print_r($newPet);
    
    // Test pet retrieval
    printSection("Testing Pet Retrieval");
    
    $retrievedPet = $petService->getPet($newPet['pet_id']);
    echo "Retrieved pet:\n";
    print_r($retrievedPet);
    
    // Test pet update
    printSection("Testing Pet Update");
    
    $updateData = [
        'age' => 3,
        'description' => 'A friendly lab who loves to play and is great with kids'
    ];
    
    $updatedPet = $petService->updatePet($newPet['pet_id'], $updateData);
    echo "Updated pet:\n";
    print_r($updatedPet);
    
    // Test invalid update
    echo "\nTesting invalid update (invalid age)...\n";
    try {
        $petService->updatePet($newPet['pet_id'], ['age' => -1]);
    } catch (RuntimeException $e) {
        echo "Caught expected error: " . $e->getMessage() . "\n";
    }
    
    // Test pet listing with filters
    printSection("Testing Pet Listing with Filters");
    
    echo "\nListing all dogs:\n";
    $dogs = $petService->listPets(['species' => 'Dog']);
    print_r($dogs);
    
    echo "\nTesting invalid species filter...\n";
    try {
        $petService->listPets(['species' => 'Dragon']);
    } catch (RuntimeException $e) {
        echo "Caught expected error: " . $e->getMessage() . "\n";
    }
    
    // Test deletion (optional)
    /*
    printSection("Testing Pet Deletion");
    
    $deleted = $petService->deletePet($newPet['pet_id']);
    echo "Pet deleted: " . ($deleted ? "true" : "false") . "\n";
    
    // Verify deletion
    try {
        $petService->getPet($newPet['pet_id']);
    } catch (RuntimeException $e) {
        echo "Caught expected error: " . $e->getMessage() . "\n";
    }
    */
    
} catch (Exception $e) {
    echo "\nUnexpected error occurred: " . $e->getMessage() . "\n";
    echo "Stack trace:\n" . $e->getTraceAsString() . "\n";
}
=== ./backend/public/index.php ===
<?php
// backend/public/index.php

error_reporting(E_ALL);
ini_set('display_errors', 1);

use Slim\Factory\AppFactory;
use DI\Container;
use PawPath\api\AuthController;
use PawPath\api\ShelterController;
use PawPath\api\PetController;
use PawPath\api\QuizController;
use PawPath\api\AdoptionController;
use PawPath\api\AdminController;
use PawPath\middleware\AuthMiddleware;
use PawPath\middleware\RoleMiddleware;
use PawPath\api\BlogController;
use PawPath\api\ProductController;
use PawPath\api\UserProfileController;

require __DIR__ . '/../vendor/autoload.php';

// Create Container
$container = new Container();
AppFactory::setContainer($container);

// Create App
$app = AppFactory::create();

// Add body parsing middleware
$app->addBodyParsingMiddleware();

// Add error middleware
$app->addErrorMiddleware(true, true, true);

// Public routes
$app->post('/api/auth/register', function ($request, $response) {
    $controller = new AuthController();
    return $controller->register($request, $response);
});

$app->post('/api/auth/login', function ($request, $response) {
    $controller = new AuthController();
    return $controller->login($request, $response);
});

// Email verification routes
$app->post('/api/auth/verify-email', function ($request, $response) {
    $controller = new AuthController();
    return $controller->verifyEmail($request, $response);
});

$app->post('/api/auth/resend-verification', function ($request, $response) {
    $controller = new AuthController();
    return $controller->resendVerification($request, $response);
})->add(new AuthMiddleware());

// Protected routes group
$app->group('/api', function ($group) {

    $group->get('/auth/me', function ($request, $response) {
        $controller = new AuthController();
        return $controller->getCurrentUser($request, $response);
    });

    // User Profile routes
    $group->get('/profile', function ($request, $response) {
        $controller = new UserProfileController();
        return $controller->getProfile($request, $response);
    });

    $group->put('/profile', function ($request, $response) {
        $controller = new UserProfileController();
        return $controller->updateProfile($request, $response);
    });

    // Quiz routes
    $group->get('/quiz/start', function ($request, $response) {
        $controller = new QuizController();
        return $controller->startQuiz($request, $response);
    });
    
    $group->post('/quiz/submit', function ($request, $response) {
        $controller = new QuizController();
        return $controller->submitQuiz($request, $response);
    });
    
    $group->get('/quiz/history', function ($request, $response) {
        $controller = new QuizController();
        return $controller->getQuizHistory($request, $response);
    });
    
    $group->get('/quiz/{id}', function ($request, $response, $args) {
        $controller = new QuizController();
        return $controller->getQuizResult($request, $response, $args);
    });

    // Admin routes
    $group->get('/admin/stats', function ($request, $response) {
        $controller = new AdminController();
        return $controller->getStats($request, $response);
    })->add(new RoleMiddleware('admin'));

    $group->get('/admin/users', function ($request, $response) {
        $controller = new AdminController();
        return $controller->listUsers($request, $response);
    })->add(new RoleMiddleware('admin'));

    $group->put('/admin/users/{id}/role', function ($request, $response, $args) {
        $controller = new AdminController();
        return $controller->updateUserRole($request, $response, $args);
    })->add(new RoleMiddleware('admin'));

    $group->put('/admin/users/{id}/status', function ($request, $response, $args) {
        $controller = new AdminController();
        return $controller->updateUserStatus($request, $response, $args);
    })->add(new RoleMiddleware('admin'));

    $group->post('/admin/users/{id}/resend-verification', function ($request, $response, $args) {
        $controller = new AdminController();
        return $controller->resendVerification($request, $response, $args);
    })->add(new RoleMiddleware('admin'));

    // Admin shelter routes
    $group->get('/admin/shelters', function ($request, $response) {
        $controller = new AdminController();
        return $controller->listShelters($request, $response);
    })->add(new RoleMiddleware('admin'));

    $group->post('/admin/shelters', function ($request, $response) {
        $controller = new AdminController();
        return $controller->createShelter($request, $response);
    })->add(new RoleMiddleware('admin'));

    $group->get('/admin/shelters/{id}', function ($request, $response, $args) {
        $controller = new AdminController();
        return $controller->getShelter($request, $response, $args);
    })->add(new RoleMiddleware('admin'));

    $group->put('/admin/shelters/{id}', function ($request, $response, $args) {
        $controller = new AdminController();
        return $controller->updateShelter($request, $response, $args);
    })->add(new RoleMiddleware('admin'));

    $group->delete('/admin/shelters/{id}', function ($request, $response, $args) {
        $controller = new AdminController();
        return $controller->deleteShelter($request, $response, $args);
    })->add(new RoleMiddleware('admin'));
    
    // Shelter routes
    $group->post('/shelters', function ($request, $response) {
        $controller = new ShelterController();
        return $controller->createShelter($request, $response);
    });
    
    $group->get('/shelters', function ($request, $response) {
        $controller = new ShelterController();
        return $controller->listShelters($request, $response);
    });
    
    $group->get('/shelters/{id}', function ($request, $response, $args) {
        $controller = new ShelterController();
        return $controller->getShelter($request, $response, $args);
    });
    
    $group->put('/shelters/{id}', function ($request, $response, $args) {
        $controller = new ShelterController();
        return $controller->updateShelter($request, $response, $args);
    });
    
    $group->delete('/shelters/{id}', function ($request, $response, $args) {
        $controller = new ShelterController();
        return $controller->deleteShelter($request, $response, $args);
    });
    
    // Pet routes
    $group->post('/pets', function ($request, $response) {
        $controller = new PetController();
        return $controller->createPet($request, $response);
    });
    
    $group->get('/pets', function ($request, $response) {
        $controller = new PetController();
        return $controller->listPets($request, $response);
    });
    
    $group->get('/pets/{id}', function ($request, $response, $args) {
        $controller = new PetController();
        return $controller->getPet($request, $response, $args);
    });
    
    $group->put('/pets/{id}', function ($request, $response, $args) {
        $controller = new PetController();
        return $controller->updatePet($request, $response, $args);
    });
    
    $group->delete('/pets/{id}', function ($request, $response, $args) {
        $controller = new PetController();
        return $controller->deletePet($request, $response, $args);
    });
    
    // Pet trait routes
    $group->post('/pet-traits', function ($request, $response) {
        $controller = new PetController();
        return $controller->createTrait($request, $response);
    });
    
    $group->get('/pet-traits', function ($request, $response) {
        $controller = new PetController();
        return $controller->listTraits($request, $response);
    });

    $group->get('/pets/{id}/favorite', function ($request, $response, $args) {
        $userId = $request->getAttribute('user_id');
        $petId = (int) $args['id'];
        $service = new \PawPath\services\FavoriteService();
        
        try {
            $isFavorited = $service->isFavorited($userId, $petId);
            $response->getBody()->write(json_encode([
                'success' => true,
                'data' => ['is_favorited' => $isFavorited]
            ]));
            return $response->withHeader('Content-Type', 'application/json');
        } catch (\Exception $e) {
            $response->getBody()->write(json_encode([
                'success' => false,
                'error' => $e->getMessage()
            ]));
            return $response->withHeader('Content-Type', 'application/json')
                           ->withStatus(400);
        }
    });

    // Add a pet to favorites
    $group->post('/pets/{id}/favorite', function ($request, $response, $args) {
        $userId = $request->getAttribute('user_id');
        $petId = (int) $args['id'];
        $service = new \PawPath\services\FavoriteService();
        
        try {
            $result = $service->addFavorite($userId, $petId);
            $response->getBody()->write(json_encode([
                'success' => true,
                'data' => $result
            ]));
            return $response->withHeader('Content-Type', 'application/json');
        } catch (\Exception $e) {
            $response->getBody()->write(json_encode([
                'success' => false,
                'error' => $e->getMessage()
            ]));
            return $response->withHeader('Content-Type', 'application/json')
                           ->withStatus(400);
        }
    });

    // Remove a pet from favorites
    $group->delete('/pets/{id}/favorite', function ($request, $response, $args) {
        $userId = $request->getAttribute('user_id');
        $petId = (int) $args['id'];
        $service = new \PawPath\services\FavoriteService();
        
        try {
            $result = $service->removeFavorite($userId, $petId);
            $response->getBody()->write(json_encode([
                'success' => true,
                'data' => ['removed' => $result]
            ]));
            return $response->withHeader('Content-Type', 'application/json');
        } catch (\Exception $e) {
            $response->getBody()->write(json_encode([
                'success' => false,
                'error' => $e->getMessage()
            ]));
            return $response->withHeader('Content-Type', 'application/json')
                           ->withStatus(400);
        }
    });

    // Get user's favorited pets
    $group->get('/favorites', function ($request, $response) {
        $userId = $request->getAttribute('user_id');
        $service = new \PawPath\services\FavoriteService();
        
        try {
            $favorites = $service->getUserFavorites($userId);
            $response->getBody()->write(json_encode([
                'success' => true,
                'data' => $favorites
            ]));
            return $response->withHeader('Content-Type', 'application/json');
        } catch (\Exception $e) {
            $response->getBody()->write(json_encode([
                'success' => false,
                'error' => $e->getMessage()
            ]));
            return $response->withHeader('Content-Type', 'application/json')
                           ->withStatus(400);
        }
    });
    
    // Adoption Application routes
    $group->post('/adoptions', function ($request, $response) {
        $controller = new AdoptionController();
        return $controller->submitApplication($request, $response);
    });
    
    $group->get('/adoptions/user', function ($request, $response) {
        $controller = new AdoptionController();
        return $controller->getUserApplications($request, $response);
    });
    
    $group->get('/adoptions/shelter/{shelter_id}', function ($request, $response, $args) {
        $controller = new AdoptionController();
        return $controller->getShelterApplications($request, $response, $args);
    });
    
    $group->get('/adoptions/pet/{pet_id}', function ($request, $response, $args) {
        $controller = new AdoptionController();
        return $controller->getPetApplications($request, $response, $args);
    });
    
    $group->get('/adoptions/{id}', function ($request, $response, $args) {
        $controller = new AdoptionController();
        return $controller->getApplication($request, $response, $args);
    });
    
    $group->put('/adoptions/{id}/status', function ($request, $response, $args) {
        $controller = new AdoptionController();
        return $controller->updateApplicationStatus($request, $response, $args);
    });

    // Blog routes
    $group->post('/blog/posts', function ($request, $response) {
        $controller = new BlogController();
        return $controller->createPost($request, $response);
    });

    $group->get('/blog/posts', function ($request, $response) {
        $controller = new BlogController();
        return $controller->listPosts($request, $response);
    });

    $group->get('/blog/posts/{id}', function ($request, $response, $args) {
        $controller = new BlogController();
        return $controller->getPost($request, $response, $args);
    });

    $group->put('/blog/posts/{id}', function ($request, $response, $args) {
        $controller = new BlogController();
        return $controller->updatePost($request, $response, $args);
    });

    $group->delete('/blog/posts/{id}', function ($request, $response, $args) {
        $controller = new BlogController();
        return $controller->deletePost($request, $response, $args);
    });

    // Product routes
    $group->post('/products', function ($request, $response) {
        $controller = new ProductController();
        return $controller->createProduct($request, $response);
    });

    $group->get('/products', function ($request, $response) {
        $controller = new ProductController();
        return $controller->listProducts($request, $response);
    });

    $group->get('/products/{id}', function ($request, $response, $args) {
        $controller = new ProductController();
        return $controller->getProduct($request, $response, $args);
    });

    $group->put('/products/{id}', function ($request, $response, $args) {
        $controller = new ProductController();
        return $controller->updateProduct($request, $response, $args);
    });

    $group->delete('/products/{id}', function ($request, $response, $args) {
        $controller = new ProductController();
        return $controller->deleteProduct($request, $response, $args);
    });

})->add(new AuthMiddleware());

// Run the app
$app->run();
=== ./backend/database/migrations/01_enhance_user_system.sql ===
-- Enhance User table
ALTER TABLE User 
ADD COLUMN role ENUM('adopter', 'shelter_staff', 'admin') NOT NULL DEFAULT 'adopter',
ADD COLUMN email_verified_at TIMESTAMP NULL,
ADD COLUMN account_status ENUM('pending', 'active', 'suspended') DEFAULT 'pending',
ADD COLUMN last_login TIMESTAMP NULL,
ADD COLUMN email_verification_token VARCHAR(100) NULL,
ADD COLUMN email_token_expires_at TIMESTAMP NULL;

-- Create UserProfile table
CREATE TABLE UserProfile (
    profile_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    first_name VARCHAR(50),
    last_name VARCHAR(50),
    phone VARCHAR(20),
    address TEXT,
    city VARCHAR(100),
    state VARCHAR(50),
    zip_code VARCHAR(20),
    housing_type ENUM('house', 'apartment', 'condo', 'other'),
    has_yard BOOLEAN,
    other_pets TEXT,
    household_members INT,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES User(user_id) ON DELETE CASCADE,
    INDEX idx_user_profile (user_id)
);

-- Create PasswordReset table
CREATE TABLE PasswordReset (
    reset_id INT PRIMARY KEY AUTO_INCREMENT,
    user_id INT NOT NULL,
    token VARCHAR(100) NOT NULL,
    expires_at TIMESTAMP NOT NULL,
    used BOOLEAN DEFAULT FALSE,
    created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (user_id) REFERENCES User(user_id) ON DELETE CASCADE,
    INDEX idx_token (token),
    INDEX idx_user_reset (user_id, used)
);

-- Add indexes for performance
ALTER TABLE User
ADD INDEX idx_email (email),
ADD INDEX idx_status (account_status),
ADD INDEX idx_role (role);
=== ./backend/.env ===
DB_HOST=localhost
DB_PORT=3306
DB_DATABASE=pawpath
DB_USERNAME=root
DB_PASSWORD=Michael369!
APP_ENV=development
APP_DEBUG=true
APP_KEY=base64:VeryLongRandomStringForTesting123456789

# If you're using JWT for authentication
JWT_SECRET=AnotherRandomStringForJwtTesting123456789
IMAGE_UPLOAD_PATH=/pawpath-pet-adoption/backend/public/images

MAIL_HOST=smtp.gmail.com
MAIL_PORT=587
MAIL_USERNAME=woodmtaylor@gmail.com
MAIL_PASSWORD="sitb myrd ekcg bwbi"
MAIL_FROM_ADDRESS=noreply@pawpath.com
MAIL_FROM_NAME="PawPath"
APP_URL=http://localhost:5173

=== ./backend/.env.example ===
DB_HOST=localhost
DB_PORT=3306
DB_DATABASE=pawpath
DB_USERNAME=root
DB_PASSWORD=

APP_ENV=development
APP_DEBUG=true
APP_KEY=base64:your-secret-key-here

# If you're using JWT for authentication
JWT_SECRET=your-jwt-secret-key-here
