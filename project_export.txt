Directory Structure:

.
├── README.md
├── backend
│   ├── README.md
│   ├── api_tests.sh
│   ├── database
│   │   ├── migrations
│   │   │   └── 01_enhance_user_system.sql
│   │   └── schema.sql
│   ├── scripts
│   │   └── add_pet_image.php
│   ├── src
│   │   ├── api
│   │   │   ├── AdminController.php
│   │   │   ├── AdoptionController.php
│   │   │   ├── AuthController.php
│   │   │   ├── BlogController.php
│   │   │   ├── PetController.php
│   │   │   ├── ProductController.php
│   │   │   ├── QuizController.php
│   │   │   ├── README.md
│   │   │   ├── ShelterController.php
│   │   │   └── UserProfileController.php
│   │   ├── config
│   │   │   ├── Permissions.php
│   │   │   ├── README.md
│   │   │   ├── database
│   │   │   │   └── DatabaseConfig.php
│   │   │   └── email
│   │   │       └── EmailConfig.php
│   │   ├── middleware
│   │   │   ├── AuthMiddleware.php
│   │   │   └── RoleMiddleware.php
│   │   ├── models
│   │   │   ├── AdoptionApplication.php
│   │   │   ├── BlogPost.php
│   │   │   ├── Pet.php
│   │   │   ├── PetImage.php
│   │   │   ├── PetTrait.php
│   │   │   ├── Product.php
│   │   │   ├── QuizResult.php
│   │   │   ├── README.md
│   │   │   ├── Shelter.php
│   │   │   ├── StartingQuiz.php
│   │   │   ├── User.php
│   │   │   └── UserProfile.php
│   │   ├── services
│   │   │   ├── AdoptionService.php
│   │   │   ├── AuthService.php
│   │   │   ├── BlogService.php
│   │   │   ├── EmailService.php
│   │   │   ├── EmailTemplateService.php
│   │   │   ├── FavoriteService.php
│   │   │   ├── ImageUploadService.php
│   │   │   ├── PetService.php
│   │   │   ├── ProductService.php
│   │   │   ├── QuizService.php
│   │   │   ├── README.md
│   │   │   ├── ShelterService.php
│   │   │   └── UserRoleService.php
│   │   └── utils
│   │       ├── README.md
│   │       └── ResponseHelper.php
│   └── sudo
├── export_project.sh
├── frontend
│   ├── README.md
│   ├── components
│   │   ├── auth
│   │   │   ├── AuthLayout.tsx
│   │   │   └── FormInput.tsx
│   │   ├── layout
│   │   └── pages
│   │       └── LoginPage.tsx
│   ├── eslintrc.js
│   ├── index.html
│   ├── project_core.txt
│   └── src
│       ├── App.css
│       ├── App.tsx
│       ├── assets
│       ├── components
│       │   ├── auth
│       │   │   ├── ProtectedRoute.tsx
│       │   │   └── RoleProtectedRoute.tsx
│       │   ├── layout
│       │   │   ├── MainLayout.tsx
│       │   │   └── Navbar.tsx
│       │   ├── pets
│       │   │   ├── PetCard.tsx
│       │   │   ├── PetFilters.tsx
│       │   │   ├── PetImageUploader.tsx
│       │   │   └── PetSubmissionForm.tsx
│       │   └── shared
│       │       └── LoadingSpinner.tsx
│       ├── contexts
│       │   └── AuthContext.tsx
│       ├── hooks
│       │   └── use-toast.ts
│       ├── index.css
│       ├── lib
│       │   ├── axios.ts
│       │   └── utils.ts
│       ├── main.tsx
│       ├── pages
│       │   ├── AdoptionFormPage.tsx
│       │   ├── HomePage.tsx
│       │   ├── LoginPage.tsx
│       │   ├── PetDetailPage.tsx
│       │   ├── PetsPage.tsx
│       │   ├── ProfilePage.tsx
│       │   ├── QuizPage.tsx
│       │   ├── QuizResultsPage.tsx
│       │   ├── RegisterPage.tsx
│       │   ├── ShelterDetailPage.tsx
│       │   ├── SheltersPage.tsx
│       │   ├── UnauthorizedPage.tsx
│       │   ├── admin
│       │   │   ├── AdminDashboard.tsx
│       │   │   ├── NewShelterPage.tsx
│       │   │   ├── ShelterManagement.tsx
│       │   │   └── UserManagement.tsx
│       │   ├── blog
│       │   │   ├── BlogDetailPage.tsx
│       │   │   └── BlogListPage.tsx
│       │   ├── profile
│       │   │   ├── ApplicationDetailPage.tsx
│       │   │   ├── ApplicationsPage.tsx
│       │   │   ├── FavoritesPage.tsx
│       │   │   └── ProfileSettings.tsx
│       │   └── shelter
│       │       ├── NetPetPage.tsx
│       │       ├── NewPetPage.tsx
│       │       ├── ShelterDashboard.tsx
│       │       └── ShelterManagement.tsx
│       ├── routes
│       │   └── shelterRoutes.tsx
│       ├── services
│       │   ├── api.ts
│       │   ├── auth.ts
│       │   └── profile.ts
│       ├── stores
│       │   └── auth.ts
│       ├── types
│       │   ├── api.ts
│       │   ├── index.ts
│       │   └── profile.ts
│       └── vite-env.d.ts
└── project_export.txt

36 directories, 112 files

====================
File Contents:
====================

File: ./backend/src/middleware/AuthMiddleware.php
----------------------------------------
<?php
// backend/src/middleware/AuthMiddleware.php

namespace PawPath\middleware;

use Psr\Http\Message\ServerRequestInterface as Request;
use Psr\Http\Server\RequestHandlerInterface as RequestHandler;
use Slim\Psr7\Response;
use PawPath\services\AuthService;  // Changed from PawPath\Services\AuthService

class AuthMiddleware
{
    private AuthService $authService;
    
    public function __construct()
    {
        $this->authService = new AuthService();
    }
    
    public function __invoke(Request $request, RequestHandler $handler): Response
    {
        error_log('Processing auth middleware');
        
        $token = $this->extractToken($request);
        
        if (!$token) {
            error_log('No token provided - returning 401');
            $response = new Response();
            $response->getBody()->write(json_encode([
                'success' => false,
                'error' => 'No token provided'
            ]));
            return $response
                ->withStatus(401)
                ->withHeader('Content-Type', 'application/json');
        }
        
        try {
            $payload = $this->authService->validateToken($token);
            if (!$payload) {
                throw new \Exception('Invalid token');
            }
            
            error_log('Token validated successfully for user: ' . ($payload['user_id'] ?? 'unknown'));
            $request = $request->withAttribute('user_id', $payload['user_id']);
            return $handler->handle($request);
            
        } catch (\Exception $e) {
            error_log('Token validation failed: ' . $e->getMessage());
            $response = new Response();
            $response->getBody()->write(json_encode([
                'success' => false,
                'error' => 'Invalid token'
            ]));
            return $response
                ->withStatus(401)
                ->withHeader('Content-Type', 'application/json');
        }
    }
    
    private function extractToken(Request $request): ?string
    {
        $header = $request->getHeaderLine('Authorization');
        
        if (empty($header)) {
            error_log('No Authorization header found');
            return null;
        }
        
        if (preg_match('/Bearer\s+(.*)$/i', $header, $matches)) {
            error_log('Token extracted: ' . substr($matches[1], 0, 10) . '...');
            return $matches[1];
        }
        
        error_log('Invalid Authorization header format');
        return null;
    }
}

========================================

File: ./backend/src/middleware/RoleMiddleware.php
----------------------------------------
<?php
namespace PawPath\middleware;

use Psr\Http\Message\ServerRequestInterface as Request;
use Psr\Http\Server\RequestHandlerInterface as RequestHandler;
use Slim\Psr7\Response;
use PawPath\config\Permissions;

class RoleMiddleware
{
    private string $requiredRole;
    
    public function __construct(string $role)
    {
        $this->requiredRole = $role;
    }
    
    public function __invoke(Request $request, RequestHandler $handler): Response
    {
        $userId = $request->getAttribute('user_id');
        
        // Get user from the database
        $db = \PawPath\config\database\DatabaseConfig::getConnection();
        $stmt = $db->prepare("SELECT role FROM User WHERE user_id = ?");
        $stmt->execute([$userId]);
        $user = $stmt->fetch();
        
        if (!$user) {
            $response = new Response();
            $response->getBody()->write(json_encode([
                'success' => false,
                'error' => 'Authentication required'
            ]));
            return $response->withStatus(401)
                           ->withHeader('Content-Type', 'application/json');
        }
        
        // Get role hierarchy
        $roleHierarchy = [
            'admin' => ['admin'],
            'shelter_staff' => ['admin', 'shelter_staff'],
            'adopter' => ['admin', 'shelter_staff', 'adopter']
        ];
        
        // Check if user's role has permission
        if (!in_array($user['role'], $roleHierarchy[$this->requiredRole] ?? [])) {
            $response = new Response();
            $response->getBody()->write(json_encode([
                'success' => false,
                'error' => 'Insufficient permissions'
            ]));
            return $response->withStatus(403)
                           ->withHeader('Content-Type', 'application/json');
        }
        
        // Add user to request attributes
        $request = $request->withAttribute('user', [
            'user_id' => $userId,
            'role' => $user['role']
        ]);
        
        return $handler->handle($request);
    }
}

========================================

File: ./backend/src/config/Permissions.php
----------------------------------------
<?php
namespace PawPath\config;

class Permissions {
    // User roles
    public const ROLE_ADMIN = 'admin';
    public const ROLE_SHELTER_STAFF = 'shelter_staff';
    public const ROLE_ADOPTER = 'adopter';
    
    // Permission sets by role
    public const PERMISSIONS = [
        self::ROLE_ADMIN => [
            'users:manage',
            'shelters:manage',
            'pets:manage',
            'applications:manage',
            'blog:manage',
            'products:manage'
        ],
        self::ROLE_SHELTER_STAFF => [
            'pets:create',
            'pets:update',
            'pets:delete',
            'applications:view',
            'applications:process'
        ],
        self::ROLE_ADOPTER => [
            'pets:view',
            'applications:create',
            'applications:view-own',
            'profile:manage-own'
        ]
    ];
    
    public static function hasPermission(string $role, string $permission): bool {
        return isset(self::PERMISSIONS[$role]) && 
               in_array($permission, self::PERMISSIONS[$role]);
    }
    
    public static function validateRole(string $role): bool {
        return in_array($role, [self::ROLE_ADMIN, self::ROLE_SHELTER_STAFF, self::ROLE_ADOPTER]);
    }
}

========================================

File: ./backend/src/config/email/EmailConfig.php
----------------------------------------
<?php
namespace PawPath\config\email;

class EmailConfig {
    public static function getConfig(): array {
        $env = $_ENV['APP_ENV'] ?? 'development';
        
        if ($env === 'development') {
            // Use Mailtrap in development
            return [
                'host' => 'sandbox.smtp.mailtrap.io',
                'port' => 2525,
                'username' => $_ENV['MAILTRAP_USERNAME'],
                'password' => $_ENV['MAILTRAP_PASSWORD'],
                'encryption' => 'tls',
                'from_address' => 'testing@pawpath.com',
                'from_name' => 'PawPath Testing'
            ];
        } else {
            // Use production settings (Gmail or other SMTP)
            return [
                'host' => $_ENV['MAIL_HOST'],
                'port' => $_ENV['MAIL_PORT'],
                'username' => $_ENV['MAIL_USERNAME'],
                'password' => $_ENV['MAIL_PASSWORD'],
                'encryption' => 'tls',
                'from_address' => $_ENV['MAIL_FROM_ADDRESS'],
                'from_name' => $_ENV['MAIL_FROM_NAME']
            ];
        }
    }
}

========================================

File: ./backend/src/config/database/DatabaseConfig.php
----------------------------------------
<?php
// backend/src/config/database/DatabaseConfig.php

namespace PawPath\config\database;

use PDO;
use PDOException;

class DatabaseConfig {
    private static ?PDO $connection = null;
    
    public static function getConnection(): PDO {
        if (self::$connection === null) {
            try {
                // Get environment variables
                $dotenv = \Dotenv\Dotenv::createImmutable(__DIR__ . '/../../../');
                $dotenv->load();

                // Debug environment variables
                error_log("Environment variables:");
                error_log("DB_HOST: " . ($_ENV['DB_HOST'] ?? 'not set'));
                error_log("DB_PORT: " . ($_ENV['DB_PORT'] ?? 'not set'));
                error_log("DB_DATABASE: " . ($_ENV['DB_DATABASE'] ?? 'not set'));
                error_log("DB_USERNAME: " . ($_ENV['DB_USERNAME'] ?? 'not set'));
                error_log("DB_PASSWORD is set: " . (isset($_ENV['DB_PASSWORD']) ? 'Yes' : 'No'));
                
                // Use exact matches to your .env file
                $host = $_ENV['DB_HOST'] ?? 'localhost';
                $port = $_ENV['DB_PORT'] ?? '3306';
                $dbName = $_ENV['DB_DATABASE'] ?? 'pawpath';
                $username = $_ENV['DB_USERNAME'] ?? 'root';
                $password = $_ENV['DB_PASSWORD'] ?? '';
                
                $dsn = "mysql:host=$host;port=$port;dbname=$dbName;charset=utf8mb4";
                
                error_log("Attempting to connect with DSN: $dsn");
                error_log("Username: $username");
                
                self::$connection = new PDO(
                    $dsn,
                    $username,
                    $password,
                    [
                        PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,
                        PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,
                        PDO::ATTR_EMULATE_PREPARES => false
                    ]
                );
                
                error_log("Database connection successful");
            } catch (PDOException $e) {
                error_log("Database connection failed: " . $e->getMessage());
                throw new PDOException("Connection failed: " . $e->getMessage());
            }
        }
        
        return self::$connection;
    }
}

========================================

File: ./backend/src/api/PetController.php
----------------------------------------
<?php
namespace PawPath\api;

use PawPath\services\PetService;
use PawPath\services\ImageUploadService;
use PawPath\models\PetImage;
use PawPath\config\database\DatabaseConfig;
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use PawPath\utils\ResponseHelper;
use PDO;

class PetController {
    private PetService $petService;
    private ImageUploadService $imageService;
    private PetImage $petImageModel;
    private PDO $db;
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
        $this->petService = new PetService();
        $this->imageService = new ImageUploadService();
        $this->petImageModel = new PetImage();
    }

    public function createPet(Request $request, Response $response): Response {
        try {
            $data = $request->getParsedBody();
            error_log('Creating pet with data: ' . print_r($data, true));
            
            if (!is_array($data)) {
                $body = (string) $request->getBody();
                $data = json_decode($body, true);
                error_log('Parsed JSON data: ' . print_r($data, true));
                
                if (json_last_error() !== JSON_ERROR_NONE) {
                    throw new \RuntimeException('Invalid JSON data provided: ' . json_last_error_msg());
                }
            }
            
            if (empty($data)) {
                throw new \RuntimeException('No data provided');
            }
            
            $result = $this->petService->createPet($data);
            error_log('Pet creation result: ' . print_r($result, true));
            
            $response->getBody()->write(json_encode([
                'success' => true,
                'data' => $result
            ]));
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(201);
        } catch (\Exception $e) {
            error_log('Error creating pet: ' . $e->getMessage() . "\n" . $e->getTraceAsString());
            
            $response->getBody()->write(json_encode([
                'success' => false,
                'error' => $e->getMessage(),
                'trace' => $e->getTraceAsString() // Remove in production
            ]));
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(400);
        }
    }


    public function submitPetForAdoption(Request $request, Response $response): Response {
        try {
            $userId = $request->getAttribute('user_id');
            $data = $request->getParsedBody();
            
            // Add the submitting user's ID to the data
            $data['submitted_by_user_id'] = $userId;
            $data['status'] = 'pending';
            
            // Create the pet with pending status
            $petId = $this->petService->createPet($data);
            
            // Handle image uploads if present
            $uploadedFiles = $request->getUploadedFiles();
            if (!empty($uploadedFiles['images'])) {
                $this->handleImageUploads($petId, $uploadedFiles['images']);
            }
            
            // Return success response
            return ResponseHelper::sendResponse(
                $response,
                ['message' => 'Pet submitted for approval', 'pet_id' => $petId],
                201
            );
        } catch (\Exception $e) {
            return ResponseHelper::sendError(
                $response,
                $e->getMessage(),
                400
            );
        }
    }

    public function getPetSubmissions(Request $request, Response $response): Response {
        try {
            $queryParams = $request->getQueryParams();
            $status = $queryParams['status'] ?? 'pending';
            
            $submissions = $this->petService->getPetSubmissions($status);
            
            return ResponseHelper::sendResponse($response, $submissions);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }

    public function reviewPetSubmission(Request $request, Response $response, array $args): Response {
        try {
            $petId = (int) $args['id'];
            $userId = $request->getAttribute('user_id');
            $data = $request->getParsedBody();
            
            if (!isset($data['status']) || !in_array($data['status'], ['approved', 'rejected'])) {
                throw new \InvalidArgumentException('Invalid status provided');
            }
            
            $result = $this->petService->reviewPetSubmission(
                $petId,
                $userId,
                $data['status'],
                $data['note'] ?? null
            );
            
            return ResponseHelper::sendResponse($response, $result);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }

    private function handleImageUploads(int $petId, array $images): void {
        foreach ($images as $image) {
            if ($image->getError() === UPLOAD_ERR_OK) {
                $imageUrl = $this->imageService->uploadImage([
                    'tmp_name' => $image->getStream()->getMetadata('uri'),
                    'error' => $image->getError(),
                    'type' => $image->getClientMediaType()
                ]);
                
                $this->petImageModel->create($petId, $imageUrl, false);
            }
        }
    }
       

    public function getPet(Request $request, Response $response, array $args): Response {
        try {
            $petId = (int) $args['id'];
            
            // Add debugging for image lookup
            $stmt = $this->db->prepare("SELECT * FROM Pet_Image WHERE pet_id = ?");
            $stmt->execute([$petId]);
            $images = $stmt->fetchAll();
            error_log("Images for pet $petId: " . print_r($images, true));
            
            $result = $this->petService->getPet($petId);
            error_log("Complete pet data: " . print_r($result, true));
            
            return ResponseHelper::sendResponse($response, $result);
        } catch (\Exception $e) {
            error_log('Error getting pet: ' . $e->getMessage());
            return ResponseHelper::sendError($response, $e->getMessage(), 404);
        }
    }
        
    public function listPets(Request $request, Response $response): Response {
        try {
            $queryParams = $request->getQueryParams();
            error_log("Received request params: " . print_r($queryParams, true));
            
            $page = isset($queryParams['page']) ? (int)$queryParams['page'] : 1;
            $perPage = isset($queryParams['perPage']) ? (int)$queryParams['perPage'] : 12;
            $offset = ($page - 1) * $perPage;

            $queryParams['offset'] = $offset;
            $queryParams['limit'] = $perPage;
            
            // Add sorting parameters
            $sortBy = $queryParams['sortBy'] ?? 'newest';
            $queryParams['sort'] = match($sortBy) {
                'oldest' => 'created_at ASC',
                'name_asc' => 'name ASC',
                'name_desc' => 'name DESC',
                default => 'updated_at DESC', // 'newest' is the default
            };
            
            $result = $this->petService->listPets($queryParams);
            error_log("Pet list result: " . print_r($result, true));
            
            return ResponseHelper::sendResponse($response, [
                'items' => $result['pets'],
                'total' => $result['total'],
                'page' => $page,
                'perPage' => $perPage
            ]);
        } catch (\Exception $e) {
            error_log("Error in listPets: " . $e->getMessage());
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }
    
    public function updatePet(Request $request, Response $response, array $args): Response {
        try {
            $petId = (int) $args['id'];
            $data = $request->getParsedBody();
            
            if (!is_array($data)) {
                $body = (string) $request->getBody();
                $data = json_decode($body, true);
                
                if (json_last_error() !== JSON_ERROR_NONE) {
                    throw new \RuntimeException('Invalid JSON data provided');
                }
            }
            
            $result = $this->petService->updatePet($petId, $data);
            
            $response->getBody()->write(json_encode($result));
            return $response->withHeader('Content-Type', 'application/json');
        } catch (\Exception $e) {
            error_log('Error updating pet: ' . $e->getMessage());
            
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response->withHeader('Content-Type', 'application/json')
                           ->withStatus(400);
        }
    }
    
    public function deletePet(Request $request, Response $response, array $args): Response {
        try {
            $petId = (int) $args['id'];
            $this->petService->deletePet($petId);
            
            return $response->withStatus(204);
        } catch (\Exception $e) {
            error_log('Error deleting pet: ' . $e->getMessage());
            
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response->withHeader('Content-Type', 'application/json')
                           ->withStatus(400);
        }
    }
    
    public function createTrait(Request $request, Response $response): Response {
        try {
            $data = $request->getParsedBody();
            
            if (!is_array($data) || !isset($data['trait_name'])) {
                throw new \RuntimeException('trait_name is required');
            }
            
            $result = $this->petService->addTrait($data['trait_name']);
            
            $response->getBody()->write(json_encode($result));
            return $response->withHeader('Content-Type', 'application/json')
                           ->withStatus(201);
        } catch (\Exception $e) {
            error_log('Error creating trait: ' . $e->getMessage());
            
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response->withHeader('Content-Type', 'application/json')
                           ->withStatus(400);
        }
    }
    
    public function listTraits(Request $request, Response $response): Response {
        try {
            $traits = $this->petService->listTraits();
            
            // Transform the data to match the frontend's expectations
            $traitsData = array_map(function($trait) {
                return [
                    'trait_id' => $trait['trait_id'],
                    'trait_name' => $trait['trait_name']
                ];
            }, $traits);
            
            return ResponseHelper::sendResponse($response, [
                'traits' => $traitsData
            ]);
        } catch (\Exception $e) {
            error_log('Error listing traits: ' . $e->getMessage());
            return ResponseHelper::sendError($response, 'Failed to fetch traits', 500);
        }
    }

    public function uploadImages(Request $request, Response $response, array $args): Response {
        try {
            $petId = (int) $args['id'];
            $uploadedFiles = $request->getUploadedFiles();
            
            if (empty($uploadedFiles['images'])) {
                throw new \RuntimeException('No images uploaded');
            }
            
            $images = $uploadedFiles['images'];
            if (!is_array($images)) {
                $images = [$images];
            }
            
            $uploadedImages = [];
            foreach ($images as $index => $image) {
                $imageUrl = $this->imageService->uploadImage([
                    'tmp_name' => $image->getStream()->getMetadata('uri'),
                    'error' => $image->getError(),
                    'type' => $image->getClientMediaType()
                ]);
                
                $imageId = $this->petImageModel->create(
                    $petId, 
                    $imageUrl, 
                    $index === 0 && empty($this->petImageModel->findByPetId($petId))
                );
                
                $uploadedImages[] = [
                    'image_id' => $imageId,
                    'url' => $imageUrl
                ];
            }
            
            return ResponseHelper::sendResponse($response, $uploadedImages, 201);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage(), 400);
        }
    }
    
    public function deleteImage(Request $request, Response $response, array $args): Response {
        try {
            $petId = (int) $args['id'];
            $imageId = (int) $args['imageId'];
            
            $images = $this->petImageModel->findByPetId($petId);
            $imageToDelete = array_filter($images, fn($img) => $img['image_id'] === $imageId);
            
            if (empty($imageToDelete)) {
                throw new \RuntimeException('Image not found');
            }
            
            $image = reset($imageToDelete);
            $this->imageService->deleteImage($image['image_url']);
            $this->petImageModel->delete($imageId, $petId);
            
            return ResponseHelper::sendResponse($response, ['message' => 'Image deleted successfully']);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage(), 400);
        }
    }
    
    public function setPrimaryImage(Request $request, Response $response, array $args): Response {
        try {
            $petId = (int) $args['id'];
            $imageId = (int) $args['imageId'];
            
            $this->petImageModel->setPrimary($imageId, $petId);
            
            return ResponseHelper::sendResponse($response, ['message' => 'Primary image updated successfully']);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage(), 400);
        }
    }
}

========================================

File: ./backend/src/api/UserProfileController.php
----------------------------------------
<?php
namespace PawPath\api;

use PawPath\services\ImageUploadService;
use PawPath\models\UserProfile;
use PawPath\utils\ResponseHelper;
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;

class UserProfileController {
    private UserProfile $profileModel;
    private ImageUploadService $imageService;
    
    public function __construct() {
        $this->profileModel = new UserProfile();
        $this->imageService = new ImageUploadService();
    }
    
    public function getProfile(Request $request, Response $response): Response {
        try {
            $userId = $request->getAttribute('user_id');
            $profile = $this->profileModel->findByUserId($userId);
            
            if (!$profile) {
                return ResponseHelper::sendError($response, "Profile not found", 404);
            }
            
            return ResponseHelper::sendResponse($response, $profile);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }

    public function uploadProfileImage(Request $request, Response $response): Response {
        try {
            $userId = $request->getAttribute('user_id');
            $uploadedFiles = $request->getUploadedFiles();
            
            if (empty($uploadedFiles['profile_image'])) {
                throw new \RuntimeException('No image uploaded');
            }
            
            $uploadedFile = $uploadedFiles['profile_image'];
            $imageUrl = $this->imageService->uploadProfileImage([
                'tmp_name' => $uploadedFile->getStream()->getMetadata('uri'),
                'error' => $uploadedFile->getError(),
                'type' => $uploadedFile->getClientMediaType()
            ]);
            
            $this->profileModel->updateProfileImage($userId, $imageUrl);
            
            return ResponseHelper::sendResponse($response, [
                'profile_image' => $imageUrl
            ]);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage(), 400);
        }
    }
    
    public function updateProfile(Request $request, Response $response): Response {
        try {
            $userId = $request->getAttribute('user_id');
            $data = $request->getParsedBody();
            
            // Validate required fields
            $requiredFields = ['first_name', 'last_name', 'phone'];
            foreach ($requiredFields as $field) {
                if (empty($data[$field])) {
                    return ResponseHelper::sendError(
                        $response, 
                        "Missing required field: $field",
                        400
                    );
                }
            }
            
            // Check if profile exists
            $existingProfile = $this->profileModel->findByUserId($userId);
            
            if ($existingProfile) {
                $success = $this->profileModel->update($userId, $data);
            } else {
                $data['user_id'] = $userId;
                $profileId = $this->profileModel->create($data);
                $success = $profileId > 0;
            }
            
            if (!$success) {
                return ResponseHelper::sendError(
                    $response,
                    "Failed to update profile",
                    400
                );
            }
            
            $updatedProfile = $this->profileModel->findByUserId($userId);
            return ResponseHelper::sendResponse($response, $updatedProfile);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }
}

========================================

File: ./backend/src/api/BlogController.php
----------------------------------------
<?php
namespace PawPath\api;

use PDO;
use PawPath\services\BlogService;
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use PawPath\config\database\DatabaseConfig;
use PawPath\utils\ResponseHelper;

class BlogController {
    private PDO $db;
    private BlogService $blogService;
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
        $this->blogService = new BlogService();
    }
    
    public function listPosts(Request $request, Response $response): Response {
        try {
            // Get posts with author names and products
            $query = "
                SELECT 
                    bp.*,
                    u.username as author_name,
                    GROUP_CONCAT(
                        JSON_OBJECT(
                            'product_id', p.product_id,
                            'name', p.name,
                            'description', p.description,
                            'price', p.price,
                            'affiliate_link', p.affiliate_link
                        )
                    ) as products
                FROM Blog_Post bp
                LEFT JOIN User u ON bp.author_id = u.user_id
                LEFT JOIN Blog_Product_Relation bpr ON bp.post_id = bpr.post_id
                LEFT JOIN Product p ON bpr.product_id = p.product_id
                GROUP BY bp.post_id
                ORDER BY bp.publication_date DESC
            ";
            
            error_log("Executing blog posts query");
            $stmt = $this->db->prepare($query);
            $stmt->execute();
            $posts = $stmt->fetchAll();
            
            error_log("Found " . count($posts) . " posts");
            
            // Process the products string into an array
            foreach ($posts as &$post) {
                if ($post['products']) {
                    $products = explode(',', $post['products']);
                    $post['products'] = array_map(function($product) {
                        return json_decode($product, true);
                    }, $products);
                } else {
                    $post['products'] = [];
                }
            }

            return ResponseHelper::sendResponse($response, $posts);
        } catch (\Exception $e) {
            error_log("Error in listPosts: " . $e->getMessage());
            return ResponseHelper::sendError($response, "Failed to fetch blog posts: " . $e->getMessage());
        }
    }
    
    public function getPost(Request $request, Response $response, array $args): Response {
        try {
            $postId = (int) $args['id'];
            
            $query = "
                SELECT 
                    bp.*,
                    u.username as author_name,
                    GROUP_CONCAT(
                        JSON_OBJECT(
                            'product_id', p.product_id,
                            'name', p.name,
                            'description', p.description,
                            'price', p.price,
                            'affiliate_link', p.affiliate_link
                        )
                    ) as products
                FROM Blog_Post bp
                LEFT JOIN User u ON bp.author_id = u.user_id
                LEFT JOIN Blog_Product_Relation bpr ON bp.post_id = bpr.post_id
                LEFT JOIN Product p ON bpr.product_id = p.product_id
                WHERE bp.post_id = ?
                GROUP BY bp.post_id
            ";
            
            $stmt = $this->db->prepare($query);
            $stmt->execute([$postId]);
            $post = $stmt->fetch();
            
            if (!$post) {
                return ResponseHelper::sendError($response, "Post not found", 404);
            }
            
            // Process products
            if ($post['products']) {
                $products = explode(',', $post['products']);
                $post['products'] = array_map(function($product) {
                    return json_decode($product, true);
                }, $products);
            } else {
                $post['products'] = [];
            }

            return ResponseHelper::sendResponse($response, $post);
        } catch (\Exception $e) {
            error_log("Error in getPost: " . $e->getMessage());
            return ResponseHelper::sendError($response, "Failed to fetch blog post: " . $e->getMessage());
        }
    }
}

========================================

File: ./backend/src/api/ProductController.php
----------------------------------------
<?php
// src/api/ProductController.php
namespace PawPath\api;

use PawPath\services\ProductService;
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;

class ProductController {
    private ProductService $productService;
    
    public function __construct() {
        $this->productService = new ProductService();
    }
    
    public function createProduct(Request $request, Response $response): Response {
        try {
            $data = $request->getParsedBody();
            
            $result = $this->productService->createProduct($data);
            
            $response->getBody()->write(json_encode($result));
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(201);
        } catch (\Exception $e) {
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(400);
        }
    }
    
    public function getProduct(Request $request, Response $response, array $args): Response {
        try {
            $productId = (int) $args['id'];
            $result = $this->productService->getProduct($productId);
            
            $response->getBody()->write(json_encode($result));
            return $response->withHeader('Content-Type', 'application/json');
        } catch (\Exception $e) {
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(404);
        }
    }
    
    public function listProducts(Request $request, Response $response): Response {
        try {
            $filters = $request->getQueryParams();
            $result = $this->productService->listProducts($filters);
            
            $response->getBody()->write(json_encode($result));
            return $response->withHeader('Content-Type', 'application/json');
        } catch (\Exception $e) {
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(400);
        }
    }
    
    public function updateProduct(Request $request, Response $response, array $args): Response {
        try {
            $productId = (int) $args['id'];
            $data = $request->getParsedBody();
            
            $result = $this->productService->updateProduct($productId, $data);
            
            $response->getBody()->write(json_encode($result));
            return $response->withHeader('Content-Type', 'application/json');
        } catch (\Exception $e) {
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(400);
        }
    }
    
    public function deleteProduct(Request $request, Response $response, array $args): Response {
        try {
            $productId = (int) $args['id'];
            $this->productService->deleteProduct($productId);
            
            return $response->withStatus(204);
        } catch (\Exception $e) {
            $response->getBody()->write(json_encode([
                'error' => $e->getMessage()
            ]));
            return $response
                ->withHeader('Content-Type', 'application/json')
                ->withStatus(400);
        }
    }
}

========================================

File: ./backend/src/api/ShelterController.php
----------------------------------------
<?php
namespace PawPath\api;

use PawPath\services\ShelterService;
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use PawPath\utils\ResponseHelper;

class ShelterController {
    private ShelterService $shelterService;
    
    public function __construct() {
        try {
            $this->shelterService = new ShelterService();
        } catch (\Exception $e) {
            error_log("Error initializing ShelterController: " . $e->getMessage());
            throw $e;
        }
    }

    public function getShelter(Request $request, Response $response, array $args): Response {
        try {
            error_log("Getting shelter with ID: " . $args['id']);
            
            $shelterId = (int) $args['id'];
            $shelter = $this->shelterService->getShelter($shelterId);
            
            if (!$shelter) {
                error_log("Shelter not found: " . $shelterId);
                return ResponseHelper::sendError(
                    $response,
                    "Shelter not found",
                    404
                );
            }
            
            // Add additional shelter information
            $shelter['total_pets'] = $this->shelterService->getTotalPets($shelterId);
            $shelter['active_applications'] = $this->shelterService->getActiveApplications($shelterId);
            
            error_log("Found shelter: " . json_encode($shelter));
            return ResponseHelper::sendResponse($response, $shelter);
            
        } catch (\Exception $e) {
            error_log("Error in getShelter: " . $e->getMessage());
            error_log("Stack trace: " . $e->getTraceAsString());
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }

    public function getShelterStats(Request $request, Response $response): Response {
        try {
            $userId = $request->getAttribute('user_id');
            $stats = $this->shelterService->getShelterStats($userId);
            return ResponseHelper::sendResponse($response, $stats);
        } catch (\Exception $e) {
            error_log("Error in getShelterStats: " . $e->getMessage());
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }

    public function getShelterPets(Request $request, Response $response): Response {
        try {
            $userId = $request->getAttribute('user_id');
            $stats = $this->shelterService->getShelterStats($userId);
            $pets = $this->shelterService->getShelterPets($stats['shelterId']);
            return ResponseHelper::sendResponse($response, $pets);
        } catch (\Exception $e) {
            error_log("Error in getShelterPets: " . $e->getMessage());
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }
    
    public function listShelters(Request $request, Response $response): Response {
        try {
            error_log("Listing shelters");
            
            $queryParams = $request->getQueryParams();
            error_log("Query params: " . print_r($queryParams, true));
            
            $filters = [
                'search' => $queryParams['search'] ?? null,
                'is_no_kill' => isset($queryParams['is_no_kill']) ? 
                    filter_var($queryParams['is_no_kill'], FILTER_VALIDATE_BOOLEAN) : null
            ];
            
            $shelters = $this->shelterService->listShelters($filters);
            
            // Add additional information for each shelter
            foreach ($shelters as &$shelter) {
                $shelter['total_pets'] = $this->shelterService->getTotalPets($shelter['shelter_id']);
                $shelter['active_applications'] = $this->shelterService->getActiveApplications($shelter['shelter_id']);
            }
            
            return ResponseHelper::sendResponse($response, $shelters);
        } catch (\Exception $e) {
            error_log("Error in listShelters: " . $e->getMessage());
            error_log("Stack trace: " . $e->getTraceAsString());
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }
}

========================================

File: ./backend/src/api/AdoptionController.php
----------------------------------------
<?php
namespace PawPath\api;

use PawPath\utils\ResponseHelper;
use PawPath\services\AdoptionService;
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;

class AdoptionController {
    private AdoptionService $adoptionService;
    
    public function __construct() {
        $this->adoptionService = new AdoptionService();
    }

    public function getApplication(Request $request, Response $response, array $args): Response {
        try {
            $applicationId = (int) $args['id'];
            $userId = $request->getAttribute('user_id');
            
            error_log("Fetching application ID: $applicationId for user: $userId");
            
            $application = $this->adoptionService->getApplication($applicationId);
            
            // Check if user has permission to view this application
            if ($application['user_id'] !== $userId) {
                return ResponseHelper::sendError(
                    $response,
                    "Unauthorized to view this application",
                    403
                );
            }

            return ResponseHelper::sendResponse($response, $application);
        } catch (\Exception $e) {
            error_log("Error in getApplication: " . $e->getMessage());
            return ResponseHelper::sendError($response, $e->getMessage(), 500);
        }
    }

    public function getUserApplications(Request $request, Response $response): Response {
        try {
            $userId = $request->getAttribute('user_id');
            $applications = $this->adoptionService->getUserApplications($userId);
            
            return ResponseHelper::sendResponse($response, $applications);
        } catch (\Exception $e) {
            error_log("Error in getUserApplications: " . $e->getMessage());
            return ResponseHelper::sendError($response, $e->getMessage(), 500);
        }
    }
}

========================================

File: ./backend/src/api/AuthController.php
----------------------------------------
<?php
namespace PawPath\api;

use PawPath\services\AuthService;
use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use PawPath\utils\ResponseHelper;

class AuthController {
    private AuthService $authService;
    
    public function __construct() {
        $this->authService = new AuthService();
    }

    public function register(Request $request, Response $response): Response {
        try {
            $data = $request->getParsedBody();
            error_log('Registration attempt: ' . print_r($data, true));
            
            if (empty($data['email']) || empty($data['password']) || empty($data['username'])) {
                return ResponseHelper::sendError($response, 'Missing required fields', 400);
            }
            
            $result = $this->authService->register($data);
            
            // Try to send verification email
            try {
                $emailService = new EmailService();
                $emailService->sendVerificationEmail(
                    $data['email'],
                    $data['username'],
                    $result['user']['email_verification_token']
                );
            } catch (\Exception $e) {
                // Log email error but don't fail registration
                error_log('Failed to send verification email: ' . $e->getMessage());
            }
            
            return ResponseHelper::sendResponse($response, $result, 201);
            
        } catch (\Exception $e) {
            error_log('Registration error: ' . $e->getMessage());
            return ResponseHelper::sendError(
                $response, 
                $e->getMessage(), 
                $e instanceof RuntimeException ? 400 : 500
            );
        }
    }
    
    public function login(Request $request, Response $response): Response {
        try {
            $data = $request->getParsedBody();
            error_log('Login attempt for email: ' . ($data['email'] ?? 'not provided'));
            
            if (empty($data['email']) || empty($data['password'])) {
                return ResponseHelper::sendError($response, 'Email and password are required', 400);
            }
            
            $result = $this->authService->login($data);
            return ResponseHelper::sendResponse($response, $result);
            
        } catch (\Exception $e) {
            error_log('Login error: ' . $e->getMessage());
            error_log('Stack trace: ' . $e->getTraceAsString());
            return ResponseHelper::sendError(
                $response, 
                'An error occurred during login. Please try again.', 
                500
            );
        }
    }

    public function getCurrentUser(Request $request, Response $response): Response {
        try {
            $userId = $request->getAttribute('user_id');
            $user = $this->authService->getUser($userId);
            
            if (!$user) {
                throw new \RuntimeException('User not found');
            }
            
            return ResponseHelper::sendResponse($response, [
                'user' => $user
            ]);
        } catch (\Exception $e) {
            error_log('Error getting current user: ' . $e->getMessage());
            return ResponseHelper::sendError(
                $response, 
                'Failed to get user information', 
                500
            );
        }
    }

    public function verifyEmail(Request $request, Response $response): Response {
        try {
            $data = $request->getParsedBody();
            
            if (empty($data['token'])) {
                return ResponseHelper::sendError($response, 'Verification token is required', 400);
            }
            
            $result = $this->authService->verifyEmailToken($data['token']);
            return ResponseHelper::sendResponse($response, [
                'message' => 'Email verified successfully'
            ]);
        } catch (\Exception $e) {
            error_log('Email verification error: ' . $e->getMessage());
            return ResponseHelper::sendError($response, 'Failed to verify email', 500);
        }
    }

    public function resendVerification(Request $request, Response $response): Response {
        try {
            $userId = $request->getAttribute('user_id');
            $result = $this->authService->resendVerificationEmail($userId);
            
            return ResponseHelper::sendResponse($response, [
                'message' => 'Verification email sent successfully'
            ]);
        } catch (\Exception $e) {
            error_log('Resend verification error: ' . $e->getMessage());
            return ResponseHelper::sendError(
                $response, 
                'Failed to resend verification email', 
                500
            );
        }
    }
}

========================================

File: ./backend/src/api/AdminController.php
----------------------------------------
<?php
namespace PawPath\api;

use Psr\Http\Message\ResponseInterface as Response;
use Psr\Http\Message\ServerRequestInterface as Request;
use PawPath\models\User;
use PawPath\models\Shelter;
use PawPath\services\EmailService;
use PawPath\utils\ResponseHelper;
use PawPath\config\database\DatabaseConfig;
use PDO;

class AdminController {
    private User $userModel;
    private EmailService $emailService;
    private PDO $db;
    private Shelter $shelterModel;

    public function __construct() {
        $this->userModel = new User();
        $this->emailService = new EmailService();
        $this->db = DatabaseConfig::getConnection();
        $this->shelterModel = new Shelter();
    }

    public function getStats(Request $request, Response $response): Response {
        try {
            $stats = [
                'totalUsers' => $this->userModel->countUsers(),
                'totalShelters' => $this->userModel->countByRole('shelter_staff'),
                'totalPets' => count($this->userModel->findAll(['role' => 'admin'])),
                'totalApplications' => 0, // Implement this with your applications model
                'pendingApplications' => 0,
                'activeUsers' => $this->userModel->countByStatus('active'),
                'recentActivity' => [] // Implement activity logging if needed
            ];

            return ResponseHelper::sendResponse($response, $stats);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }

    public function listUsers(Request $request, Response $response): Response {
        try {
            $queryParams = $request->getQueryParams();
            $filters = [];

            // Handle search
            if (!empty($queryParams['search'])) {
                $filters['search'] = $queryParams['search'];
            }

            // Handle role filter
            if (!empty($queryParams['role']) && $queryParams['role'] !== 'all') {
                $filters['role'] = $queryParams['role'];
            }

            // Handle status filter
            if (!empty($queryParams['status']) && $queryParams['status'] !== 'all') {
                $filters['account_status'] = $queryParams['status'];
            }

            $users = $this->userModel->findAll($filters);

            return ResponseHelper::sendResponse($response, $users);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }

    public function updateUserRole(Request $request, Response $response, array $args): Response {
        try {
            $userId = (int) $args['id'];
            $data = $request->getParsedBody();

            if (empty($data['role'])) {
                throw new \InvalidArgumentException('Role is required');
            }

            $success = $this->userModel->updateRole($userId, $data['role']);

            if (!$success) {
                throw new \RuntimeException('Failed to update user role');
            }

            $updatedUser = $this->userModel->findById($userId);
            return ResponseHelper::sendResponse($response, $updatedUser);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }

    public function updateUserStatus(Request $request, Response $response, array $args): Response {
        try {
            $userId = (int) $args['id'];
            $data = $request->getParsedBody();

            if (empty($data['status'])) {
                throw new \InvalidArgumentException('Status is required');
            }

            $success = $this->userModel->updateAccountStatus($userId, $data['status']);

            if (!$success) {
                throw new \RuntimeException('Failed to update user status');
            }

            $updatedUser = $this->userModel->findById($userId);
            return ResponseHelper::sendResponse($response, $updatedUser);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }

    public function listShelters(Request $request, Response $response): Response {
        try {
            $queryParams = $request->getQueryParams();
            $filters = [];

            // Handle search
            if (!empty($queryParams['search'])) {
                $filters['search'] = $queryParams['search'];
            }

            // Handle no-kill filter
            if (isset($queryParams['is_no_kill'])) {
                $filters['is_no_kill'] = (bool)$queryParams['is_no_kill'];
            }

            $shelterModel = new \PawPath\models\Shelter();
            $shelters = $shelterModel->findAll($filters);

            // Get additional stats for each shelter
            foreach ($shelters as &$shelter) {
                // Get total pets
                $stmt = $this->db->prepare("
                    SELECT COUNT(*) FROM Pet 
                    WHERE shelter_id = ?
                ");
                $stmt->execute([$shelter['shelter_id']]);
                $shelter['total_pets'] = (int)$stmt->fetchColumn();

                // Get active applications
                $stmt = $this->db->prepare("
                    SELECT COUNT(*) FROM Adoption_Application aa
                    JOIN Pet p ON aa.pet_id = p.pet_id
                    WHERE p.shelter_id = ? 
                    AND aa.status IN ('pending', 'under_review')
                ");
                $stmt->execute([$shelter['shelter_id']]);
                $shelter['active_applications'] = (int)$stmt->fetchColumn();
            }

            return ResponseHelper::sendResponse($response, $shelters);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }

    public function createShelter(Request $request, Response $response): Response {
        try {
            $data = $request->getParsedBody();
            
            if (empty($data['name']) || empty($data['address']) || empty($data['phone']) || empty($data['email'])) {
                throw new \InvalidArgumentException('Missing required shelter information');
            }

            $shelterModel = new \PawPath\models\Shelter();
            $shelterId = $shelterModel->create($data);
            $shelter = $shelterModel->findById($shelterId);

            return ResponseHelper::sendResponse($response, $shelter);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }

    public function deleteShelter(Request $request, Response $response, array $args): Response {
        try {
            $shelterId = (int)$args['id'];
            $shelterModel = new \PawPath\models\Shelter();
            
            // Check if shelter has any pets
            $stmt = $this->db->prepare("SELECT COUNT(*) FROM Pet WHERE shelter_id = ?");
            $stmt->execute([$shelterId]);
            if ($stmt->fetchColumn() > 0) {
                throw new \RuntimeException('Cannot delete shelter with existing pets');
            }

            $success = $shelterModel->delete($shelterId);
            
            if (!$success) {
                throw new \RuntimeException('Failed to delete shelter');
            }

            return ResponseHelper::sendResponse($response, ['message' => 'Shelter deleted successfully']);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }

    public function resendVerification(Request $request, Response $response, array $args): Response {
        try {
            $userId = (int) $args['id'];
            $user = $this->userModel->findById($userId);

            if (!$user) {
                throw new \RuntimeException('User not found');
            }

            $token = $this->userModel->createEmailVerificationToken($userId);
            $this->emailService->sendVerificationEmail($user['email'], $user['username'], $token);

            return ResponseHelper::sendResponse($response, [
                'message' => 'Verification email sent successfully'
            ]);
        } catch (\Exception $e) {
            return ResponseHelper::sendError($response, $e->getMessage());
        }
    }
}

========================================

File: ./backend/src/utils/ResponseHelper.php
----------------------------------------
<?php
namespace PawPath\utils;

use Psr\Http\Message\ResponseInterface;

class ResponseHelper {
    public static function sendResponse(ResponseInterface $response, $data, int $status = 200): ResponseInterface {
        $body = json_encode([
            'success' => true,
            'data' => $data
        ]);
        
        if (json_last_error() !== JSON_ERROR_NONE) {
            error_log("JSON encode error: " . json_last_error_msg());
            return self::sendError($response, "Internal server error", 500);
        }
        
        $response->getBody()->write($body);
        
        return $response
            ->withHeader('Content-Type', 'application/json')
            ->withStatus($status);
    }

    public static function sendError(ResponseInterface $response, string $message, int $status = 400): ResponseInterface {
        $body = json_encode([
            'success' => false,
            'error' => $message
        ]);
        
        $response->getBody()->write($body);
        
        return $response
            ->withHeader('Content-Type', 'application/json')
            ->withStatus($status);
    }
}

========================================

File: ./backend/src/models/Pet.php
----------------------------------------
<?php
namespace PawPath\models;

use PDO;
use PDOException;
use PawPath\config\database\DatabaseConfig;

class Pet {
    private PDO $db;
    private static array $validSpecies = ['Dog', 'Cat', 'Bird', 'Rabbit', 'Other'];

    private function formatTraits(array $traits): array {
        $formatted = [];
        foreach ($traits as $trait) {
            $category = $trait['category'] ?? 'General';
            if (!isset($formatted[$category])) {
                $formatted[$category] = [];
            }
            $formatted[$category][] = $trait['trait_name'];
        }
        return $formatted;
    }

    private function validatePetData(array $data): void {
        $requiredFields = ['name', 'species', 'shelter_id'];
        foreach ($requiredFields as $field) {
            if (empty($data[$field])) {
                throw new \InvalidArgumentException("Missing required field: $field");
            }
        }
        
        if (!in_array(ucfirst(strtolower($data['species'])), self::$validSpecies)) {
            throw new \InvalidArgumentException("Invalid species. Must be one of: " . implode(', ', self::$validSpecies));
        }
    }
 
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
    }
    
    public function findAll(array $filters = []): array {
        try {
            $query = "
                SELECT p.*, s.name as shelter_name 
                FROM Pet p
                LEFT JOIN Shelter s ON p.shelter_id = s.shelter_id
                WHERE 1=1
            ";
            $params = [];
            
            if (isset($filters['species'])) {
                $query .= " AND p.species = ?";
                $params[] = $filters['species'];
            }
            
            if (isset($filters['shelter_id'])) {
                $query .= " AND p.shelter_id = ?";
                $params[] = $filters['shelter_id'];
            }

            if (isset($filters['breed'])) {
                $query .= " AND p.breed LIKE ?";
                $params[] = '%' . $filters['breed'] . '%';
            }

            if (isset($filters['age_min'])) {
                $query .= " AND p.age >= ?";
                $params[] = $filters['age_min'];
            }

            if (isset($filters['age_max'])) {
                $query .= " AND p.age <= ?";
                $params[] = $filters['age_max'];
            }

            if (isset($filters['gender'])) {
                $query .= " AND p.gender = ?";
                $params[] = $filters['gender'];
            }
            
            $stmt = $this->db->prepare($query);
            $stmt->execute($params);
            $pets = $stmt->fetchAll();
        
        foreach ($pets as &$pet) {
            $stmt = $this->db->prepare("
                SELECT t.trait_id, t.trait_name, tc.name as category
                FROM Pet_Trait_Relation ptr
                JOIN Pet_Trait t ON ptr.trait_id = t.trait_id
                LEFT JOIN Trait_Category tc ON t.category_id = tc.category_id
                WHERE ptr.pet_id = ?
            ");
            $stmt->execute([$pet['pet_id']]);
            $traits = $stmt->fetchAll();
            $pet['traits'] = $this->formatTraits($traits);
            }
            
            return $pets;
        } catch (PDOException $e) {
            error_log("Error finding pets: " . $e->getMessage());
            throw $e;
        }
    }

    public function findById(int $id): ?array {
        try {
            $stmt = $this->db->prepare("
                SELECT p.*, s.name as shelter_name
                FROM Pet p
                LEFT JOIN Shelter s ON p.shelter_id = s.shelter_id
                WHERE p.pet_id = ?
            ");
            
            $stmt->execute([$id]);
            $pet = $stmt->fetch();
            
            if (!$pet) {
                return null;
            }
            
            // Get pet traits with categories
            $stmt = $this->db->prepare("
                SELECT t.trait_id, t.trait_name, tc.name as category
                FROM Pet_Trait_Relation ptr
                JOIN Pet_Trait t ON ptr.trait_id = t.trait_id
                LEFT JOIN Trait_Category tc ON t.category_id = tc.category_id
                WHERE ptr.pet_id = ?
            ");
            $stmt->execute([$id]);
            $traits = $stmt->fetchAll();
            
            $pet['traits'] = $this->formatTraits($traits);
            
            return $pet;
        } catch (PDOException $e) {
            error_log("Error finding pet by ID: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function create(array $data): int {
        try {
            $this->db->beginTransaction();
            
            error_log("Starting pet creation with data: " . print_r($data, true));
            
            // Validate required fields
            $this->validatePetData($data);
            
            $stmt = $this->db->prepare("
                INSERT INTO Pet (name, species, breed, age, gender, description, shelter_id)
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ");
            
            $result = $stmt->execute([
                $data['name'],
                $data['species'],
                $data['breed'] ?? null,
                $data['age'] ?? null,
                $data['gender'] ?? null,
                $data['description'] ?? null,
                $data['shelter_id']
            ]);
            
            if (!$result) {
                error_log("SQL Error: " . print_r($stmt->errorInfo(), true));
                throw new \PDOException("Failed to insert pet");
            }
            
            $petId = (int) $this->db->lastInsertId();
            error_log("Created pet with ID: $petId");
            
            // Add traits if provided
            if (!empty($data['traits']) && is_array($data['traits'])) {
                $this->addTraitsToPet($petId, $data['traits']);
            }
            
            $this->db->commit();
            return $petId;
        } catch (\Exception $e) {
            $this->db->rollBack();
            error_log("Error in Pet::create: " . $e->getMessage() . "\n" . $e->getTraceAsString());
            throw $e;
        }
    }
    
    public function update(int $id, array $data): bool {
        try {
            $this->db->beginTransaction();
            
            $fields = [];
            $params = [];
            
            foreach ($data as $key => $value) {
                if (in_array($key, ['name', 'species', 'breed', 'age', 'gender', 'description', 'shelter_id'])) {
                    $fields[] = "$key = ?";
                    $params[] = $value;
                }
            }
            
            if (!empty($fields)) {
                $params[] = $id;
                $query = "UPDATE Pet SET " . implode(', ', $fields) . " WHERE pet_id = ?";
                
                $stmt = $this->db->prepare($query);
                $stmt->execute($params);
            }
            
            // Update traits if provided
            if (isset($data['traits']) && is_array($data['traits'])) {
                // Remove existing traits
                $stmt = $this->db->prepare("DELETE FROM Pet_Trait_Relation WHERE pet_id = ?");
                $stmt->execute([$id]);
                
                // Add new traits
                $this->addTraitsToPet($id, $data['traits']);
            }
            
            $this->db->commit();
            return true;
        } catch (PDOException $e) {
            $this->db->rollBack();
            error_log("Error updating pet: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function delete(int $id): bool {
        try {
            $this->db->beginTransaction();
            
            // Delete trait relations first
            $stmt = $this->db->prepare("DELETE FROM Pet_Trait_Relation WHERE pet_id = ?");
            $stmt->execute([$id]);
            
            // Delete pet
            $stmt = $this->db->prepare("DELETE FROM Pet WHERE pet_id = ?");
            $result = $stmt->execute([$id]);
            
            $this->db->commit();
            return $result;
        } catch (PDOException $e) {
            $this->db->rollBack();
            error_log("Error deleting pet: " . $e->getMessage());
            throw $e;
        }
    }

    public function findAllWithTraits(array $filters = []): array {
        try {
            error_log("Finding pets with filters: " . json_encode($filters, JSON_PRETTY_PRINT));
            
            // First, let's verify what traits exist in the database
            $stmt = $this->db->query("
                SELECT t.trait_id, t.trait_name, tc.name as category 
                FROM Pet_Trait t 
                LEFT JOIN Trait_Category tc ON t.category_id = tc.category_id
            ");
            error_log("Available traits: " . json_encode($stmt->fetchAll(), JSON_PRETTY_PRINT));
            
            // Then verify what pets and their traits exist
            $stmt = $this->db->query("
                SELECT p.pet_id, p.name, t.trait_name 
                FROM Pet p 
                LEFT JOIN Pet_Trait_Relation ptr ON p.pet_id = ptr.pet_id 
                LEFT JOIN Pet_Trait t ON ptr.trait_id = t.trait_id
            ");
            error_log("Existing pets and traits: " . json_encode($stmt->fetchAll(), JSON_PRETTY_PRINT));
            
            $query = "
                SELECT 
                    p.*,
                    s.name as shelter_name,
                    GROUP_CONCAT(DISTINCT t.trait_name) as trait_names,
                    COUNT(DISTINCT CASE 
                        WHEN t.trait_name IN (" . $this->buildTraitNameList($filters) . ") 
                        THEN t.trait_id 
                    END) as matching_trait_count
                FROM Pet p
                LEFT JOIN Shelter s ON p.shelter_id = s.shelter_id
                LEFT JOIN Pet_Trait_Relation ptr ON p.pet_id = ptr.pet_id
                LEFT JOIN Pet_Trait t ON ptr.trait_id = t.trait_id
                WHERE 1=1
            ";
            
            $params = [];
            
            if (!empty($filters['species'])) {
                $query .= " AND p.species = ?";
                $params[] = $filters['species'];
            }
            
            $query .= " GROUP BY p.pet_id";
            
            if (!empty($filters['traits'])) {
                $query .= " HAVING matching_trait_count > 0";
            }
            
            $query .= " ORDER BY matching_trait_count DESC, p.name";
            
            error_log("Executing query: " . $query);
            error_log("With params: " . json_encode($params));
            
            $stmt = $this->db->prepare($query);
            $stmt->execute($params);
            $pets = $stmt->fetchAll();
            
            error_log("Found pets: " . json_encode($pets, JSON_PRETTY_PRINT));
            
            foreach ($pets as &$pet) {
                $stmt = $this->db->prepare("
                    SELECT t.trait_name, tc.name as category
                    FROM Pet_Trait_Relation ptr
                    JOIN Pet_Trait t ON ptr.trait_id = t.trait_id
                    LEFT JOIN Trait_Category tc ON t.category_id = tc.category_id
                    WHERE ptr.pet_id = ?
                ");
                $stmt->execute([$pet['pet_id']]);
                $traits = $stmt->fetchAll();
                
                $pet['traits'] = [];
                foreach ($traits as $trait) {
                    $category = $trait['category'] ?? 'Uncategorized';
                    if (!isset($pet['traits'][$category])) {
                        $pet['traits'][$category] = [];
                    }
                    $pet['traits'][$category][] = $trait['trait_name'];
                }
            }
            
            return $pets;
        } catch (PDOException $e) {
            error_log("Error finding pets with traits: " . $e->getMessage());
            throw $e;
        }
    }

    private function addTraitsToPet(int $petId, array $traitIds): void {
        // First verify all traits exist
        $placeholders = str_repeat('?,', count($traitIds) - 1) . '?';
        $stmt = $this->db->prepare("
            SELECT trait_id FROM Pet_Trait 
            WHERE trait_id IN ($placeholders)
        ");
        $stmt->execute($traitIds);
        $validTraits = $stmt->fetchAll(PDO::FETCH_COLUMN);
        
        error_log("Valid traits found for pet $petId: " . implode(', ', $validTraits));
        
        if (count($validTraits) !== count($traitIds)) {
            throw new \InvalidArgumentException("Some trait IDs are invalid");
        }
        
        // Insert valid traits
        $stmt = $this->db->prepare("
            INSERT INTO Pet_Trait_Relation (pet_id, trait_id)
            VALUES (?, ?)
        ");
        
        foreach ($validTraits as $traitId) {
            $stmt->execute([$petId, $traitId]);
            error_log("Added trait $traitId to pet $petId");
        }
    }

    private function buildTraitNameList(array $filters): string {
        if (empty($filters['traits'])) {
            return "''";
        }
        
        $traitNames = array_map(function($trait) {
            return $this->db->quote($trait['trait']);
        }, $filters['traits']);
        
        // Add debugging
        error_log("Building trait list from: " . json_encode($filters['traits']));
        error_log("Generated trait list: " . implode(',', $traitNames));
        
        return implode(',', $traitNames);
    }

    private function processTraits(?string $traitsJson): array {
        if (empty($traitsJson)) {
            return [];
        }
        
        $formatted = [];
        $traits = array_filter(explode('},{', trim($traitsJson, '[]')));
        
        foreach ($traits as $trait) {
            if (!str_ends_with($trait, '}')) $trait .= '}';
            if (!str_starts_with($trait, '{')) $trait = '{' . $trait;
            
            $traitData = json_decode($trait, true);
            if ($traitData) {
                $category = $traitData['category'];
                if (!isset($formatted[$category])) {
                    $formatted[$category] = [];
                }
                $formatted[$category][] = $traitData['name'];
            }
        }
        
        return $formatted;
    }
}

========================================

File: ./backend/src/models/Shelter.php
----------------------------------------
<?php
// backend/src/models/Shelter.php

namespace PawPath\models;

use PDO;
use PDOException;
use PawPath\config\database\DatabaseConfig;

class Shelter {
    private PDO $db;
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
    }
    
    public function create(array $data): int {
        try {
            error_log("Creating new shelter: " . $data['name']);
            
            $stmt = $this->db->prepare("
                INSERT INTO Shelter (name, address, phone, email, is_no_kill)
                VALUES (?, ?, ?, ?, ?)
            ");
            
            $success = $stmt->execute([
                $data['name'],
                $data['address'],
                $data['phone'],
                $data['email'],
                $data['is_no_kill'] ?? false
            ]);
            
            if (!$success) {
                error_log("Failed to create shelter: " . print_r($stmt->errorInfo(), true));
                throw new PDOException("Failed to create shelter");
            }
            
            $shelterId = (int) $this->db->lastInsertId();
            error_log("Created shelter with ID: " . $shelterId);
            
            return $shelterId;
        } catch (PDOException $e) {
            error_log("Error creating shelter: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function findById(int $id): ?array {
        try {
            $stmt = $this->db->prepare("
                SELECT shelter_id, name, address, phone, email, is_no_kill
                FROM Shelter
                WHERE shelter_id = ?
            ");
            
            $stmt->execute([$id]);
            $shelter = $stmt->fetch();
            
            return $shelter ?: null;
        } catch (PDOException $e) {
            error_log("Error finding shelter: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function findAll(array $filters = []): array {
        try {
            $query = "SELECT shelter_id, name, address, phone, email, is_no_kill FROM Shelter WHERE 1=1";
            $params = [];
            
            // Add filter for no-kill shelters
            if (isset($filters['is_no_kill'])) {
                $query .= " AND is_no_kill = ?";
                $params[] = $filters['is_no_kill'];
            }
            
            // Add search by name
            if (!empty($filters['search'])) {
                $query .= " AND name LIKE ?";
                $params[] = '%' . $filters['search'] . '%';
            }
            
            $stmt = $this->db->prepare($query);
            $stmt->execute($params);
            
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            error_log("Error finding shelters: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function update(int $id, array $data): bool {
        try {
            $fields = [];
            $params = [];
            
            // Build update fields dynamically
            foreach (['name', 'address', 'phone', 'email', 'is_no_kill'] as $field) {
                if (isset($data[$field])) {
                    $fields[] = "$field = ?";
                    $params[] = $data[$field];
                }
            }
            
            if (empty($fields)) {
                return false;
            }
            
            $params[] = $id;
            $query = "UPDATE Shelter SET " . implode(', ', $fields) . " WHERE shelter_id = ?";
            
            $stmt = $this->db->prepare($query);
            return $stmt->execute($params);
        } catch (PDOException $e) {
            error_log("Error updating shelter: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function delete(int $id): bool {
        try {
            // First check if there are any pets associated with this shelter
            $stmt = $this->db->prepare("SELECT COUNT(*) FROM Pet WHERE shelter_id = ?");
            $stmt->execute([$id]);
            $petCount = $stmt->fetchColumn();
            
            if ($petCount > 0) {
                throw new \RuntimeException("Cannot delete shelter with existing pets");
            }
            
            $stmt = $this->db->prepare("DELETE FROM Shelter WHERE shelter_id = ?");
            return $stmt->execute([$id]);
        } catch (PDOException $e) {
            error_log("Error deleting shelter: " . $e->getMessage());
            throw $e;
        }
    }
}

========================================

File: ./backend/src/models/Product.php
----------------------------------------
<?php

namespace PawPath\models;

use PDOException;
use PDO;
use PawPath\config\database\DatabaseConfig;

class Product {
    private PDO $db;
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
    }
    
    public function create(array $data): int {
        try {
            $stmt = $this->db->prepare("
                INSERT INTO Product (
                    name,
                    description,
                    price,
                    affiliate_link
                ) VALUES (?, ?, ?, ?)
            ");
            
            $stmt->execute([
                $data['name'],
                $data['description'] ?? null,
                $data['price'],
                $data['affiliate_link'] ?? null
            ]);
            
            return (int) $this->db->lastInsertId();
        } catch (PDOException $e) {
            error_log("Error creating product: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function findById(int $id): ?array {
        try {
            $stmt = $this->db->prepare("SELECT * FROM Product WHERE product_id = ?");
            $stmt->execute([$id]);
            return $stmt->fetch() ?: null;
        } catch (PDOException $e) {
            error_log("Error finding product: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function findAll(array $filters = []): array {
        try {
            $query = "SELECT * FROM Product WHERE 1=1";
            $params = [];
            
            if (!empty($filters['search'])) {
                $query .= " AND (name LIKE ? OR description LIKE ?)";
                $searchTerm = '%' . $filters['search'] . '%';
                $params[] = $searchTerm;
                $params[] = $searchTerm;
            }
            
            if (isset($filters['price_min'])) {
                $query .= " AND price >= ?";
                $params[] = $filters['price_min'];
            }
            
            if (isset($filters['price_max'])) {
                $query .= " AND price <= ?";
                $params[] = $filters['price_max'];
            }
            
            $stmt = $this->db->prepare($query);
            $stmt->execute($params);
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            error_log("Error finding products: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function update(int $id, array $data): bool {
        try {
            $fields = [];
            $params = [];
            
            foreach (['name', 'description', 'price', 'affiliate_link'] as $field) {
                if (isset($data[$field])) {
                    $fields[] = "$field = ?";
                    $params[] = $data[$field];
                }
            }
            
            if (empty($fields)) {
                return false;
            }
            
            $params[] = $id;
            $query = "UPDATE Product SET " . implode(', ', $fields) . " WHERE product_id = ?";
            
            $stmt = $this->db->prepare($query);
            return $stmt->execute($params);
        } catch (PDOException $e) {
            error_log("Error updating product: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function delete(int $id): bool {
        try {
            $this->db->beginTransaction();
            
            // Delete blog relations first
            $stmt = $this->db->prepare("DELETE FROM Blog_Product_Relation WHERE product_id = ?");
            $stmt->execute([$id]);
            
            // Delete product
            $stmt = $this->db->prepare("DELETE FROM Product WHERE product_id = ?");
            $result = $stmt->execute([$id]);
            
            $this->db->commit();
            return $result;
        } catch (PDOException $e) {
            $this->db->rollBack();
            error_log("Error deleting product: " . $e->getMessage());
            throw $e;
        }
    }
}

========================================

File: ./backend/src/models/User.php
----------------------------------------
<?php
// backend/src/models/User.php

namespace PawPath\models;

use PDO;
use PDOException;
use PawPath\config\database\DatabaseConfig;

class User {
    private PDO $db;
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
    }
    
    public function create(array $data): int {
        try {
            error_log("Attempting to create user with username: " . $data['username']);
            
            $stmt = $this->db->prepare("
                INSERT INTO User (username, email, password_hash, registration_date)
                VALUES (?, ?, ?, CURDATE())
            ");
            
            $success = $stmt->execute([
                $data['username'],
                $data['email'],
                password_hash($data['password'], PASSWORD_DEFAULT)
            ]);
            
            if (!$success) {
                error_log("Failed to execute user creation query");
                error_log(print_r($stmt->errorInfo(), true));
                throw new PDOException("Failed to create user");
            }
            
            $userId = (int) $this->db->lastInsertId();
            error_log("Successfully created user with ID: " . $userId);
            
            return $userId;
        } catch (PDOException $e) {
            error_log("Error creating user: " . $e->getMessage());
            throw $e;
        }
    }

    public function findById(int $id): ?array {
        try {
            error_log("Looking up user with ID: " . $id);
            
            $stmt = $this->db->prepare("
                SELECT user_id, username, email, registration_date 
                FROM User 
                WHERE user_id = ?
            ");
            
            $stmt->execute([$id]);
            $user = $stmt->fetch();
            
            if ($user === false) {
                error_log("No user found with ID: " . $id);
                return null;
            }
            
            error_log("Found user: " . print_r($user, true));
            return $user;
        } catch (PDOException $e) {
            error_log("Error finding user: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function findByEmail(string $email): ?array {
        try {
            $stmt = $this->db->prepare("
                SELECT user_id, username, email, password_hash, registration_date 
                FROM User 
                WHERE email = ?
            ");
            
            $stmt->execute([$email]);
            $user = $stmt->fetch();
            
            return $user === false ? null : $user;
        } catch (PDOException $e) {
            error_log("Error finding user by email: " . $e->getMessage());
            throw $e;
        }
    }

    public function updateRole(int $userId, string $role): bool {
        try {
            $stmt = $this->db->prepare("
                UPDATE User 
                SET role = ? 
                WHERE user_id = ?
            ");
            
            return $stmt->execute([$role, $userId]);
        } catch (PDOException $e) {
            error_log("Error updating user role: " . $e->getMessage());
            throw $e;
        }
    }

    public function findAll(array $filters = []): array {
        try {
            $query = "
                SELECT user_id, username, email, role, account_status, 
                       registration_date, last_login, email_verified_at
                FROM User
                WHERE 1=1
            ";
            $params = [];

            if (!empty($filters['search'])) {
                $query .= " AND (username LIKE ? OR email LIKE ?)";
                $searchTerm = '%' . $filters['search'] . '%';
                $params[] = $searchTerm;
                $params[] = $searchTerm;
            }

            if (!empty($filters['role'])) {
                $query .= " AND role = ?";
                $params[] = $filters['role'];
            }

            if (!empty($filters['account_status'])) {
                $query .= " AND account_status = ?";
                $params[] = $filters['account_status'];
            }

            $query .= " ORDER BY registration_date DESC";

            $stmt = $this->db->prepare($query);
            $stmt->execute($params);
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            error_log("Error in findAll: " . $e->getMessage());
            throw $e;
        }
    }

    public function countUsers(): int {
        try {
            $stmt = $this->db->query("SELECT COUNT(*) FROM User");
            return (int) $stmt->fetchColumn();
        } catch (PDOException $e) {
            error_log("Error counting users: " . $e->getMessage());
            throw $e;
        }
    }

    public function countByRole(string $role): int {
        try {
            $stmt = $this->db->prepare("SELECT COUNT(*) FROM User WHERE role = ?");
            $stmt->execute([$role]);
            return (int) $stmt->fetchColumn();
        } catch (PDOException $e) {
            error_log("Error counting users by role: " . $e->getMessage());
            throw $e;
        }
    }

    public function countByStatus(string $status): int {
        try {
            $stmt = $this->db->prepare("SELECT COUNT(*) FROM User WHERE account_status = ?");
            $stmt->execute([$status]);
            return (int) $stmt->fetchColumn();
        } catch (PDOException $e) {
            error_log("Error counting users by status: " . $e->getMessage());
            throw $e;
        }
    }

    public function verifyEmail(int $userId): bool {
        try {
            $stmt = $this->db->prepare("
                UPDATE User 
                SET email_verified_at = CURRENT_TIMESTAMP,
                    email_verification_token = NULL,
                    account_status = 'active'
                WHERE user_id = ?
            ");
            
            return $stmt->execute([$userId]);
        } catch (PDOException $e) {
            error_log("Error verifying email: " . $e->getMessage());
            throw $e;
        }
    }

    public function updateAccountStatus(int $userId, string $status): bool {
        try {
            $stmt = $this->db->prepare("
                UPDATE User 
                SET account_status = ? 
                WHERE user_id = ?
            ");
            
            return $stmt->execute([$status, $userId]);
        } catch (PDOException $e) {
            error_log("Error updating account status: " . $e->getMessage());
            throw $e;
        }
    }

    public function createEmailVerificationToken(int $userId): string {
        try {
            $token = bin2hex(random_bytes(32));
            $expires = date('Y-m-d H:i:s', strtotime('+24 hours'));
            
            $stmt = $this->db->prepare("
                UPDATE User 
                SET email_verification_token = ?,
                    email_token_expires_at = ?
                WHERE user_id = ?
            ");
            
            $stmt->execute([$token, $expires, $userId]);
            return $token;
        } catch (PDOException $e) {
            error_log("Error creating email verification token: " . $e->getMessage());
            throw $e;
        }
    }

    public function updateLastLogin(int $userId): bool {
        try {
            $stmt = $this->db->prepare("
                UPDATE User 
                SET last_login = CURRENT_TIMESTAMP 
                WHERE user_id = ?
            ");
            
            return $stmt->execute([$userId]);
        } catch (PDOException $e) {
            error_log("Error updating last login: " . $e->getMessage());
            throw $e;
        }
    }
}

========================================

File: ./backend/src/models/AdoptionApplication.php
----------------------------------------
<?php
namespace PawPath\models;

use PDO;
use PDOException;
use PawPath\config\database\DatabaseConfig;

class AdoptionApplication {
    private PDO $db;
    
    public const STATUS_PENDING = 'pending';
    public const STATUS_UNDER_REVIEW = 'under_review';
    public const STATUS_APPROVED = 'approved';
    public const STATUS_REJECTED = 'rejected';
    public const STATUS_WITHDRAWN = 'withdrawn';
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
    }
    
    public function create(array $data): int {
        try {
            $stmt = $this->db->prepare("
                INSERT INTO Adoption_Application (
                    user_id, pet_id, application_date, status,
                    status_history, reason, experience, living_situation,
                    has_other_pets, other_pets_details, daily_schedule,
                    veterinarian
                ) VALUES (
                    :user_id, :pet_id, :application_date, :status,
                    :status_history, :reason, :experience, :living_situation,
                    :has_other_pets, :other_pets_details, :daily_schedule,
                    :veterinarian
                )
            ");
            
            $stmt->execute([
                'user_id' => $data['user_id'],
                'pet_id' => $data['pet_id'],
                'application_date' => $data['application_date'],
                'status' => $data['status'],
                'status_history' => $data['status_history'],
                'reason' => $data['reason'] ?? null,
                'experience' => $data['experience'] ?? null,
                'living_situation' => $data['living_situation'] ?? null,
                'has_other_pets' => $data['has_other_pets'] ? 1 : 0,
                'other_pets_details' => $data['other_pets_details'] ?? null,
                'daily_schedule' => $data['daily_schedule'] ?? null,
                'veterinarian' => $data['veterinarian'] ?? null
            ]);
            
            return (int) $this->db->lastInsertId();
        } catch (PDOException $e) {
            error_log("Error creating adoption application: " . $e->getMessage());
            throw $e;
        }
    }

    public function findById(int $id): ?array {
        try {
            $stmt = $this->db->prepare("
                SELECT aa.*, p.name as pet_name, p.species as pet_species,
                       p.breed as pet_breed, s.name as shelter_name
                FROM Adoption_Application aa
                JOIN Pet p ON aa.pet_id = p.pet_id
                JOIN Shelter s ON p.shelter_id = s.shelter_id
                WHERE aa.application_id = ?
            ");
            
            $stmt->execute([$id]);
            $result = $stmt->fetch();
            
            return $result ?: null;
        } catch (PDOException $e) {
            error_log("Error finding adoption application: " . $e->getMessage());
            throw $e;
        }
    }

    public function findByUser(int $userId): array {
        try {
            $stmt = $this->db->prepare("
                SELECT 
                    aa.application_id,
                    aa.pet_id,
                    aa.status,
                    aa.application_date,
                    p.name as pet_name,
                    p.species as pet_species,
                    p.breed as pet_breed,
                    s.name as shelter_name
                FROM Adoption_Application aa
                JOIN Pet p ON aa.pet_id = p.pet_id
                JOIN Shelter s ON p.shelter_id = s.shelter_id
                WHERE aa.user_id = ?
                ORDER BY aa.application_date DESC
            ");
            
            $stmt->execute([$userId]);
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            error_log("Error finding user's applications: " . $e->getMessage());
            throw $e;
        }
    }

    public function findByShelter(int $shelterId): array {
        try {
            $stmt = $this->db->prepare("
                SELECT aa.*, p.name as pet_name,
                       u.username as applicant_name
                FROM Adoption_Application aa
                JOIN Pet p ON aa.pet_id = p.pet_id
                JOIN User u ON aa.user_id = u.user_id
                WHERE p.shelter_id = ?
                ORDER BY aa.application_date DESC
            ");
            
            $stmt->execute([$shelterId]);
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            error_log("Error finding shelter's applications: " . $e->getMessage());
            throw $e;
        }
    }

    public function findByPet(int $petId): array {
        try {
            $stmt = $this->db->prepare("
                SELECT aa.*, u.username as applicant_name
                FROM Adoption_Application aa
                JOIN User u ON aa.user_id = u.user_id
                WHERE aa.pet_id = ?
                ORDER BY aa.application_date DESC
            ");
            
            $stmt->execute([$petId]);
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            error_log("Error finding pet's applications: " . $e->getMessage());
            throw $e;
        }
    }

    public function hasUserAppliedForPet(int $userId, int $petId): bool {
        try {
            $stmt = $this->db->prepare("
                SELECT COUNT(*) FROM Adoption_Application
                WHERE user_id = ? AND pet_id = ?
                AND status NOT IN (?, ?)
            ");
            
            $stmt->execute([
                $userId, 
                $petId, 
                self::STATUS_WITHDRAWN, 
                self::STATUS_REJECTED
            ]);
            
            return (bool) $stmt->fetchColumn();
        } catch (PDOException $e) {
            error_log("Error checking user's pet application: " . $e->getMessage());
            throw $e;
        }
    }

    public function updateStatus(int $id, string $status): bool {
        try {
            $stmt = $this->db->prepare("
                UPDATE Adoption_Application
                SET status = ?,
                    last_updated = CURRENT_TIMESTAMP
                WHERE application_id = ?
            ");
            
            return $stmt->execute([$status, $id]);
        } catch (PDOException $e) {
            error_log("Error updating application status: " . $e->getMessage());
            throw $e;
        }
    }
}

========================================

File: ./backend/src/models/PetTrait.php
----------------------------------------
<?php
// backend/src/models/PetTrait.php

namespace PawPath\models;

use PDO;
use PDOException;
use PawPath\config\database\DatabaseConfig;

class PetTrait {
    private PDO $db;
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
    }
    
    public function create(string $traitName): int {
        try {
            $stmt = $this->db->prepare("
                INSERT INTO Pet_Trait (trait_name)
                VALUES (?)
            ");
            
            $stmt->execute([$traitName]);
            return (int) $this->db->lastInsertId();
        } catch (PDOException $e) {
            error_log("Error creating pet trait: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function findAll(): array {
        try {
            $stmt = $this->db->prepare("
                SELECT trait_id, trait_name
                FROM Pet_Trait
                ORDER BY trait_name
            ");
            
            $stmt->execute();
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            error_log("Error finding pet traits: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function findById(int $id): ?array {
        try {
            $stmt = $this->db->prepare("
                SELECT trait_id, trait_name
                FROM Pet_Trait
                WHERE trait_id = ?
            ");
            
            $stmt->execute([$id]);
            $result = $stmt->fetch();
            
            return $result ?: null;
        } catch (PDOException $e) {
            error_log("Error finding pet trait: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function update(int $id, string $traitName): bool {
        try {
            $stmt = $this->db->prepare("
                UPDATE Pet_Trait
                SET trait_name = ?
                WHERE trait_id = ?
            ");
            
            return $stmt->execute([$traitName, $id]);
        } catch (PDOException $e) {
            error_log("Error updating pet trait: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function delete(int $id): bool {
        try {
            // Check if trait is in use
            $stmt = $this->db->prepare("
                SELECT COUNT(*) FROM Pet_Trait_Relation
                WHERE trait_id = ?
            ");
            $stmt->execute([$id]);
            
            if ($stmt->fetchColumn() > 0) {
                throw new \RuntimeException("Cannot delete trait that is in use");
            }
            
            $stmt = $this->db->prepare("
                DELETE FROM Pet_Trait
                WHERE trait_id = ?
            ");
            
            return $stmt->execute([$id]);
        } catch (PDOException $e) {
            error_log("Error deleting pet trait: " . $e->getMessage());
            throw $e;
        }
    }
}

========================================

File: ./backend/src/models/UserProfile.php
----------------------------------------
<?php
namespace PawPath\models;

use PDO;
use PDOException;
use PawPath\config\database\DatabaseConfig;

class UserProfile {
    private PDO $db;
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
    }
    
    public function create(array $data): int {
        try {
            $stmt = $this->db->prepare("
                INSERT INTO UserProfile (
                    user_id, first_name, last_name, phone, 
                    address, city, state, zip_code,
                    housing_type, has_yard, other_pets, household_members
                ) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?)
            ");
            
            $stmt->execute([
                $data['user_id'],
                $data['first_name'] ?? null,
                $data['last_name'] ?? null,
                $data['phone'] ?? null,
                $data['address'] ?? null,
                $data['city'] ?? null,
                $data['state'] ?? null,
                $data['zip_code'] ?? null,
                $data['housing_type'] ?? null,
                $data['has_yard'] ?? null,
                $data['other_pets'] ?? null,
                $data['household_members'] ?? null
            ]);
            
            return (int) $this->db->lastInsertId();
        } catch (PDOException $e) {
            error_log("Error creating user profile: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function findByUserId(int $userId): ?array {
        try {
            $stmt = $this->db->prepare("
                SELECT up.*, u.email, u.username, u.role, u.account_status
                FROM UserProfile up
                JOIN User u ON up.user_id = u.user_id
                WHERE up.user_id = ?
            ");
            
            $stmt->execute([$userId]);
            return $stmt->fetch() ?: null;
        } catch (PDOException $e) {
            error_log("Error finding user profile: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function update(int $userId, array $data): bool {
        try {
            $fields = [];
            $params = [];
            
            foreach ($data as $key => $value) {
                if (in_array($key, [
                    'first_name', 'last_name', 'phone', 'address', 'city',
                    'state', 'zip_code', 'housing_type', 'has_yard',
                    'other_pets', 'household_members'
                ])) {
                    $fields[] = "$key = ?";
                    $params[] = $value;
                }
            }
            
            if (empty($fields)) {
                return false;
            }
            
            $params[] = $userId;
            $query = "UPDATE UserProfile SET " . implode(', ', $fields) . " WHERE user_id = ?";
            
            $stmt = $this->db->prepare($query);
            return $stmt->execute($params);
        } catch (PDOException $e) {
            error_log("Error updating user profile: " . $e->getMessage());
            throw $e;
        }
    }

    public function updateProfileImage(int $userId, string $imageUrl): bool {
        try {
            $stmt = $this->db->prepare("
                UPDATE UserProfile 
                SET profile_image = ?
                WHERE user_id = ?
            ");
            return $stmt->execute([$imageUrl, $userId]);
        } catch (PDOException $e) {
            error_log("Error updating profile image: " . $e->getMessage());
            throw $e;
        }
    }
}

========================================

File: ./backend/src/models/PetImage.php
----------------------------------------
<?php
namespace PawPath\models;

use PDO;
use PDOException;
use PawPath\config\database\DatabaseConfig;

class PetImage {
    private PDO $db;
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
    }
    
    public function create(int $petId, string $imageUrl, bool $isPrimary = false): int {
        try {
            // If this is a primary image, unset any existing primary images
            if ($isPrimary) {
                $stmt = $this->db->prepare("
                    UPDATE Pet_Image 
                    SET is_primary = FALSE 
                    WHERE pet_id = ?
                ");
                $stmt->execute([$petId]);
            }
            
            $stmt = $this->db->prepare("
                INSERT INTO Pet_Image (pet_id, image_url, is_primary)
                VALUES (?, ?, ?)
            ");
            
            $stmt->execute([$petId, $imageUrl, $isPrimary]);
            return (int) $this->db->lastInsertId();
        } catch (PDOException $e) {
            error_log("Error creating pet image: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function findByPetId(int $petId): array {
        try {
            $stmt = $this->db->prepare("
                SELECT * FROM Pet_Image 
                WHERE pet_id = ? 
                ORDER BY is_primary DESC, created_at ASC
            ");
            
            $stmt->execute([$petId]);
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            error_log("Error finding pet images: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function setPrimary(int $imageId, int $petId): bool {
        try {
            $this->db->beginTransaction();
            
            // Unset existing primary image
            $stmt = $this->db->prepare("
                UPDATE Pet_Image 
                SET is_primary = FALSE 
                WHERE pet_id = ?
            ");
            $stmt->execute([$petId]);
            
            // Set new primary image
            $stmt = $this->db->prepare("
                UPDATE Pet_Image 
                SET is_primary = TRUE 
                WHERE image_id = ? AND pet_id = ?
            ");
            $result = $stmt->execute([$imageId, $petId]);
            
            $this->db->commit();
            return $result;
        } catch (PDOException $e) {
            $this->db->rollBack();
            error_log("Error setting primary image: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function delete(int $imageId, int $petId): bool {
        try {
            $stmt = $this->db->prepare("
                DELETE FROM Pet_Image 
                WHERE image_id = ? AND pet_id = ?
            ");
            return $stmt->execute([$imageId, $petId]);
        } catch (PDOException $e) {
            error_log("Error deleting pet image: " . $e->getMessage());
            throw $e;
        }
    }
}

========================================

File: ./backend/src/models/BlogPost.php
----------------------------------------
<?php
// src/models/BlogPost.php
namespace PawPath\models;

use PDO;
use PDOException;
use PawPath\config\database\DatabaseConfig;

class BlogPost {
    private PDO $db;
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
    }
    
    public function create(array $data): int {
        try {
            $stmt = $this->db->prepare("
                INSERT INTO Blog_Post (
                    title,
                    content,
                    publication_date,
                    author_id
                ) VALUES (?, ?, CURDATE(), ?)
            ");
            
            $stmt->execute([
                $data['title'],
                $data['content'],
                $data['author_id']
            ]);
            
            $postId = (int) $this->db->lastInsertId();
            
            // Handle product relationships if provided
            if (!empty($data['product_ids'])) {
                $this->updateProductRelations($postId, $data['product_ids']);
            }
            
            return $postId;
        } catch (PDOException $e) {
            error_log("Error creating blog post: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function findById(int $id): ?array {
        try {
            $stmt = $this->db->prepare("
                SELECT 
                    bp.*,
                    u.username as author_name
                FROM Blog_Post bp
                JOIN User u ON bp.author_id = u.user_id
                WHERE bp.post_id = ?
            ");
            
            $stmt->execute([$id]);
            $post = $stmt->fetch();
            
            if ($post) {
                // Get related products
                $stmt = $this->db->prepare("
                    SELECT p.*
                    FROM Product p
                    JOIN Blog_Product_Relation bpr ON p.product_id = bpr.product_id
                    WHERE bpr.post_id = ?
                ");
                $stmt->execute([$id]);
                $post['products'] = $stmt->fetchAll();
            }
            
            return $post ?: null;
        } catch (PDOException $e) {
            error_log("Error finding blog post: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function findAll(array $filters = []): array {
        try {
            $query = "
                SELECT 
                    bp.*,
                    u.username as author_name
                FROM Blog_Post bp
                JOIN User u ON bp.author_id = u.user_id
                WHERE 1=1
            ";
            $params = [];
            
            if (!empty($filters['search'])) {
                $query .= " AND (
                    bp.title LIKE ? OR 
                    bp.content LIKE ? OR 
                    bp.title LIKE ?
                )";
                $searchTerm = '%' . $filters['search'] . '%';
                $params[] = $searchTerm;
                $params[] = $searchTerm;
                $params[] = $searchTerm;
            }
            
            // Always order by newest first
            $query .= " ORDER BY bp.post_id DESC";
            
            $stmt = $this->db->prepare($query);
            $stmt->execute($params);
            return $stmt->fetchAll();
        } catch (PDOException $e) {
            error_log("Error finding blog posts: " . $e->getMessage());
            throw $e;
        }
    }
        
    public function update(int $id, array $data): bool {
        try {
            $this->db->beginTransaction();
            
            $fields = [];
            $params = [];
            
            if (isset($data['title'])) {
                $fields[] = "title = ?";
                $params[] = $data['title'];
            }
            
            if (isset($data['content'])) {
                $fields[] = "content = ?";
                $params[] = $data['content'];
            }
            
            if (!empty($fields)) {
                $params[] = $id;
                $query = "UPDATE Blog_Post SET " . implode(', ', $fields) . " WHERE post_id = ?";
                
                $stmt = $this->db->prepare($query);
                $stmt->execute($params);
            }
            
            // Update product relations if provided
            if (isset($data['product_ids'])) {
                $this->updateProductRelations($id, $data['product_ids']);
            }
            
            $this->db->commit();
            return true;
        } catch (PDOException $e) {
            $this->db->rollBack();
            error_log("Error updating blog post: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function delete(int $id): bool {
        try {
            $this->db->beginTransaction();
            
            // Delete product relations first
            $stmt = $this->db->prepare("DELETE FROM Blog_Product_Relation WHERE post_id = ?");
            $stmt->execute([$id]);
            
            // Delete blog post
            $stmt = $this->db->prepare("DELETE FROM Blog_Post WHERE post_id = ?");
            $result = $stmt->execute([$id]);
            
            $this->db->commit();
            return $result;
        } catch (PDOException $e) {
            $this->db->rollBack();
            error_log("Error deleting blog post: " . $e->getMessage());
            throw $e;
        }
    }
    
    private function updateProductRelations(int $postId, array $productIds): void {
        // Remove existing relations
        $stmt = $this->db->prepare("DELETE FROM Blog_Product_Relation WHERE post_id = ?");
        $stmt->execute([$postId]);
        
        // Add new relations
        $stmt = $this->db->prepare("
            INSERT INTO Blog_Product_Relation (post_id, product_id)
            VALUES (?, ?)
        ");
        
        foreach ($productIds as $productId) {
            $stmt->execute([$postId, $productId]);
        }
    }
}

========================================

File: ./backend/src/services/EmailTemplateService.php
----------------------------------------
<?php
namespace PawPath\services;

class EmailTemplateService {
    public static function getVerificationEmail(string $name, string $link): string {
        return self::getTemplate('verification', [
            'name' => $name,
            'link' => $link
        ]);
    }
    
    public static function getPasswordResetEmail(string $name, string $link): string {
        return self::getTemplate('password-reset', [
            'name' => $name,
            'link' => $link
        ]);
    }
    
    public static function getWelcomeEmail(string $name): string {
        return self::getTemplate('welcome', [
            'name' => $name
        ]);
    }
    
    public static function getAdoptionApplicationEmail(array $data): string {
        return self::getTemplate('adoption-application', $data);
    }
    
    private static function getTemplate(string $name, array $data): string {
        $template = file_get_contents(__DIR__ . "/../templates/emails/{$name}.html");
        
        foreach ($data as $key => $value) {
            $template = str_replace("{{" . $key . "}}", $value, $template);
        }
        
        return $template;
    }
}

========================================

File: ./backend/src/services/ProductService.php
----------------------------------------
<?php

namespace PawPath\services;

use PawPath\models\Product;
use RuntimeException;

class ProductService {
    private Product $productModel;
    
    public function __construct() {
        $this->productModel = new Product();
    }
    
    public function createProduct(array $data): array {
        // Validate required fields
        if (empty($data['name']) || !isset($data['price'])) {
            throw new RuntimeException("Name and price are required");
        }
        
        // Validate price
        if ($data['price'] < 0) {
            throw new RuntimeException("Price cannot be negative");
        }
        
        // Create product
        $productId = $this->productModel->create($data);
        return $this->productModel->findById($productId);
    }
    
    public function getProduct(int $id): array {
        $product = $this->productModel->findById($id);
        if (!$product) {
            throw new RuntimeException("Product not found");
        }
        return $product;
    }
    
    public function listProducts(array $filters = []): array {
        // Validate price filters
        if (isset($filters['price_min']) && $filters['price_min'] < 0) {
            throw new RuntimeException("Minimum price cannot be negative");
        }
        
        if (isset($filters['price_max']) && $filters['price_max'] < 0) {
            throw new RuntimeException("Maximum price cannot be negative");
        }
        
        if (isset($filters['price_min'], $filters['price_max']) 
            && $filters['price_min'] > $filters['price_max']) {
            throw new RuntimeException("Minimum price cannot be greater than maximum price");
        }
        
        return $this->productModel->findAll($filters);
    }
    
    public function updateProduct(int $id, array $data): array {
        // Verify product exists
        $product = $this->productModel->findById($id);
        if (!$product) {
            throw new RuntimeException("Product not found");
        }
        
        // Validate price if provided
        if (isset($data['price']) && $data['price'] < 0) {
            throw new RuntimeException("Price cannot be negative");
        }
        
        // Update product
        $this->productModel->update($id, $data);
        return $this->productModel->findById($id);
    }
    
    public function deleteProduct(int $id): void {
        // Verify product exists
        $product = $this->productModel->findById($id);
        if (!$product) {
            throw new RuntimeException("Product not found");
        }
        
        // Delete product
        if (!$this->productModel->delete($id)) {
            throw new RuntimeException("Failed to delete product");
        }
    }
}

========================================

File: ./backend/src/services/ImageUploadService.php
----------------------------------------
<?php
namespace PawPath\services;

class ImageUploadService {
    private string $uploadPath;
    
    public function __construct() {
        // Set absolute path to uploads directory
        $this->uploadPath = __DIR__ . '/../../public/uploads/images';
        
        // Ensure the upload directories exist
        $this->ensureUploadDirectoryExists($this->uploadPath . '/profiles');
    }
    
    private function ensureUploadDirectoryExists(string $path): void {
        if (!file_exists($path)) {
            if (!mkdir($path, 0755, true)) {
                throw new \RuntimeException("Failed to create upload directory: $path");
            }
        }
        
        if (!is_writable($path)) {
            throw new \RuntimeException("Upload directory is not writable: $path");
        }
    }

    public function uploadProfileImage(array $file): string {
        if ($file['error'] !== UPLOAD_ERR_OK) {
            throw new \RuntimeException('File upload failed with error code: ' . $file['error']);
        }
        
        $fileInfo = new \finfo(FILEINFO_MIME_TYPE);
        $mimeType = $fileInfo->file($file['tmp_name']);
        
        if (!in_array($mimeType, ['image/jpeg', 'image/png', 'image/webp'])) {
            throw new \RuntimeException('Invalid file type. Only JPEG, PNG, and WebP images are allowed.');
        }
        
        $extension = match($mimeType) {
            'image/jpeg' => 'jpg',
            'image/png' => 'png',
            'image/webp' => 'webp',
            default => throw new \RuntimeException('Unsupported image type')
        };
        
        $filename = 'profile_' . bin2hex(random_bytes(16)) . '.' . $extension;
        $filepath = $this->uploadPath . '/profiles/' . $filename;
        
        if (!move_uploaded_file($file['tmp_name'], $filepath)) {
            throw new \RuntimeException('Failed to move uploaded file');
        }
        
        // Make sure this URL is correct for your setup
        return '/uploads/images/profiles/' . $filename;
    }

    public function deleteImage(string $filepath): bool {
        $fullPath = $this->uploadPath . '/' . basename($filepath);
        if (file_exists($fullPath)) {
            return unlink($fullPath);
        }
        return false;
    }
}

========================================

File: ./backend/src/services/AdoptionService.php
----------------------------------------
<?php
namespace PawPath\services;

use PDO;
use PDOException;
use PawPath\config\database\DatabaseConfig;

class AdoptionService {
    private PDO $db;
    
    public function __construct() {
        try {
            $this->db = DatabaseConfig::getConnection();
        } catch (\Exception $e) {
            error_log("Error initializing AdoptionService: " . $e->getMessage());
            throw $e;
        }
    }

    public function createApplication(array $data): array {
        try {
            $this->db->beginTransaction();
            
            $stmt = $this->db->prepare("
                INSERT INTO Adoption_Application (
                    user_id, 
                    pet_id, 
                    status,
                    reason,
                    experience,
                    living_situation,
                    has_other_pets,
                    other_pets_details,
                    daily_schedule,
                    veterinarian
                ) VALUES (
                    :user_id,
                    :pet_id,
                    'pending',
                    :reason,
                    :experience,
                    :living_situation,
                    :has_other_pets,
                    :other_pets_details,
                    :daily_schedule,
                    :veterinarian
                )
            ");

            $result = $stmt->execute([
                ':user_id' => $data['user_id'],
                ':pet_id' => $data['pet_id'],
                ':reason' => $data['reason'] ?? null,
                ':experience' => $data['experience'] ?? null,
                ':living_situation' => $data['living_situation'] ?? null,
                ':has_other_pets' => $data['has_other_pets'] ?? false,
                ':other_pets_details' => $data['other_pets_details'] ?? null,
                ':daily_schedule' => $data['daily_schedule'] ?? null,
                ':veterinarian' => $data['veterinarian'] ?? null
            ]);

            if (!$result) {
                throw new \Exception("Failed to create application");
            }

            $applicationId = $this->db->lastInsertId();
            $this->db->commit();

            return $this->getApplication($applicationId);
        } catch (\Exception $e) {
            $this->db->rollBack();
            error_log("Error in createApplication: " . $e->getMessage());
            throw $e;
        }
    }

    public function getApplication(int $applicationId): array {
        try {
            $stmt = $this->db->prepare("
                SELECT 
                    aa.*,
                    p.name as pet_name,
                    p.species as pet_species,
                    p.breed as pet_breed,
                    s.name as shelter_name
                FROM Adoption_Application aa
                JOIN Pet p ON aa.pet_id = p.pet_id
                JOIN Shelter s ON p.shelter_id = s.shelter_id
                WHERE aa.application_id = ?
            ");
            
            $stmt->execute([$applicationId]);
            $application = $stmt->fetch(PDO::FETCH_ASSOC);
            
            if (!$application) {
                throw new \Exception("Application not found");
            }
            
            return $application;
        } catch (\Exception $e) {
            error_log("Error in getApplication: " . $e->getMessage());
            throw $e;
        }
    }

    public function getUserApplications(int $userId): array {
        try {
            $stmt = $this->db->prepare("
                SELECT 
                    aa.*,
                    p.name as pet_name,
                    p.species as pet_species,
                    p.breed as pet_breed,
                    s.name as shelter_name
                FROM Adoption_Application aa
                JOIN Pet p ON aa.pet_id = p.pet_id
                JOIN Shelter s ON p.shelter_id = s.shelter_id
                WHERE aa.user_id = ?
                ORDER BY aa.application_date DESC
            ");
            
            $stmt->execute([$userId]);
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (\Exception $e) {
            error_log("Error in getUserApplications: " . $e->getMessage());
            throw $e;
        }
    }

    public function updateApplicationStatus(int $applicationId, string $status): bool {
        try {
            $validStatuses = ['pending', 'under_review', 'approved', 'rejected', 'withdrawn'];
            if (!in_array($status, $validStatuses)) {
                throw new \Exception("Invalid status");
            }

            $stmt = $this->db->prepare("
                UPDATE Adoption_Application 
                SET status = :status,
                    last_updated = CURRENT_TIMESTAMP
                WHERE application_id = :application_id
            ");

            return $stmt->execute([
                ':status' => $status,
                ':application_id' => $applicationId
            ]);
        } catch (\Exception $e) {
            error_log("Error in updateApplicationStatus: " . $e->getMessage());
            throw $e;
        }
    }
}

========================================

File: ./backend/src/services/FavoriteService.php
----------------------------------------
<?php
namespace PawPath\services;

use PDO;
use RuntimeException;
use PawPath\config\database\DatabaseConfig;

class FavoriteService {
    private PDO $db;
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
    }
    
    public function addFavorite(int $userId, int $petId): array {
        try {
            // Check if favorite already exists
            $stmt = $this->db->prepare("
                SELECT favorite_id FROM Pet_Favorite
                WHERE user_id = ? AND pet_id = ?
            ");
            $stmt->execute([$userId, $petId]);
            
            if ($stmt->fetch()) {
                throw new RuntimeException('Pet is already favorited');
            }
            
            // Add favorite
            $stmt = $this->db->prepare("
                INSERT INTO Pet_Favorite (user_id, pet_id)
                VALUES (?, ?)
            ");
            
            $stmt->execute([$userId, $petId]);
            
            return [
                'favorite_id' => $this->db->lastInsertId(),
                'user_id' => $userId,
                'pet_id' => $petId
            ];
        } catch (\PDOException $e) {
            throw new RuntimeException('Failed to add favorite: ' . $e->getMessage());
        }
    }
    
    public function removeFavorite(int $userId, int $petId): bool {
        try {
            $stmt = $this->db->prepare("
                DELETE FROM Pet_Favorite
                WHERE user_id = ? AND pet_id = ?
            ");
            
            $stmt->execute([$userId, $petId]);
            return $stmt->rowCount() > 0;
        } catch (\PDOException $e) {
            throw new RuntimeException('Failed to remove favorite: ' . $e->getMessage());
        }
    }
    
    public function getUserFavorites(int $userId): array {
        try {
            // First get the basic pet information
            $stmt = $this->db->prepare("
                SELECT DISTINCT 
                    p.*,
                    s.name as shelter_name,
                    pf.created_at as favorited_at
                FROM Pet_Favorite pf
                JOIN Pet p ON pf.pet_id = p.pet_id
                JOIN Shelter s ON p.shelter_id = s.shelter_id
                WHERE pf.user_id = ?
                ORDER BY pf.created_at DESC
            ");
            
            $stmt->execute([$userId]);
            $pets = $stmt->fetchAll();
            
            // For each pet, get its traits
            foreach ($pets as &$pet) {
                $stmt = $this->db->prepare("
                    SELECT t.trait_name, tc.name as category
                    FROM Pet_Trait_Relation ptr
                    JOIN Pet_Trait t ON ptr.trait_id = t.trait_id
                    LEFT JOIN Trait_Category tc ON t.category_id = tc.category_id
                    WHERE ptr.pet_id = ?
                ");
                
                $stmt->execute([$pet['pet_id']]);
                $traits = $stmt->fetchAll();
                
                // Format traits by category
                $formattedTraits = [];
                foreach ($traits as $trait) {
                    $category = $trait['category'] ?? 'General';
                    if (!isset($formattedTraits[$category])) {
                        $formattedTraits[$category] = [];
                    }
                    $formattedTraits[$category][] = $trait['trait_name'];
                }
                
                $pet['traits'] = $formattedTraits;
            }
            
            return $pets;
        } catch (\PDOException $e) {
            throw new RuntimeException('Failed to get favorites: ' . $e->getMessage());
        }
    }
    
    public function isFavorited(int $userId, int $petId): bool {
        try {
            $stmt = $this->db->prepare("
                SELECT 1 FROM Pet_Favorite
                WHERE user_id = ? AND pet_id = ?
            ");
            
            $stmt->execute([$userId, $petId]);
            return (bool) $stmt->fetch();
        } catch (\PDOException $e) {
            throw new RuntimeException('Failed to check favorite status: ' . $e->getMessage());
        }
    }
}

========================================

File: ./backend/src/services/ShelterService.php
----------------------------------------
<?php
namespace PawPath\services;

use PDO;
use PDOException;
use PawPath\config\database\DatabaseConfig;

class ShelterService {
    private PDO $db;
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
    }
    
    public function listShelters(array $filters = []): array {
        try {
            $query = "SELECT * FROM Shelter WHERE 1=1";
            $params = [];
            
            if (!empty($filters['search'])) {
                $query .= " AND (name LIKE ? OR address LIKE ?)";
                $searchTerm = '%' . $filters['search'] . '%';
                $params[] = $searchTerm;
                $params[] = $searchTerm;
            }
            
            if (isset($filters['is_no_kill'])) {
                $query .= " AND is_no_kill = ?";
                $params[] = $filters['is_no_kill'];
            }
            
            $query .= " ORDER BY name ASC";
            
            $stmt = $this->db->prepare($query);
            $stmt->execute($params);
            
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            error_log("Database error in listShelters: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function getShelter(int $id): ?array {
        try {
            error_log("Fetching shelter with ID: $id");
            
            $stmt = $this->db->prepare("
                SELECT 
                    s.*
                FROM Shelter s
                WHERE s.shelter_id = ?
            ");
            
            $stmt->execute([$id]);
            $shelter = $stmt->fetch(PDO::FETCH_ASSOC);
            
            if ($shelter) {
                error_log("Found shelter: " . json_encode($shelter));
                // Convert is_no_kill to boolean
                $shelter['is_no_kill'] = (bool) $shelter['is_no_kill'];
                return $shelter;
            }
            
            error_log("No shelter found with ID: $id");
            return null;
            
        } catch (PDOException $e) {
            error_log("Database error in getShelter: " . $e->getMessage());
            throw new \RuntimeException("Failed to fetch shelter details: " . $e->getMessage());
        }
    }

    public function getShelterStats(int $userId): array {
        try {
            // First get the shelter ID for this staff member
            $stmt = $this->db->prepare("
                SELECT shelter_id 
                FROM ShelterStaff 
                WHERE user_id = ?
            ");
            $stmt->execute([$userId]);
            $shelterId = $stmt->fetchColumn();

            if (!$shelterId) {
                throw new \RuntimeException('User is not associated with any shelter');
            }

            // Get total pets
            $stmt = $this->db->prepare("
                SELECT COUNT(*) 
                FROM Pet 
                WHERE shelter_id = ?
            ");
            $stmt->execute([$shelterId]);
            $totalPets = (int) $stmt->fetchColumn();

            // Get active applications
            $stmt = $this->db->prepare("
                SELECT COUNT(DISTINCT aa.application_id) 
                FROM Adoption_Application aa
                JOIN Pet p ON aa.pet_id = p.pet_id
                WHERE p.shelter_id = ? 
                AND aa.status IN ('pending', 'under_review')
            ");
            $stmt->execute([$shelterId]);
            $activeApplications = (int) $stmt->fetchColumn();

            // Get adopted pets (approved applications)
            $stmt = $this->db->prepare("
                SELECT COUNT(DISTINCT aa.application_id) 
                FROM Adoption_Application aa
                JOIN Pet p ON aa.pet_id = p.pet_id
                WHERE p.shelter_id = ? 
                AND aa.status = 'approved'
            ");
            $stmt->execute([$shelterId]);
            $adoptedPets = (int) $stmt->fetchColumn();

            return [
                'shelterId' => $shelterId,
                'totalPets' => $totalPets,
                'activeApplications' => $activeApplications,
                'adoptedPets' => $adoptedPets
            ];
        } catch (PDOException $e) {
            error_log("Error getting shelter stats: " . $e->getMessage());
            throw $e;
        }
    }

    public function getShelterPets(int $shelterId): array {
        try {
            $stmt = $this->db->prepare("
                SELECT p.*, 
                       s.name as shelter_name,
                       COUNT(DISTINCT aa.application_id) as application_count
                FROM Pet p
                LEFT JOIN Shelter s ON p.shelter_id = s.shelter_id
                LEFT JOIN Adoption_Application aa ON p.pet_id = aa.pet_id AND aa.status IN ('pending', 'under_review')
                WHERE p.shelter_id = ?
                GROUP BY p.pet_id
                ORDER BY p.pet_id DESC
            ");
            $stmt->execute([$shelterId]);
            return $stmt->fetchAll(PDO::FETCH_ASSOC);
        } catch (PDOException $e) {
            error_log("Error getting shelter pets: " . $e->getMessage());
            throw $e;
        }
    }

    public function getTotalPets(int $shelterId): int {
        try {
            $stmt = $this->db->prepare("
                SELECT COUNT(*) 
                FROM Pet 
                WHERE shelter_id = ?
            ");
            
            $stmt->execute([$shelterId]);
            return (int) $stmt->fetchColumn();
            
        } catch (PDOException $e) {
            error_log("Error getting total pets: " . $e->getMessage());
            return 0;
        }
    }

    public function getActiveApplications(int $shelterId): int {
        try {
            $stmt = $this->db->prepare("
                SELECT COUNT(DISTINCT aa.application_id) 
                FROM Adoption_Application aa
                JOIN Pet p ON aa.pet_id = p.pet_id
                WHERE p.shelter_id = ? 
                AND aa.status IN ('pending', 'under_review')
            ");
            
            $stmt->execute([$shelterId]);
            return (int) $stmt->fetchColumn();
            
        } catch (PDOException $e) {
            error_log("Error getting active applications: " . $e->getMessage());
            return 0;
        }
    }

    public function createShelter(array $data): array {
        try {
            $this->db->beginTransaction();

            $stmt = $this->db->prepare("
                INSERT INTO Shelter (
                    name, 
                    address, 
                    phone, 
                    email, 
                    is_no_kill
                ) VALUES (
                    :name,
                    :address,
                    :phone,
                    :email,
                    :is_no_kill
                )
            ");

            $stmt->execute([
                ':name' => $data['name'],
                ':address' => $data['address'],
                ':phone' => $data['phone'],
                ':email' => $data['email'],
                ':is_no_kill' => $data['is_no_kill'] ?? false
            ]);

            $shelterId = $this->db->lastInsertId();
            $this->db->commit();

            return $this->getShelter($shelterId);
        } catch (PDOException $e) {
            $this->db->rollBack();
            error_log("Database error in createShelter: " . $e->getMessage());
            throw $e;
        }
    }

    public function updateShelter(int $id, array $data): bool {
        try {
            $this->db->beginTransaction();

            $fields = [];
            $params = [];
            
            foreach (['name', 'address', 'phone', 'email', 'is_no_kill'] as $field) {
                if (isset($data[$field])) {
                    $fields[] = "$field = ?";
                    $params[] = $data[$field];
                }
            }
            
            if (empty($fields)) {
                return false;
            }

            $params[] = $id;
            $query = "UPDATE Shelter SET " . implode(', ', $fields) . " WHERE shelter_id = ?";
            
            $stmt = $this->db->prepare($query);
            $result = $stmt->execute($params);

            $this->db->commit();
            return $result;
        } catch (PDOException $e) {
            $this->db->rollBack();
            error_log("Database error in updateShelter: " . $e->getMessage());
            throw $e;
        }
    }

    public function deleteShelter(int $id): bool {
        try {
            $this->db->beginTransaction();

            // First check if there are any pets
            $petCount = $this->getTotalPets($id);
            if ($petCount > 0) {
                throw new \RuntimeException("Cannot delete shelter with existing pets");
            }

            $stmt = $this->db->prepare("DELETE FROM Shelter WHERE shelter_id = ?");
            $result = $stmt->execute([$id]);

            $this->db->commit();
            return $result;
        } catch (PDOException $e) {
            $this->db->rollBack();
            error_log("Database error in deleteShelter: " . $e->getMessage());
            throw $e;
        }
    }
}

========================================

File: ./backend/src/services/UserRoleService.php
----------------------------------------
<?php
namespace PawPath\services;

use PawPath\config\database\DatabaseConfig;
use PawPath\models\User;
use RuntimeException;
use PDO;

class UserRoleService {
    private PDO $db;
    private User $userModel;
    
    private const VALID_ROLES = ['adopter', 'shelter_staff', 'admin'];
    private const ROLE_HIERARCHY = [
        'admin' => ['admin', 'shelter_staff', 'adopter'],
        'shelter_staff' => ['shelter_staff', 'adopter'],
        'adopter' => ['adopter']
    ];
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
        $this->userModel = new User();
    }
    
    public function changeUserRole(int $userId, string $newRole, int $changedBy, string $reason = null): bool {
        try {
            // Start transaction
            $this->db->beginTransaction();
            
            // Get user's current role
            $user = $this->userModel->findById($userId);
            if (!$user) {
                throw new RuntimeException('User not found');
            }
            
            // Get admin user making the change
            $admin = $this->userModel->findById($changedBy);
            if (!$admin) {
                throw new RuntimeException('Admin user not found');
            }
            
            // Validate role change permissions
            if (!$this->canChangeRole($admin['role'], $user['role'], $newRole)) {
                throw new RuntimeException('Insufficient permissions to change role');
            }
            
            // Update user's role
            $stmt = $this->db->prepare("
                UPDATE User 
                SET role = ? 
                WHERE user_id = ?
            ");
            
            $stmt->execute([$newRole, $userId]);
            
            // Log the role change
            $stmt = $this->db->prepare("
                INSERT INTO RoleChangeLog (
                    user_id, old_role, new_role, 
                    changed_by, reason
                ) VALUES (?, ?, ?, ?, ?)
            ");
            
            $stmt->execute([
                $userId,
                $user['role'],
                $newRole,
                $changedBy,
                $reason
            ]);
            
            // If changing to shelter staff, may need additional setup
            if ($newRole === 'shelter_staff') {
                // Handle shelter staff specific setup here
                // e.g., default shelter assignment
            }
            
            $this->db->commit();
            return true;
            
        } catch (\Exception $e) {
            $this->db->rollBack();
            throw $e;
        }
    }
    
    public function assignToShelter(int $userId, int $shelterId, string $position = 'staff'): bool {
        try {
            $this->db->beginTransaction();
            
            // Verify user is shelter_staff
            $user = $this->userModel->findById($userId);
            if ($user['role'] !== 'shelter_staff') {
                throw new RuntimeException('User must be shelter staff');
            }
            
            // Add shelter staff relationship
            $stmt = $this->db->prepare("
                INSERT INTO ShelterStaff (
                    shelter_id, user_id, position
                ) VALUES (?, ?, ?)
                ON DUPLICATE KEY UPDATE position = ?
            ");
            
            $stmt->execute([$shelterId, $userId, $position, $position]);
            
            $this->db->commit();
            return true;
            
        } catch (\Exception $e) {
            $this->db->rollBack();
            throw $e;
        }
    }
    
    public function getUsersByRole(string $role): array {
        $stmt = $this->db->prepare("
            SELECT user_id, username, email, registration_date, account_status
            FROM User 
            WHERE role = ?
            ORDER BY username
        ");
        
        $stmt->execute([$role]);
        return $stmt->fetchAll();
    }
    
    private function canChangeRole(string $adminRole, string $currentRole, string $newRole): bool {
        // Only admins can change roles
        if ($adminRole !== 'admin') {
            return false;
        }
        
        // Validate role exists
        if (!in_array($newRole, self::VALID_ROLES)) {
            return false;
        }
        
        // Special case: can't change own role or other admins
        if ($currentRole === 'admin') {
            return false;
        }
        
        return true;
    }
}

========================================

File: ./backend/src/services/AuthService.php
----------------------------------------
<?php
namespace PawPath\services;

use PDO;
use RuntimeException;
use Firebase\JWT\JWT;
use Firebase\JWT\Key;
use PawPath\config\database\DatabaseConfig;

class AuthService {
    private PDO $db;
    private string $jwtSecret;
    
    public function __construct() {
        $this->db = DatabaseConfig::getConnection();
        $this->jwtSecret = $_ENV['JWT_SECRET'] ?? throw new RuntimeException('JWT_SECRET not set');
    }
    
    public function register(array $data): array {
        try {
            // Validate required fields
            if (empty($data['username']) || empty($data['email']) || empty($data['password'])) {
                throw new RuntimeException('Missing required fields');
            }

            // Check if email already exists
            $stmt = $this->db->prepare("
                SELECT user_id FROM User WHERE email = ?
            ");
            $stmt->execute([$data['email']]);
            if ($stmt->fetch()) {
                throw new RuntimeException('Email already registered');
            }

            // Check if username already exists
            $stmt = $this->db->prepare("
                SELECT user_id FROM User WHERE username = ?
            ");
            $stmt->execute([$data['username']]);
            if ($stmt->fetch()) {
                throw new RuntimeException('Username already taken');
            }

            // Create user
            $stmt = $this->db->prepare("
                INSERT INTO User (
                    username, 
                    email, 
                    password_hash, 
                    registration_date,
                    role,
                    account_status,
                    email_verification_token,
                    email_token_expires_at
                ) VALUES (?, ?, ?, CURRENT_TIMESTAMP, 'adopter', 'pending', ?, DATE_ADD(NOW(), INTERVAL 24 HOUR))
            ");

            $verificationToken = bin2hex(random_bytes(32));
            $passwordHash = password_hash($data['password'], PASSWORD_DEFAULT);

            $stmt->execute([
                $data['username'],
                $data['email'],
                $passwordHash,
                $verificationToken
            ]);

            $userId = (int) $this->db->lastInsertId();

            // Get the created user
            $user = $this->getUser($userId);
            if (!$user) {
                throw new RuntimeException('Failed to create user');
            }

            // Generate JWT token
            $token = $this->generateToken($userId);

            // Return user data and token
            return [
                'user' => $user,
                'token' => $token
            ];

        } catch (\PDOException $e) {
            error_log("Database error during registration: " . $e->getMessage());
            throw new RuntimeException('Registration failed: Database error');
        } catch (\Exception $e) {
            error_log("Registration error: " . $e->getMessage());
            throw $e;
        }
    }

    public function login(array $data): array {
        try {
            if (empty($data['email']) || empty($data['password'])) {
                throw new RuntimeException('Email and password are required');
            }

            // Find user
            $stmt = $this->db->prepare("
                SELECT 
                    user_id, 
                    username, 
                    email, 
                    password_hash, 
                    role, 
                    account_status
                FROM User 
                WHERE email = ?
            ");
            
            $stmt->execute([$data['email']]);
            $user = $stmt->fetch(PDO::FETCH_ASSOC);
            
            if (!$user) {
                throw new RuntimeException('Invalid credentials');
            }

            if (!password_verify($data['password'], $user['password_hash'])) {
                throw new RuntimeException('Invalid credentials');
            }
            
            // Remove sensitive data
            unset($user['password_hash']);
            
            // Generate token
            $token = $this->generateToken($user['user_id']);
            
            // Update last login
            $this->updateLastLogin($user['user_id']);
            
            return [
                'token' => $token,
                'user' => $user
            ];
        } catch (\Exception $e) {
            error_log('Login error in service: ' . $e->getMessage());
            throw $e;
        }
    }
    
    public function getUser(int $userId): ?array {
        try {
            $stmt = $this->db->prepare("
                SELECT 
                    user_id,
                    username,
                    email,
                    role,
                    account_status,
                    registration_date,
                    last_login
                FROM User 
                WHERE user_id = ?
            ");
            
            $stmt->execute([$userId]);
            return $stmt->fetch(PDO::FETCH_ASSOC);
        } catch (\PDOException $e) {
            error_log("Database error while fetching user: " . $e->getMessage());
            throw new RuntimeException('Failed to fetch user data');
        }
    }

    public function createEmailVerificationToken(int $userId): string {
        try {
            $token = bin2hex(random_bytes(32));
            $stmt = $this->db->prepare("
                UPDATE User 
                SET email_verification_token = ?,
                    email_token_expires_at = DATE_ADD(NOW(), INTERVAL 24 HOUR)
                WHERE user_id = ?
            ");
            
            $stmt->execute([$token, $userId]);
            return $token;
        } catch (\Exception $e) {
            error_log("Error creating verification token: " . $e->getMessage());
            throw new RuntimeException('Failed to create verification token');
        }
    }

    public function verifyEmailToken(string $token): bool {
        try {
            $stmt = $this->db->prepare("
                UPDATE User 
                SET email_verified_at = CURRENT_TIMESTAMP,
                    account_status = 'active',
                    email_verification_token = NULL
                WHERE email_verification_token = ?
                AND email_token_expires_at > CURRENT_TIMESTAMP
                AND email_verified_at IS NULL
            ");
            
            $stmt->execute([$token]);
            return $stmt->rowCount() > 0;
        } catch (\PDOException $e) {
            error_log("Database error during email verification: " . $e->getMessage());
            throw new RuntimeException('Failed to verify email');
        }
    }

    public function generateToken(int $userId): string {
        $payload = [
            'user_id' => $userId,
            'iat' => time(),
            'exp' => time() + (24 * 60 * 60) // 24 hours
        ];
        
        return JWT::encode($payload, $this->jwtSecret, 'HS256');
    }
    
    public function validateToken(string $token): ?array {
        try {
            return (array) JWT::decode($token, new Key($this->jwtSecret, 'HS256'));
        } catch (\Exception $e) {
            error_log('Token validation error: ' . $e->getMessage());
            return null;
        }
    }

    public function resendVerificationEmail(int $userId): bool {
        try {
            // Check if user exists and needs verification
            $stmt = $this->db->prepare("
                SELECT email, username, email_verified_at 
                FROM User 
                WHERE user_id = ?
            ");
            $stmt->execute([$userId]);
            $user = $stmt->fetch(PDO::FETCH_ASSOC);

            if (!$user) {
                throw new RuntimeException('User not found');
            }

            if ($user['email_verified_at']) {
                throw new RuntimeException('Email already verified');
            }

            // Create new verification token
            $token = $this->createEmailVerificationToken($userId);

            // Send verification email
            $emailService = new EmailService();
            return $emailService->sendVerificationEmail(
                $user['email'],
                $user['username'],
                $token
            );
        } catch (\Exception $e) {
            error_log("Error resending verification email: " . $e->getMessage());
            throw $e;
        }
    }
    
    private function updateLastLogin(int $userId): void {
        try {
            $stmt = $this->db->prepare("
                UPDATE User 
                SET last_login = CURRENT_TIMESTAMP 
                WHERE user_id = ?
            ");
            $stmt->execute([$userId]);
        } catch (\PDOException $e) {
            error_log("Error updating last login: " . $e->getMessage());
            // Non-critical error, don't throw
        }
    }
}

========================================

File: ./backend/src/services/PetService.php
----------------------------------------
<?php
namespace PawPath\services;

use PDO;
use PDOException;
use PawPath\config\database\DatabaseConfig as DbConfig;  // Use an alias to avoid conflict

class PetService {
    private PDO $db;
    
    public function __construct() {
        $this->db = DbConfig::getConnection();  // Use the alias here
    }

    public function getPet(int $id): array {
        try {
            $stmt = $this->db->prepare("
                SELECT p.*, s.name as shelter_name
                FROM Pet p
                LEFT JOIN Shelter s ON p.shelter_id = s.shelter_id
                WHERE p.pet_id = ?
            ");
            
            $stmt->execute([$id]);
            $pet = $stmt->fetch(PDO::FETCH_ASSOC);
            
            if (!$pet) {
                throw new \RuntimeException("Pet not found");
            }
            
            // Get images
            $stmt = $this->db->prepare("
                SELECT image_id, image_url as url, is_primary
                FROM Pet_Image
                WHERE pet_id = ?
                ORDER BY is_primary DESC, image_id ASC
            ");
            $stmt->execute([$id]);
            $pet['images'] = $stmt->fetchAll(PDO::FETCH_ASSOC);
            
            error_log("Pet data with images: " . print_r($pet, true));
            
            // Get traits
            $stmt = $this->db->prepare("
                SELECT t.trait_name, tc.name as category
                FROM Pet_Trait_Relation ptr
                JOIN Pet_Trait t ON ptr.trait_id = t.trait_id
                LEFT JOIN Trait_Category tc ON t.category_id = tc.category_id
                WHERE ptr.pet_id = ?
            ");
            $stmt->execute([$id]);
            $traits = $stmt->fetchAll(PDO::FETCH_ASSOC);
            
            $formattedTraits = [];
            foreach ($traits as $trait) {
                $category = $trait['category'] ?? 'General';
                if (!isset($formattedTraits[$category])) {
                    $formattedTraits[$category] = [];
                }
                $formattedTraits[$category][] = $trait['trait_name'];
            }
            
            $pet['traits'] = $formattedTraits;
            
            return $pet;
        } catch (PDOException $e) {
            error_log("Database error finding pet: " . $e->getMessage());
            throw new \RuntimeException("Failed to fetch pet data");
        }
    }
    
    public function createPet(array $data): array {
        try {
            error_log("Creating pet with data: " . json_encode($data));
            
            // Validate required fields
            $requiredFields = ['name', 'species', 'shelter_id'];
            foreach ($requiredFields as $field) {
                if (empty($data[$field])) {
                    throw new RuntimeException("Missing required field: $field");
                }
            }
            
            // Create pet
            $petId = $this->petModel->create($data);
            error_log("Created pet with ID: $petId");
            
            $pet = $this->petModel->findById($petId);
            if (!$pet) {
                throw new RuntimeException("Failed to retrieve created pet");
            }
            
            return $pet;
        } catch (\Exception $e) {
            error_log("Error in PetService::createPet: " . $e->getMessage());
            throw $e;
        }
    }
    
    public function updatePet(int $id, array $data): array {
        // Verify pet exists
        $pet = $this->petModel->findById($id);
        if (!$pet) {
            throw new RuntimeException("Pet not found");
        }
        
        // Validate species if provided
        if (isset($data['species'])) {
            $validSpecies = ['Dog', 'Cat', 'Bird', 'Rabbit', 'Other'];
            if (!in_array($data['species'], $validSpecies)) {
                throw new RuntimeException("Invalid species");
            }
        }
        
        // Validate age if provided
        if (isset($data['age']) && ($data['age'] < 0 || $data['age'] > 30)) {
            throw new RuntimeException("Invalid age");
        }
        
        // Validate gender if provided
        if (isset($data['gender'])) {
            $validGenders = ['Male', 'Female'];
            if (!in_array($data['gender'], $validGenders)) {
                throw new RuntimeException("Invalid gender");
            }
        }
        
        // Validate shelter if provided
        if (isset($data['shelter_id'])) {
            if (!$this->shelterModel->findById($data['shelter_id'])) {
                throw new RuntimeException("Invalid shelter ID");
            }
        }
        
        // Validate traits if provided
        if (isset($data['traits'])) {
            foreach ($data['traits'] as $traitId) {
                if (!$this->traitModel->findById($traitId)) {
                    throw new RuntimeException("Invalid trait ID: $traitId");
                }
            }
        }
        
        // Update pet
        $this->petModel->update($id, $data);
        return $this->petModel->findById($id);
    }

    private function formatTraits(array $traits): array {
        $formatted = [];
        foreach ($traits as $trait) {
            $category = $trait['category'] ?? 'General';
            if (!isset($formatted[$category])) {
                $formatted[$category] = [];
            }
            if (!in_array($trait['trait_name'], $formatted[$category])) {
                $formatted[$category][] = $trait['trait_name'];
            }
        }
        return $formatted;
    }
    
    public function deletePet(int $id): bool {
        // Verify pet exists
        $pet = $this->petModel->findById($id);
        if (!$pet) {
            throw new RuntimeException("Pet not found");
        }
        
        // Check if pet has any pending adoption applications
        // This would be implemented when we add the adoption system
        
        return $this->petModel->delete($id);
    }
    
    public function listPets(array $filters = []): array {
        try {
            // First check if updated_at column exists
            $columns = $this->db->query("SHOW COLUMNS FROM Pet")->fetchAll(PDO::FETCH_COLUMN);
            $hasUpdatedAt = in_array('updated_at', $columns);
            $hasCreatedAt = in_array('created_at', $columns);

            $query = "
                SELECT p.*, s.name as shelter_name,
                COUNT(*) OVER() as total_count
                FROM Pet p
                LEFT JOIN Shelter s ON p.shelter_id = s.shelter_id
                WHERE 1=1
            ";
            $params = [];
            
            // Add filter conditions...
            if (!empty($filters['search'])) {
                $query .= " AND (p.name LIKE ? OR p.breed LIKE ? OR p.description LIKE ?)";
                $searchTerm = '%' . $filters['search'] . '%';
                $params = array_merge($params, [$searchTerm, $searchTerm, $searchTerm]);
            }

            // Add sorting based on available columns
            if (!empty($filters['sort'])) {
                switch($filters['sort']) {
                    case 'updated_at DESC':
                        $query .= $hasUpdatedAt 
                            ? " ORDER BY p.updated_at DESC" 
                            : ($hasCreatedAt 
                                ? " ORDER BY p.created_at DESC" 
                                : " ORDER BY p.pet_id DESC");
                        break;
                    case 'updated_at ASC':
                        $query .= $hasUpdatedAt 
                            ? " ORDER BY p.updated_at ASC" 
                            : ($hasCreatedAt 
                                ? " ORDER BY p.created_at ASC" 
                                : " ORDER BY p.pet_id ASC");
                        break;
                    case 'name ASC':
                        $query .= " ORDER BY p.name ASC";
                        break;
                    case 'name DESC':
                        $query .= " ORDER BY p.name DESC";
                        break;
                    default:
                        $query .= $hasUpdatedAt 
                            ? " ORDER BY p.updated_at DESC" 
                            : ($hasCreatedAt 
                                ? " ORDER BY p.created_at DESC" 
                                : " ORDER BY p.pet_id DESC");
                }
            } else {
                // Default sorting
                $query .= $hasUpdatedAt 
                    ? " ORDER BY p.updated_at DESC" 
                    : ($hasCreatedAt 
                        ? " ORDER BY p.created_at DESC" 
                        : " ORDER BY p.pet_id DESC");
            }
            
            // Add pagination
            if (isset($filters['limit'])) {
                $query .= " LIMIT ?";
                $params[] = (int)$filters['limit'];
                
                if (isset($filters['offset'])) {
                    $query .= " OFFSET ?";
                    $params[] = (int)$filters['offset'];
                }
            }
            
            $stmt = $this->db->prepare($query);
            $stmt->execute($params);
            $pets = $stmt->fetchAll(PDO::FETCH_ASSOC);
            
            $total = $pets[0]['total_count'] ?? 0;
            
            // Get images and traits for each pet
            foreach ($pets as &$pet) {
                // Get images
                $stmt = $this->db->prepare("
                    SELECT image_id, image_url as url, is_primary
                    FROM Pet_Image
                    WHERE pet_id = ?
                    ORDER BY is_primary DESC, image_id ASC
                ");
                $stmt->execute([$pet['pet_id']]);
                $pet['images'] = $stmt->fetchAll(PDO::FETCH_ASSOC);
                
                // Get traits
                $stmt = $this->db->prepare("
                    SELECT t.trait_name, tc.name as category
                    FROM Pet_Trait_Relation ptr
                    JOIN Pet_Trait t ON ptr.trait_id = t.trait_id
                    LEFT JOIN Trait_Category tc ON t.category_id = tc.category_id
                    WHERE ptr.pet_id = ?
                ");
                $stmt->execute([$pet['pet_id']]);
                $traits = $stmt->fetchAll(PDO::FETCH_ASSOC);
                
                // Format traits
                $pet['traits'] = $this->formatTraits($traits);
                
                // Remove the count from individual pets
                unset($pet['total_count']);
            }
            
            return [
                'pets' => $pets,
                'total' => $total
            ];
        } catch (PDOException $e) {
            error_log("Error in listPets: " . $e->getMessage());
            throw new \RuntimeException("Failed to fetch pets");
        }
    }

    public function addTrait(string $traitName): array {
        // Validate trait name
        if (empty(trim($traitName))) {
            throw new RuntimeException("Trait name cannot be empty");
        }
        
        $traitId = $this->traitModel->create($traitName);
        return $this->traitModel->findById($traitId);
    }
    
    public function listTraits(): array {
        return $this->traitModel->findAll();
    }
}

========================================

File: ./backend/src/services/EmailService.php
----------------------------------------
<?php
namespace PawPath\services;

use PHPMailer\PHPMailer\PHPMailer;
use PHPMailer\PHPMailer\Exception;
use PHPMailer\PHPMailer\SMTP;
use RuntimeException;

class EmailService {
    private ?PHPMailer $mailer = null;
    
    public function __construct() {
        // Defer mailer initialization until needed
    }
    
    private function initializeMailer(): void {
        if ($this->mailer !== null) {
            return;
        }

        try {
            $this->mailer = new PHPMailer(true);
            
            if (!empty($_ENV['MAIL_HOST'])) {
                $this->mailer->isSMTP();
                $this->mailer->Host = $_ENV['MAIL_HOST'];
                $this->mailer->SMTPAuth = true;
                $this->mailer->Username = $_ENV['MAIL_USERNAME'] ?? '';
                $this->mailer->Password = $_ENV['MAIL_PASSWORD'] ?? '';
                $this->mailer->SMTPSecure = PHPMailer::ENCRYPTION_STARTTLS;
                $this->mailer->Port = $_ENV['MAIL_PORT'] ?? 587;
            } else {
                $this->mailer->isMail();
            }
            
            $this->mailer->setFrom(
                $_ENV['MAIL_FROM_ADDRESS'] ?? 'noreply@pawpath.com',
                $_ENV['MAIL_FROM_NAME'] ?? 'PawPath'
            );
            
            if ($_ENV['APP_ENV'] === 'development') {
                $this->mailer->SMTPDebug = SMTP::DEBUG_SERVER;
            }
        } catch (Exception $e) {
            error_log("Failed to initialize mailer: " . $e->getMessage());
            throw new RuntimeException("Email service configuration error");
        }
    }
    
    public function sendVerificationEmail(string $email, string $name, string $token): bool {
        try {
            $this->initializeMailer();
            
            $this->mailer->clearAddresses();
            $this->mailer->addAddress($email, $name);
            $this->mailer->isHTML(true);
            
            $verificationLink = $_ENV['APP_URL'] . "/verify-email?token=" . $token;
            
            $this->mailer->Subject = 'Verify your PawPath account';
            $this->mailer->Body = $this->getVerificationEmailTemplate($name, $verificationLink);
            $this->mailer->AltBody = strip_tags(str_replace('<br>', "\n", $this->mailer->Body));
            
            return $this->mailer->send();
        } catch (Exception $e) {
            error_log("Failed to send verification email: " . $e->getMessage());
            return false;
        }
    }

    public function sendPasswordResetEmail(string $email, string $name, string $token): bool {
        try {
            $this->initializeMailer();
            
            $this->mailer->clearAddresses();
            $this->mailer->addAddress($email, $name);
            $this->mailer->isHTML(true);
            
            $resetLink = $_ENV['APP_URL'] . "/reset-password?token=" . $token;
            
            $this->mailer->Subject = 'Reset Your PawPath Password';
            $this->mailer->Body = $this->getPasswordResetEmailTemplate($name, $resetLink);
            $this->mailer->AltBody = strip_tags(str_replace('<br>', "\n", $this->mailer->Body));
            
            return $this->mailer->send();
        } catch (Exception $e) {
            error_log("Failed to send password reset email: " . $e->getMessage());
            return false;
        }
    }

    public function sendWelcomeEmail(string $email, string $name): bool {
        try {
            $this->initializeMailer();
            
            $this->mailer->clearAddresses();
            $this->mailer->addAddress($email, $name);
            $this->mailer->isHTML(true);
            
            $this->mailer->Subject = 'Welcome to PawPath!';
            $this->mailer->Body = $this->getWelcomeEmailTemplate($name);
            $this->mailer->AltBody = strip_tags(str_replace('<br>', "\n", $this->mailer->Body));
            
            return $this->mailer->send();
        } catch (Exception $e) {
            error_log("Failed to send welcome email: " . $e->getMessage());
            return false;
        }
    }
    
    private function getVerificationEmailTemplate(string $name, string $link): string {
        return "
            <div style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;'>
                <h2>Welcome to PawPath!</h2>
                <p>Hi {$name},</p>
                <p>Thanks for signing up. Please verify your email address to complete your registration.</p>
                <p style='margin: 25px 0;'>
                    <a href='{$link}' 
                       style='background-color: #4F46E5; color: white; padding: 12px 24px; 
                              text-decoration: none; border-radius: 4px;'>
                        Verify Email Address
                    </a>
                </p>
                <p>If you did not create an account, no further action is required.</p>
                <p>Best regards,<br>The PawPath Team</p>
            </div>
        ";
    }
    
    private function getPasswordResetEmailTemplate(string $name, string $link): string {
        return "
            <div style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;'>
                <h2>Reset Your Password</h2>
                <p>Hi {$name},</p>
                <p>You recently requested to reset your password. Click the button below to proceed:</p>
                <p style='margin: 25px 0;'>
                    <a href='{$link}' 
                       style='background-color: #4F46E5; color: white; padding: 12px 24px; 
                              text-decoration: none; border-radius: 4px;'>
                        Reset Password
                    </a>
                </p>
                <p>If you did not request a password reset, please ignore this email.</p>
                <p>Best regards,<br>The PawPath Team</p>
            </div>
        ";
    }
    
    private function getWelcomeEmailTemplate(string $name): string {
        return "
            <div style='font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;'>
                <h2>Welcome to PawPath!</h2>
                <p>Hi {$name},</p>
                <p>We're excited to have you join our community of pet lovers!</p>
                <p>With PawPath, you can:</p>
                <ul>
                    <li>Find your perfect pet companion</li>
                    <li>Connect with local shelters</li>
                    <li>Access resources about pet care</li>
                    <li>Join our community of pet lovers</li>
                </ul>
                <p>Ready to get started?</p>
                <p style='margin: 25px 0;'>
                    <a href='{$_ENV['APP_URL']}/quiz' 
                       style='background-color: #4F46E5; color: white; padding: 12px 24px; 
                              text-decoration: none; border-radius: 4px;'>
                        Take Our Pet Match Quiz
                    </a>
                </p>
                <p>Best regards,<br>The PawPath Team</p>
            </div>
        ";
    }
}

========================================

File: ./backend/src/services/BlogService.php
----------------------------------------
<?php
// src/services/BlogService.php
namespace PawPath\services;

use PawPath\models\BlogPost;
use PawPath\models\User;
use RuntimeException;

class BlogService {
    private BlogPost $blogModel;
    private User $userModel;
    
    public function __construct() {
        $this->blogModel = new BlogPost();
        $this->userModel = new User();
    }
    
    public function createPost(array $data): array {
        // Validate required fields
        if (empty($data['title']) || empty($data['content'])) {
            throw new RuntimeException("Title and content are required");
        }
        
        // Verify author exists
        if (!$this->userModel->findById($data['author_id'])) {
            throw new RuntimeException("Invalid author");
        }
        
        // Create post
        $postId = $this->blogModel->create($data);
        return $this->blogModel->findById($postId);
    }
    
    public function getPost(int $id): array {
        $post = $this->blogModel->findById($id);
        if (!$post) {
            throw new RuntimeException("Post not found");
        }
        return $post;
    }
    
    public function listPosts(array $filters = []): array {
        return $this->blogModel->findAll($filters);
    }
    
    public function updatePost(int $id, array $data, int $userId): array {
        // Verify post exists and user is the author
        $post = $this->blogModel->findById($id);
        if (!$post) {
            throw new RuntimeException("Post not found");
        }
        
        if ($post['author_id'] !== $userId) {
            throw new RuntimeException("Unauthorized to update this post");
        }
        
        // Update post
        $this->blogModel->update($id, $data);
        return $this->blogModel->findById($id);
    }
    
    public function deletePost(int $id, int $userId): void {
        // Verify post exists and user is the author
        $post = $this->blogModel->findById($id);
        if (!$post) {
            throw new RuntimeException("Post not found");
        }
        
        if ($post['author_id'] !== $userId) {
            throw new RuntimeException("Unauthorized to delete this post");
        }
        
        // Delete post
        if (!$this->blogModel->delete($id)) {
            throw new RuntimeException("Failed to delete post");
        }
    }
}

========================================

File: ./backend/scripts/add_pet_image.php
----------------------------------------
<?php
require __DIR__ . '/../vendor/autoload.php';

use PawPath\models\PetImage;
use Dotenv\Dotenv;

// Load environment variables
$dotenv = Dotenv::createImmutable(__DIR__ . '/..');
$dotenv->load();

// Function to add image to pet
function addImageToPet(int $petId, string $imageName, bool $isPrimary = true) {
    try {
        $petImage = new PetImage();
        $imageUrl = '/uploads/images/' . $imageName;
        
        $imageId = $petImage->create($petId, $imageUrl, $isPrimary);
        echo "Successfully added image to pet. Image ID: " . $imageId . "\n";
        return true;
    } catch (Exception $e) {
        echo "Error adding image: " . $e->getMessage() . "\n";
        return false;
    }
}

// Get command line arguments
if ($argc < 3) {
    echo "Usage: php add_pet_image.php <pet_id> <image_filename>\n";
    exit(1);
}

$petId = (int)$argv[1];
$imageName = $argv[2];

// Add the image
addImageToPet($petId, $imageName);

========================================

File: ./frontend/src/components/layout/MainLayout.tsx
----------------------------------------

========================================

File: ./frontend/src/components/layout/Navbar.tsx
----------------------------------------
import { Link } from 'react-router-dom'
import { useAuth } from '@/contexts/AuthContext'
import { Button } from '@/components/ui/button'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
  DropdownMenuLabel,
} from '@/components/ui/dropdown-menu'
import { 
  User, 
  LogOut, 
  Settings, 
  Shield, 
  Home, 
  PawPrint,
  Heart,
  ClipboardList
} from 'lucide-react'
import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';
import { useState, useEffect } from 'react';

const getFullImageUrl = (url: string | null | undefined) => {
    if (!url) return null;
    return url.startsWith('http') ? url : `${window.location.origin}${url}`;
};

function Navbar() {
  const { isAuthenticated, user, logout } = useAuth()
  const [profileImage, setProfileImage] = useState<string | null>(null);

  const handleLogout = () => {
    logout()
  }

  const getInitials = (username: string) => {
    return username
      .split(' ')
      .map(word => word[0])
      .join('')
      .toUpperCase()
      .slice(0, 2);
  }

  const avatar = user?.profile_image ? (
    <AvatarImage 
      src={user.profile_image}
      alt={user.username}
      className="aspect-square h-full w-full"
    />
  ) : (
    <AvatarFallback>
      {user?.username ? getInitials(user.username) : 'U'}
    </AvatarFallback>
  );

  const renderRoleBasedLinks = () => {
    if (!user) return null;

    switch (user.role) {
      case 'admin':
        return (
          <>
            <DropdownMenuSeparator />
            <DropdownMenuLabel>Admin</DropdownMenuLabel>
            <DropdownMenuItem asChild>
              <Link to="/admin">
                <Shield className="mr-2 h-4 w-4" />
                Admin Dashboard
              </Link>
            </DropdownMenuItem>
            <DropdownMenuItem asChild>
              <Link to="/admin/users">
                <User className="mr-2 h-4 w-4" />
                User Management
              </Link>
            </DropdownMenuItem>
          </>
        );
      case 'shelter_staff':
        return (
          <>
            <DropdownMenuSeparator />
            <DropdownMenuLabel>Shelter</DropdownMenuLabel>
            <DropdownMenuItem asChild>
              <Link to="/shelter">
                <Home className="mr-2 h-4 w-4" />
                Shelter Dashboard
              </Link>
            </DropdownMenuItem>
            <DropdownMenuItem asChild>
              <Link to="/shelter/pets">
                <PawPrint className="mr-2 h-4 w-4" />
                Manage Pets
              </Link>
            </DropdownMenuItem>
          </>
        );
      default:
        return null;
    }
  };

  return (
    <nav className="bg-primary text-primary-foreground shadow-lg">
      <div className="container mx-auto px-4">
        <div className="flex justify-between items-center h-16">
          <Link to="/" className="text-xl font-bold">
            PawPath
          </Link>
          
          <div className="space-x-4 flex items-center">
            <Link to="/pets" className="hover:text-opacity-80">
              Find Pets
            </Link>

            <Link to="/blog" className="hover:text-opacity-80">
              Blog
            </Link>
            
            {isAuthenticated ? (
              <>
                <Link to="/quiz" className="hover:text-opacity-80">
                  Take Quiz
                </Link>
                
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button 
                      variant="ghost" 
                      className="relative flex items-center gap-2"
                    >
                      <Avatar className="h-8 w-8">
                        {avatar}
                      </Avatar>
                      <span className="ml-2">{user?.username}</span>
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end" className="w-56">
                    <DropdownMenuLabel>My Account</DropdownMenuLabel>
                    <DropdownMenuItem asChild>
                      <Link to="/profile/applications">
                        <ClipboardList className="mr-2 h-4 w-4" />
                        My Applications
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuItem asChild>
                      <Link to="/profile/favorites">
                        <Heart className="mr-2 h-4 w-4" />
                        Saved Pets
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuItem asChild>
                      <Link to="/profile/settings">
                        <Settings className="mr-2 h-4 w-4" />
                        Settings
                      </Link>
                    </DropdownMenuItem>
                    
                    {renderRoleBasedLinks()}
                    
                    <DropdownMenuSeparator />
                    <DropdownMenuItem 
                      onClick={handleLogout}
                      className="text-red-600 cursor-pointer"
                    >
                      <LogOut className="mr-2 h-4 w-4" />
                      Logout
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </>
            ) : (
              <>
                <Link to="/login" className="hover:text-opacity-80">
                  Login
                </Link>
                <Link to="/register" className="hover:text-opacity-80">
                  Register
                </Link>
              </>
            )}
          </div>
        </div>
      </div>
    </nav>
  );
}

export default Navbar;

========================================

File: ./frontend/src/components/shared/LoadingSpinner.tsx
----------------------------------------

========================================

File: ./frontend/src/components/pets/PetCard.tsx
----------------------------------------
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { PawPrint, MapPin } from 'lucide-react';

interface PetImage {
    image_id: number;
    url: string;
    is_primary: boolean;
}

interface PetCardProps {
    pet: {
        pet_id: number;
        name: string;
        species: string;
        breed: string;
        age: number;
        gender: string;
        description: string;
        shelter_name: string;
        traits?: { [category: string]: string[] };
        images?: PetImage[];
    };
    onClick?: () => void;
}

export function PetCard({ pet, onClick }: PetCardProps) {
    // Find primary image or first image
    const displayImage = pet.images?.find(img => img.is_primary) || pet.images?.[0];

    return (
        <Card
            className="cursor-pointer hover:shadow-lg transition-shadow h-full"
            onClick={onClick}
        >
            <div className="aspect-square relative bg-white">
                {displayImage ? (
                    <img
                        src={displayImage.url}
                        alt={`${pet.name} - ${pet.breed}`}
                        className="w-full h-full object-contain"
                        style={{ backgroundColor: 'white' }}
                        onError={(e) => {
                            console.error(`Failed to load image: ${displayImage.url}`);
                            const target = e.target as HTMLImageElement;
                            target.style.display = 'none';
                            const fallback = target.parentElement?.querySelector('.fallback');
                            if (fallback) fallback.classList.remove('hidden');
                        }}
                    />
                ) : (
                    <div className="w-full h-full flex items-center justify-center">
                        <PawPrint className="h-12 w-12 text-muted-foreground" />
                    </div>
                )}
                {/* Hidden fallback that shows if image fails to load */}
                <div className="fallback hidden w-full h-full flex items-center justify-center absolute top-0 left-0 bg-muted">
                    <PawPrint className="h-12 w-12 text-muted-foreground" />
                </div>
            </div>

            <CardHeader className="space-y-1">
                <CardTitle className="text-xl">{pet.name}</CardTitle>
                <CardDescription>
                    {pet.breed} • {pet.age} years old • {pet.gender}
                </CardDescription>
            </CardHeader>

            <CardContent>
                <p className="text-sm text-muted-foreground line-clamp-2 mb-4">
                    {pet.description}
                </p>

                {pet.traits && Object.keys(pet.traits).length > 0 && (
                    <div className="flex flex-wrap gap-2 mb-4">
                        {Object.entries(pet.traits).map(([category, traits]) => (
                            Array.isArray(traits) ? traits.map(trait => (
                                <Badge
                                    key={`${category}-${trait}`}
                                    variant="secondary"
                                    className="text-xs"
                                >
                                    {trait}
                                </Badge>
                            )) : null
                        ))}
                    </div>
                )}

                <div className="flex items-center text-sm text-muted-foreground">
                    <MapPin className="h-4 w-4 mr-1" />
                    {pet.shelter_name}
                </div>
            </CardContent>
        </Card>
    );
}

========================================

File: ./frontend/src/components/pets/PetImageUploader.tsx
----------------------------------------
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Image as ImageIcon, X, Upload } from 'lucide-react';

interface PetImageUploaderProps {
  onChange: (files: File[]) => void;
  maxFiles?: number;
  accept?: string;
}

export function PetImageUploader({ 
  onChange, 
  maxFiles = 5, 
  accept = "image/*" 
}: PetImageUploaderProps) {
  const [previewUrls, setPreviewUrls] = useState<string[]>([]);

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(event.target.files || []);
    if (files.length + previewUrls.length > maxFiles) {
      alert(`You can only upload up to ${maxFiles} images`);
      return;
    }

    // Create preview URLs
    const newPreviewUrls = files.map(file => URL.createObjectURL(file));
    setPreviewUrls(prev => [...prev, ...newPreviewUrls]);
    
    // Call onChange with all files
    onChange(files);
  };

  const removeImage = (index: number) => {
    setPreviewUrls(prev => {
      const newUrls = [...prev];
      URL.revokeObjectURL(newUrls[index]); // Clean up URL object
      newUrls.splice(index, 1);
      return newUrls;
    });
    
    // Notify parent about removed image
    onChange([]);
  };

  return (
    <div className="space-y-4">
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        {previewUrls.map((url, index) => (
          <Card key={url} className="relative group">
            <div className="aspect-square relative">
              <img
                src={url}
                alt={`Preview ${index + 1}`}
                className="w-full h-full object-cover rounded-md"
              />
              <Button
                size="icon"
                variant="destructive"
                className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity"
                onClick={() => removeImage(index)}
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
          </Card>
        ))}

        {previewUrls.length < maxFiles && (
          <Card className="aspect-square flex items-center justify-center cursor-pointer hover:bg-accent transition-colors">
            <label className="w-full h-full flex flex-col items-center justify-center cursor-pointer">
              <input
                type="file"
                className="hidden"
                accept={accept}
                multiple
                onChange={handleFileChange}
              />
              <Upload className="h-8 w-8 mb-2 text-muted-foreground" />
              <span className="text-sm text-muted-foreground">Upload Image</span>
            </label>
          </Card>
        )}
      </div>
    </div>
  );
}

========================================

File: ./frontend/src/components/pets/PetSubmissionForm.tsx
----------------------------------------
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import { PetImageUploader } from '@/components/pets/PetImageUploader';
import api from '@/lib/axios';

const petSubmissionSchema = z.object({
  name: z.string().min(1, 'Pet name is required'),
  species: z.string().min(1, 'Species is required'),
  breed: z.string().optional(),
  age: z.number().min(0, 'Age must be positive').optional(),
  gender: z.enum(['male', 'female']).optional(),
  description: z.string().min(10, 'Please provide a detailed description'),
});

type PetSubmissionFormData = z.infer<typeof petSubmissionSchema>;

export default function PetSubmissionForm() {
  const [images, setImages] = useState<File[]>([]);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();
  const navigate = useNavigate();
  
  const form = useForm<PetSubmissionFormData>({
    resolver: zodResolver(petSubmissionSchema),
    defaultValues: {
      name: '',
      species: '',
      breed: '',
      description: '',
    },
  });

  const onSubmit = async (data: PetSubmissionFormData) => {
    try {
      setIsSubmitting(true);
      
      // Create FormData to handle both text data and files
      const formData = new FormData();
      Object.entries(data).forEach(([key, value]) => {
        if (value !== undefined) {
          formData.append(key, value.toString());
        }
      });
      
      // Append images
      images.forEach((image) => {
        formData.append('images[]', image);
      });

      const response = await api.post('/pets/submit', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      if (response.data.success) {
        toast({
          title: 'Success',
          description: 'Your pet has been submitted for review',
        });
        navigate('/profile/submissions');
      }
    } catch (error: any) {
      toast({
        variant: 'destructive',
        title: 'Error',
        description: error.response?.data?.error || 'Failed to submit pet',
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Pet Name</FormLabel>
              <FormControl>
                <Input {...field} placeholder="Enter pet name" />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="species"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Species</FormLabel>
              <Select
                onValueChange={field.onChange}
                defaultValue={field.value}
              >
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select species" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="dog">Dog</SelectItem>
                  <SelectItem value="cat">Cat</SelectItem>
                  <SelectItem value="bird">Bird</SelectItem>
                  <SelectItem value="rabbit">Rabbit</SelectItem>
                  <SelectItem value="other">Other</SelectItem>
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="breed"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Breed (Optional)</FormLabel>
              <FormControl>
                <Input {...field} placeholder="Enter breed" />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Description</FormLabel>
              <FormControl>
                <Textarea
                  {...field}
                  placeholder="Describe the pet's personality, history, and any special needs..."
                  className="min-h-[100px]"
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <div className="space-y-2">
          <FormLabel>Pet Images</FormLabel>
          <PetImageUploader
            onChange={setImages}
            maxFiles={5}
            accept="image/*"
          />
        </div>

        <div className="flex justify-end gap-4">
          <Button
            type="button"
            variant="outline"
            onClick={() => navigate(-1)}
          >
            Cancel
          </Button>
          <Button
            type="submit"
            disabled={isSubmitting}
          >
            {isSubmitting ? 'Submitting...' : 'Submit Pet for Review'}
          </Button>
        </div>
      </form>
    </Form>
  );
}

========================================

File: ./frontend/src/components/pets/PetFilters.tsx
----------------------------------------
import { useState } from 'react';
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from '@/components/ui/sheet';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Filter, X } from 'lucide-react';

interface PetFilters {
  species?: string;
  breed?: string;
  ageMin?: number;
  ageMax?: number;
  gender?: string;
  size?: string;
  goodWith?: string[];
  traits?: string[];
}

interface PetFiltersProps {
  onFiltersChange: (filters: PetFilters) => void;
  initialFilters?: PetFilters;
  availableTraits: string[];
}

export function PetFilters({ onFiltersChange, initialFilters, availableTraits }: PetFiltersProps) {
  const [filters, setFilters] = useState<PetFilters>(initialFilters || {});
  const [isOpen, setIsOpen] = useState(false);

  const handleFilterChange = (key: keyof PetFilters, value: any) => {
    const newFilters = { ...filters, [key]: value };
    setFilters(newFilters);
    onFiltersChange(newFilters);
  };

  const clearFilters = () => {
    setFilters({});
    onFiltersChange({});
  };

  return (
    <Sheet open={isOpen} onOpenChange={setIsOpen}>
      <SheetTrigger asChild>
        <Button variant="outline" size="sm">
          <Filter className="mr-2 h-4 w-4" />
          Filters
        </Button>
      </SheetTrigger>
      <SheetContent className="w-full sm:max-w-md">
        <SheetHeader>
          <SheetTitle>Filter Pets</SheetTitle>
          <SheetDescription>
            Customize your search to find the perfect pet
          </SheetDescription>
        </SheetHeader>

        <div className="space-y-6 py-4">
          <div className="space-y-2">
            <Label>Species</Label>
            <Select
              value={filters.species}
              onValueChange={(value) => handleFilterChange('species', value)}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select species" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="dog">Dogs</SelectItem>
                <SelectItem value="cat">Cats</SelectItem>
                <SelectItem value="bird">Birds</SelectItem>
                <SelectItem value="rabbit">Rabbits</SelectItem>
                <SelectItem value="other">Other</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label>Breed</Label>
            <Input
              placeholder="Search breeds..."
              value={filters.breed || ''}
              onChange={(e) => handleFilterChange('breed', e.target.value)}
            />
          </div>

          <div className="space-y-2">
            <Label>Age Range (Years)</Label>
            <div className="flex items-center space-x-4">
              <Input
                type="number"
                placeholder="Min"
                min={0}
                max={20}
                value={filters.ageMin || ''}
                onChange={(e) => handleFilterChange('ageMin', e.target.value)}
              />
              <span>to</span>
              <Input
                type="number"
                placeholder="Max"
                min={0}
                max={20}
                value={filters.ageMax || ''}
                onChange={(e) => handleFilterChange('ageMax', e.target.value)}
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label>Gender</Label>
            <RadioGroup
              value={filters.gender}
              onValueChange={(value) => handleFilterChange('gender', value)}
            >
              <div className="flex items-center space-x-4">
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="any" id="gender-any" />
                  <Label htmlFor="gender-any">Any</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="male" id="gender-male" />
                  <Label htmlFor="gender-male">Male</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="female" id="gender-female" />
                  <Label htmlFor="gender-female">Female</Label>
                </div>
              </div>
            </RadioGroup>
          </div>

          <div className="space-y-2">
            <Label>Size</Label>
            <Select
              value={filters.size}
              onValueChange={(value) => handleFilterChange('size', value)}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select size" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="small">Small</SelectItem>
                <SelectItem value="medium">Medium</SelectItem>
                <SelectItem value="large">Large</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label>Good with</Label>
            <div className="flex flex-wrap gap-2">
              {['kids', 'dogs', 'cats'].map((type) => (
                <Button
                  key={type}
                  variant="outline"
                  size="sm"
                  className={`capitalize ${
                    filters.goodWith?.includes(type)
                      ? 'bg-primary text-primary-foreground'
                      : ''
                  }`}
                  onClick={() => {
                    const current = filters.goodWith || [];
                    const updated = current.includes(type)
                      ? current.filter((t) => t !== type)
                      : [...current, type];
                    handleFilterChange('goodWith', updated);
                  }}
                >
                  {type}
                </Button>
              ))}
            </div>
          </div>

          <div className="pt-4 flex justify-between">
            <Button variant="outline" onClick={clearFilters}>
              <X className="mr-2 h-4 w-4" />
              Clear Filters
            </Button>
            <Button onClick={() => setIsOpen(false)}>
              Apply Filters
            </Button>
          </div>
        </div>
      </SheetContent>
    </Sheet>
  );
}

========================================

File: ./frontend/src/components/auth/RoleProtectedRoute.tsx
----------------------------------------
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';

interface RoleProtectedRouteProps {
  children: React.ReactNode;
  requiredRole: string;
}

export function RoleProtectedRoute({ children, requiredRole }: RoleProtectedRouteProps) {
  const { isAuthenticated, isLoading, user } = useAuth();
  const location = useLocation();

  if (isLoading) {
    return <div>Loading...</div>;
  }

  if (!isAuthenticated) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  // Check role authorization
  const roleHierarchy = {
    'admin': ['admin'],
    'shelter_staff': ['admin', 'shelter_staff'],
    'adopter': ['admin', 'shelter_staff', 'adopter']
  };

  const userRole = user?.role || 'adopter';
  const allowedRoles = roleHierarchy[requiredRole] || [];

  if (!allowedRoles.includes(userRole)) {
    return <Navigate to="/unauthorized" replace />;
  }

  return <>{children}</>;
}

========================================

File: ./frontend/src/components/auth/ProtectedRoute.tsx
----------------------------------------
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';

export function ProtectedRoute({ children }: { children: React.ReactNode }) {
  const { isAuthenticated, isLoading } = useAuth();
  const location = useLocation();

  if (isLoading) {
    // You could return a loading spinner here
    return <div>Loading...</div>;
  }

  if (!isAuthenticated) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  return <>{children}</>;
}

========================================

File: ./frontend/src/contexts/AuthContext.tsx
----------------------------------------
import { createContext, useContext, useEffect, useState } from 'react';
import { useAtom } from 'jotai';
import { 
    userAtom, 
    authLoadingAtom,
    getStoredToken,
    setStoredToken,
    removeStoredToken,
    getStoredUser,
    setStoredUser,
    removeStoredUser,
    User 
} from '@/stores/auth';
import api from '@/lib/axios';

interface AuthContextType {
  isAuthenticated: boolean;
  user: User | null;
  setUser: (user: User | null) => void;  // Add this line
  login: (email: string, password: string) => Promise<void>;
  logout: () => void;
  isLoading: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
    const [user, setUser] = useAtom(userAtom);
    const [isLoading, setIsLoading] = useAtom(authLoadingAtom);

    // Set up axios interceptor for authentication
    useEffect(() => {
        const token = getStoredToken();
        if (token) {
            api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
        }

        // Add request interceptor
        const requestInterceptor = api.interceptors.request.use(
            (config) => {
                const token = getStoredToken();
                if (token) {
                    config.headers.Authorization = `Bearer ${token}`;
                }
                return config;
            },
            (error) => {
                return Promise.reject(error);
            }
        );

        // Add response interceptor
        const responseInterceptor = api.interceptors.response.use(
            (response) => response,
            async (error) => {
                if (error.response?.status === 401) {
                    // Token expired or invalid
                    logout();
                }
                return Promise.reject(error);
            }
        );

        return () => {
            // Clean up interceptors
            api.interceptors.request.eject(requestInterceptor);
            api.interceptors.response.eject(responseInterceptor);
        };
    }, []);

    // Initialize auth state from localStorage
    useEffect(() => {
        const initializeAuth = async () => {
            try {
                setIsLoading(true);
                const token = getStoredToken();
                
                if (!token) {
                    setIsLoading(false);
                    return;
                }

                api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
                
                try {
                    const response = await api.get('/auth/me');
                    const userData = response.data.data.user;

                    // Get profile data which includes the profile image
                    const profileResponse = await api.get('/profile');
                    const profileData = profileResponse.data.data;

                    // Merge profile data with user data
                    const userWithProfile = {
                        ...userData,
                        profile_image: profileData.profile_image
                    };

                    setUser(userWithProfile);
                    setStoredUser(userWithProfile);
                } catch (error) {
                    console.error('Token verification failed:', error);
                    logout();
                }
            } catch (error) {
                console.error('Auth initialization error:', error);
                logout();
            } finally {
                setIsLoading(false);
            }
        };
        initializeAuth();
    }, []);

    const login = async (email: string, password: string) => {
        try {
            const response = await api.post('/auth/login', { email, password });
            const { token, user: userData } = response.data.data;
            
            // After successful login, fetch profile data
            const profileResponse = await api.get('/profile');
            const profileData = profileResponse.data.data;

            // Merge user data with profile image
            const userWithProfile = {
                ...userData,
                profile_image: profileData.profile_image || null
            };
            
            setStoredToken(token);
            api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
            setStoredUser(userWithProfile);
            setUser(userWithProfile);
            
            console.log('Login successful, user:', userWithProfile); // Debug log
        } catch (error) {
            console.error('Login error:', error);
            throw error;
        }
    };

    const logout = () => {
        removeStoredToken();
        removeStoredUser();
        delete api.defaults.headers.common['Authorization'];
        setUser(null);
    };

    return (
        <AuthContext.Provider 
            value={{ 
                isAuthenticated: !!user, 
                user, 
                setUser,
                login, 
                logout,
                isLoading 
            }}
        >
            {children}
        </AuthContext.Provider>
    );
}

export const useAuth = () => {
    const context = useContext(AuthContext);
    if (context === undefined) {
        throw new Error('useAuth must be used within an AuthProvider');
    }
    return context;
};

========================================

File: ./frontend/src/lib/utils.ts
----------------------------------------
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

========================================

File: ./frontend/src/lib/axios.ts
----------------------------------------
import axios from 'axios';
import { getStoredToken } from '@/stores/auth';

console.log('API Base URL:', import.meta.env.VITE_API_URL || '/api');

const api = axios.create({
    baseURL: '/api', // This will be prepended to all requests
    headers: {
        'Content-Type': 'application/json',
    },
});

// Add request interceptor to include auth token
api.interceptors.request.use((config) => {
    const token = getStoredToken();
    if (token) {
        config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
}, (error) => {
    return Promise.reject(error);
});

// Add response interceptor to handle image URLs
api.interceptors.response.use((response) => {
    // Function to process image URLs in an object
    const processImageUrls = (obj: any) => {
        if (!obj) return obj;
        
        if (Array.isArray(obj)) {
            return obj.map(item => processImageUrls(item));
        }
        
        if (typeof obj === 'object') {
            Object.keys(obj).forEach(key => {
                if (key === 'images' && Array.isArray(obj[key])) {
                    obj[key] = obj[key].map((image: any) => ({
                        ...image,
                        url: `${window.location.origin}${image.url}`
                    }));
                } else if (typeof obj[key] === 'object') {
                    obj[key] = processImageUrls(obj[key]);
                }
            });
        }
        return obj;
    };

    // Process the response data
    if (response.data && response.data.data) {
        response.data.data = processImageUrls(response.data.data);
    }

    return response;
}, (error) => {
    return Promise.reject(error);
});

export default api;

========================================

File: ./frontend/src/pages/HomePage.tsx
----------------------------------------
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { ArrowRight, Heart, Search, Newspaper, PawPrint, Building2, Calendar } from 'lucide-react';

function HomePage() {
  const navigate = useNavigate();

  return (
    <div className="min-h-screen">
      {/* Hero Section */}
      <section className="relative py-20 bg-gradient-to-b from-primary/10 to-background">
        <div className="container mx-auto px-4">
          <div className="text-center max-w-3xl mx-auto">
            <h1 className="text-4xl md:text-6xl font-bold mb-6">
              Find Your Perfect Pet Companion
            </h1>
            <p className="text-xl text-muted-foreground mb-8">
              Take our matching quiz and discover the pet that fits perfectly with your lifestyle
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Button size="lg" onClick={() => navigate('/quiz')}>
                Take the Quiz <ArrowRight className="ml-2 h-4 w-4" />
              </Button>
              <Button size="lg" variant="outline" onClick={() => navigate('/pets')}>
                Browse Pets <Search className="ml-2 h-4 w-4" />
              </Button>
              <Button size="lg" variant="secondary" onClick={() => navigate('/shelters')}>
                View Shelters <Building2 className="ml-2 h-4 w-4" />
              </Button>
            </div>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="py-16 bg-background">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold text-center mb-12">How PawPath Works</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <Card>
              <CardContent className="pt-6">
                <div className="rounded-full bg-primary/10 w-12 h-12 flex items-center justify-center mb-4">
                  <Heart className="h-6 w-6 text-primary" />
                </div>
                <h3 className="text-xl font-semibold mb-2">Personalized Matching</h3>
                <p className="text-muted-foreground">
                  Take our comprehensive quiz to find pets that match your lifestyle, living situation, and preferences.
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="pt-6">
                <div className="rounded-full bg-primary/10 w-12 h-12 flex items-center justify-center mb-4">
                  <Search className="h-6 w-6 text-primary" />
                </div>
                <h3 className="text-xl font-semibold mb-2">Smart Search</h3>
                <p className="text-muted-foreground">
                  Browse pets from multiple shelters with advanced filters to find your perfect companion.
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="pt-6">
                <div className="rounded-full bg-primary/10 w-12 h-12 flex items-center justify-center mb-4">
                  <Newspaper className="h-6 w-6 text-primary" />
                </div>
                <h3 className="text-xl font-semibold mb-2">Expert Resources</h3>
                <p className="text-muted-foreground">
                  Access our library of articles and guides about pet care, training, and adoption.
                </p>
              </CardContent>
            </Card>
          </div>
        </div>
      </section>

      {/* Recent Adoptables Section */}
      <section className="py-16 bg-secondary/50">
        <div className="container mx-auto px-4">
          <div className="flex justify-between items-center mb-8">
            <h2 className="text-3xl font-bold">Recent Adoptables</h2>
            <Button variant="outline" onClick={() => navigate('/pets')}>
              View All <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {/* We'll fetch and display recent pets here later */}
            {[1, 2, 3].map((i) => (
              <Card key={i} className="relative group cursor-pointer" onClick={() => navigate('/pets')}>
                <CardContent className="p-0">
                  <div className="aspect-square bg-muted flex items-center justify-center">
                    <PawPrint className="h-12 w-12 text-muted-foreground" />
                  </div>
                  <div className="p-4">
                    <h3 className="font-semibold mb-1">Coming Soon</h3>
                    <p className="text-sm text-muted-foreground">Check back for new pets</p>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 bg-primary text-primary-foreground">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-3xl md:text-4xl font-bold mb-4">
            Ready to Meet Your New Best Friend?
          </h2>
          <p className="text-xl mb-8 text-primary-foreground/90">
            Start your journey today and find the perfect pet companion.
          </p>
          <Button 
            size="lg" 
            variant="secondary"
            onClick={() => navigate('/quiz')}
          >
            Take the Quiz Now
            <ArrowRight className="ml-2 h-4 w-4" />
          </Button>
        </div>
      </section>

      {/* Blog Section */}
      <section className="py-16 bg-background">
        <div className="container mx-auto px-4">
          <div className="flex justify-between items-center mb-8">
            <div>
              <h2 className="text-3xl font-bold">Latest Pet Care Tips</h2>
              <p className="text-muted-foreground">
                Expert advice and recommendations for pet parents
              </p>
            </div>
            <Button variant="outline" onClick={() => navigate('/blog')}>
              View All <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </div>
          
          <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
            {/* Add 3 placeholder cards until we fetch real data */}
            {[1, 2, 3].map((i) => (
              <Card key={i} className="cursor-pointer" onClick={() => navigate('/blog')}>
                <CardContent className="p-6">
                  <div className="flex items-center gap-2 text-muted-foreground text-sm mb-3">
                    <Calendar className="h-4 w-4" />
                    {new Date().toLocaleDateString()}
                  </div>
                  <h3 className="font-semibold mb-2">Essential Pet Care Tips</h3>
                  <p className="text-muted-foreground line-clamp-2">
                    Learn how to provide the best care for your furry friends with our expert tips and recommendations.
                  </p>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>
    </div>
  );
}

export default HomePage;

========================================

File: ./frontend/src/pages/AdoptionFormPage.tsx
----------------------------------------
import { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import api from '@/lib/axios';

const adoptionFormSchema = z.object({
  reason: z.string().min(50, 'Please provide a detailed reason for wanting to adopt this pet'),
  experience: z.string().min(20, 'Please describe your pet care experience'),
  living_situation: z.string().min(20, 'Please describe your living situation'),
  has_other_pets: z.boolean().optional(),
  other_pets_details: z.string().optional(),
  daily_schedule: z.string().min(20, 'Please describe your daily schedule'),
  veterinarian: z.string().optional(),
});

type AdoptionFormData = z.infer<typeof adoptionFormSchema>;

export default function AdoptionFormPage() {
  const { id } = useParams();
  const navigate = useNavigate();
  const { toast } = useToast();
  const [isSubmitting, setIsSubmitting] = useState(false);

  const form = useForm<AdoptionFormData>({
    resolver: zodResolver(adoptionFormSchema),
    defaultValues: {
      reason: '',
      experience: '',
      living_situation: '',
      has_other_pets: false,
      other_pets_details: '',
      daily_schedule: '',
      veterinarian: '',
    },
  });

  const onSubmit = async (data: AdoptionFormData) => {
    try {
      setIsSubmitting(true);
      const response = await api.post(`/adoptions`, {
        pet_id: id,
        ...data,
      });

      toast({
        title: "Application Submitted",
        description: "Your adoption application has been received. We'll be in touch soon!",
      });

      navigate('/profile/applications');
    } catch (error: any) {
      toast({
        variant: "destructive",
        title: "Error",
        description: error.response?.data?.error || "Failed to submit application",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="container max-w-2xl mx-auto p-4">
      <Card>
        <CardHeader>
          <CardTitle>Adoption Application</CardTitle>
          <CardDescription>
            Please fill out this form to begin the adoption process
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <FormField
                control={form.control}
                name="reason"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Why do you want to adopt this pet?</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Tell us why you think you'd be a great match..."
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="experience"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Pet Care Experience</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Describe your experience with pets..."
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="living_situation"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Living Situation</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Describe your home and living environment..."
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="daily_schedule"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Daily Schedule</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Describe your typical daily schedule..."
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="veterinarian"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Veterinarian (Optional)</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="Name and contact of your veterinarian..."
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="flex gap-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => navigate(-1)}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  disabled={isSubmitting}
                  className="flex-1"
                >
                  {isSubmitting ? 'Submitting...' : 'Submit Application'}
                </Button>
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  );
}

========================================

File: ./frontend/src/pages/SheltersPage.tsx
----------------------------------------
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { Search, MapPin, Phone, Mail, Building2, PawPrint } from 'lucide-react';
import api from '@/lib/axios';

interface Shelter {
  shelter_id: number;
  name: string;
  address: string;
  phone: string;
  email: string;
  is_no_kill: boolean;
  total_pets: number;
  active_applications: number;
}

export default function SheltersPage() {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [shelters, setShelters] = useState<Shelter[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    fetchShelters();
  }, []);


  const fetchShelters = async () => {
    try {
      setLoading(true);
      console.log('Fetching shelters with search term:', searchTerm);
      
      // Note: Now we just use '/shelters' instead of '/api/shelters'
      const response = await api.get('/shelters', {
        params: {
          search: searchTerm || undefined
        }
      });
      
      console.log('Shelter API response:', response);

      if (response.data.success) {
        setShelters(response.data.data);
      } else {
        throw new Error(response.data.error || 'Failed to fetch shelters');
      }
    } catch (error: any) {
      console.error('Error fetching shelters:', error);
      console.error('Full error details:', {
        message: error.message,
        response: error.response?.data,
        status: error.response?.status,
        config: error.config
      });
      
      toast({
        variant: "destructive",
        title: "Error",
        description: error.response?.data?.error || error.message || "Failed to load shelters",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    fetchShelters();
  };

  return (
    <div className="container mx-auto p-4">
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">Animal Shelters</h1>
        <p className="text-muted-foreground">
          Find local shelters and rescue organizations
        </p>
      </div>

      {/* Search */}
      <form onSubmit={handleSearch} className="mb-8">
        <div className="relative max-w-xl">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search shelters by name or location..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-9"
          />
        </div>
      </form>

      {loading ? (
        <div className="flex justify-center items-center min-h-[400px]">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
        </div>
      ) : shelters.length === 0 ? (
        <Card>
          <CardContent className="flex flex-col items-center justify-center py-12">
            <Building2 className="h-12 w-12 text-muted-foreground mb-4" />
            <h3 className="text-lg font-semibold mb-2">No Shelters Found</h3>
            <p className="text-muted-foreground text-center">
              Try adjusting your search terms
            </p>
          </CardContent>
        </Card>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {shelters.map((shelter) => (
            <Card 
              key={shelter.shelter_id}
              className="group hover:shadow-lg transition-shadow cursor-pointer"
              onClick={() => navigate(`/shelters/${shelter.shelter_id}`)}
            >
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span>{shelter.name}</span>
                  {shelter.is_no_kill && (
                    <Badge variant="success" className="whitespace-nowrap">
                      No-Kill Shelter
                    </Badge>
                  )}
                </CardTitle>
                <CardDescription>
                  <div className="flex items-center text-sm">
                    <MapPin className="h-4 w-4 mr-1" />
                    {shelter.address}
                  </div>
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="text-sm space-y-1">
                      <div className="flex items-center text-muted-foreground">
                        <Phone className="h-4 w-4 mr-1" />
                        {shelter.phone}
                      </div>
                      <div className="flex items-center text-muted-foreground">
                        <Mail className="h-4 w-4 mr-1" />
                        {shelter.email}
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="flex items-center justify-end text-sm text-muted-foreground mb-1">
                        <PawPrint className="h-4 w-4 mr-1" />
                        {shelter.total_pets} pets
                      </div>
                    </div>
                  </div>
                  <Button className="w-full opacity-0 group-hover:opacity-100 transition-opacity">
                    View Details
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
}

========================================

File: ./frontend/src/pages/PetDetailPage.tsx
----------------------------------------
import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { ChevronLeft, Heart, MapPin, Phone, Mail, Calendar, Info, PawPrint, ChevronRight } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';
import { Pet } from '@/types/api';
import api from '@/lib/axios';

function PetDetailPage() {
    const { id } = useParams();
    const navigate = useNavigate();
    const { isAuthenticated } = useAuth();
    const { toast } = useToast();
    const [pet, setPet] = useState<Pet | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [isFavorited, setIsFavorited] = useState(false);
    const [isToggling, setIsToggling] = useState(false);
    const [currentImageIndex, setCurrentImageIndex] = useState(0);  // Add this line

    useEffect(() => {
        const fetchPet = async () => {
            try {
                setIsLoading(true);
                const response = await api.get(`/pets/${id}`);
                if (response.data.success) {
                    setPet(response.data.data);
                    setCurrentImageIndex(0); // Reset image index when pet data changes
                    
                    if (isAuthenticated) {
                        const favResponse = await api.get(`/pets/${id}/favorite`);
                        setIsFavorited(favResponse.data.data.is_favorited);
                    }
                } else {
                    throw new Error(response.data.error || 'Failed to load pet details');
                }
            } catch (err: any) {
                const errorMsg = err.response?.data?.error || err.message || 'Failed to load pet details';
                setError(errorMsg);
                toast({
                    variant: "destructive",
                    title: "Error",
                    description: errorMsg,
                });
            } finally {
                setIsLoading(false);
            }
        };

        fetchPet();
    }, [id, isAuthenticated, toast]);

    const navigateImage = (direction: 'next' | 'prev') => {
        if (!pet?.images?.length) return;
        
        setCurrentImageIndex(prev => {
            if (direction === 'next') {
                return prev === pet.images!.length - 1 ? 0 : prev + 1;
            } else {
                return prev === 0 ? pet.images!.length - 1 : prev - 1;
            }
        });
    };

    const handleFavoriteToggle = async () => {
        if (!isAuthenticated) {
            navigate('/login', { state: { from: `/pets/${id}` } });
            return;
        }

        try {
            setIsToggling(true);
            if (isFavorited) {
                await api.delete(`/pets/${id}/favorite`);
                toast({
                    title: "Removed from favorites",
                    description: "Pet has been removed from your favorites",
                });
            } else {
                await api.post(`/pets/${id}/favorite`);
                toast({
                    title: "Added to favorites",
                    description: "Pet has been added to your favorites",
                });
            }
            setIsFavorited(!isFavorited);
        } catch (err) {
            toast({
                variant: "destructive",
                title: "Error",
                description: "Failed to update favorites",
            });
        } finally {
            setIsToggling(false);
        }
    };

    const handleAdopt = () => {
        if (!isAuthenticated) {
            navigate('/login', { state: { from: `/pets/${id}` } });
            return;
        }
        navigate(`/adopt/${id}`);
    };

    if (isLoading) {
        return (
            <div className="container max-w-4xl mx-auto p-4">
                <div className="h-96 flex items-center justify-center">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
                </div>
            </div>
        );
    }

    if (error || !pet) {
        return (
            <div className="container max-w-4xl mx-auto p-4">
                <Card>
                    <CardContent className="p-6">
                        <h2 className="text-lg font-semibold mb-2">Error</h2>
                        <p className="text-muted-foreground">{error || 'Pet not found'}</p>
                        <Button
                            className="mt-4"
                            variant="outline"
                            onClick={() => navigate('/pets')}
                        >
                            <ChevronLeft className="mr-2 h-4 w-4" />
                            Back to Pets
                        </Button>
                    </CardContent>
                </Card>
            </div>
        );
    }

    return (
        <div className="container max-w-4xl mx-auto p-4">
      <Button
        variant="ghost"
        className="mb-4"
        onClick={() => navigate('/pets')}
      >
        <ChevronLeft className="mr-2 h-4 w-4" />
        Back to Pets
      </Button>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      {/* Image Gallery */}
      <div className="space-y-4">
          <div className="aspect-square relative bg-muted rounded-lg overflow-hidden">
              {pet.images && pet.images.length > 0 ? (
                  <>
                      <img
                          src={pet.images[currentImageIndex].url}
                          alt={`${pet.name} - ${pet.breed}`}
                          className="w-full h-full object-contain"  // Changed from object-cover
                          style={{
                              backgroundColor: 'white',  // Add white background
                              maxHeight: '600px'        // Limit maximum height
                          }}
                      />
                      {pet.images.length > 1 && (
                          <>
                              <Button
                                  variant="secondary"
                                  size="icon"
                                  className="absolute left-2 top-1/2 -translate-y-1/2"
                                  onClick={() => navigateImage('prev')}
                              >
                                  <ChevronLeft className="h-4 w-4" />
                              </Button>
                              <Button
                                  variant="secondary"
                                  size="icon"
                                  className="absolute right-2 top-1/2 -translate-y-1/2"
                                  onClick={() => navigateImage('next')}
                              >
                                  <ChevronRight className="h-4 w-4" />
                              </Button>
                          </>
                      )}
                  </>
              ) : (
                  <div className="w-full h-full flex items-center justify-center">
                      <PawPrint className="h-12 w-12 text-muted-foreground" />
                  </div>
              )}
          </div>

                  {/* Thumbnail Grid */}
                  {pet.images && pet.images.length > 1 && (
                      <div className="grid grid-cols-4 gap-2">
                          {pet.images.map((image, index) => (
                              <button
                                  key={image.image_id}
                                  className={`aspect-square rounded-md overflow-hidden border-2 
                                      ${currentImageIndex === index ? 'border-primary' : 'border-transparent'}`}
                                  onClick={() => setCurrentImageIndex(index)}
                              >
                                  <img
                                      src={image.url}
                                      alt={`${pet.name} ${index + 1}`}
                                      className="w-full h-full object-contain bg-white"
                                  />
                              </button>
                          ))}
                      </div>
                  )}
                </div>
        {/* Pet Details */}
        <div className="space-y-6">
          <div>
            <h1 className="text-3xl font-bold mb-2">{pet.name}</h1>
            <div className="flex flex-wrap gap-2 mb-4">
              <Badge variant="secondary">{pet.species}</Badge>
              <Badge variant="secondary">{pet.breed}</Badge>
              <Badge variant="secondary">{pet.gender}</Badge>
              <Badge variant="secondary">{pet.age} years old</Badge>
            </div>
            <p className="text-muted-foreground">{pet.description}</p>
          </div>

          {/* Traits */}
          {pet.traits && Object.keys(pet.traits).length > 0 && (
            <div>
              <h2 className="text-xl font-semibold mb-3">Characteristics</h2>
              {Object.entries(pet.traits).map(([category, traits]) => (
                <div key={category} className="mb-4">
                  <h3 className="text-sm font-medium text-muted-foreground mb-2">
                    {category}:
                  </h3>
                  <div className="flex flex-wrap gap-2">
                    {traits.map((trait) => (
                      <Badge key={trait} variant="outline">
                        {trait}
                      </Badge>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          )}

          {/* Shelter Information */}
          <Card>
            <CardContent className="p-6">
              <h2 className="text-xl font-semibold mb-3">Available at</h2>
              <div className="space-y-2">
                <p className="flex items-center">
                  <MapPin className="mr-2 h-4 w-4" />
                  {pet.shelter_name}
                </p>
              </div>
            </CardContent>
          </Card>

          {/* Action Buttons */}
          <div className="flex gap-4">
            <Button onClick={handleAdopt} className="flex-1">
              Start Adoption Process
            </Button>
            <Button 
              variant="outline" 
              className={`w-auto ${isFavorited ? 'bg-primary text-primary-foreground' : ''}`}
              onClick={handleFavoriteToggle}
              disabled={isToggling}
            >
              <Heart className={`h-4 w-4 ${isFavorited ? 'fill-current' : ''}`} />
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}

export default PetDetailPage;

========================================

File: ./frontend/src/pages/PetsPage.tsx
----------------------------------------
import { useState, useEffect, useCallback } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { PetFilters } from '@/components/pets/PetFilters';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent } from '@/components/ui/card';
import { Search, PawPrint } from 'lucide-react';
import { PetCard } from '@/components/pets/PetCard';
import api from '@/lib/axios';
import { Pet, ApiResponse, PaginatedResponse } from '@/types/api';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/AuthContext';
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from "@/components/ui/select";

interface PetFilters {
    species?: string;
    breed?: string;
    ageMin?: number;
    ageMax?: number;
    gender?: string;
    size?: string;
    goodWith?: string[];
    traits?: string[];
    sortBy?: string;
}

interface PetFiltersProps {
    onFiltersChange: (filters: PetFilters) => void;
    initialFilters?: PetFilters;
    availableTraits: string[];
}

function PetsPage() {
    const navigate = useNavigate();
    const [searchParams, setSearchParams] = useSearchParams();
    const [pets, setPets] = useState<Pet[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [searchTerm, setSearchTerm] = useState(searchParams.get('search') || '');
    const [filters, setFilters] = useState<PetFilters>({});
    const [availableTraits, setAvailableTraits] = useState<string[]>([]);
    const [totalPages, setTotalPages] = useState(1);
    const { toast } = useToast();
    const { isAuthenticated } = useAuth();

    const currentPage = parseInt(searchParams.get('page') || '1', 10);
    const perPage = 12;

    const updateUrlParams = useCallback((page: number, search: string, currentFilters: PetFilters) => {
        const newParams = new URLSearchParams(searchParams);
        
        if (page > 1) newParams.set('page', page.toString());
        else newParams.delete('page');
        
        if (search) newParams.set('search', search);
        else newParams.delete('search');
        
        Object.entries(currentFilters).forEach(([key, value]) => {
            if (value !== undefined && value !== null && value !== '') {
                if (Array.isArray(value)) {
                    newParams.delete(key);
                    value.forEach(v => newParams.append(key, v));
                } else {
                    newParams.set(key, value.toString());
                }
            } else {
                newParams.delete(key);
            }
        });

        setSearchParams(newParams);
    }, [setSearchParams, searchParams]);

    // Effect for authentication check
    useEffect(() => {
        if (!isAuthenticated) {
            navigate('/login', { state: { from: '/pets' } });
        }
    }, [isAuthenticated, navigate]);

    // Effect for fetching pets
    useEffect(() => {
        if (isAuthenticated) {
            fetchPets();
        }
    }, [currentPage, searchTerm, filters, isAuthenticated]);

    const fetchPets = async () => {
        try {
            setLoading(true);
            const response = await api.get<ApiResponse<PaginatedResponse<Pet>>>('/pets', { 
                params: {
                    page: currentPage,
                    perPage,
                    offset: (currentPage - 1) * perPage,
                    search: searchTerm,
                    sortBy: filters.sortBy || 'newest',
                    ...filters
                }
            });

            if (response.data.success) {
                setPets(response.data.data.items);
                const newTotalPages = Math.ceil(response.data.data.total / perPage);
                setTotalPages(newTotalPages);
                
                if (currentPage > newTotalPages && newTotalPages > 0) {
                    updateUrlParams(1, searchTerm, filters);
                }
            } else {
                throw new Error(response.data.error || 'Failed to fetch pets');
            }
        } catch (err: any) {
            const errorMessage = err.response?.data?.error || err.message || 'Failed to fetch pets';
            setError(errorMessage);
            toast({
                variant: "destructive",
                title: "Error",
                description: errorMessage,
            });
        } finally {
            setLoading(false);
        }
    };

    const handleSearch = (event: React.FormEvent) => {
        event.preventDefault();
        updateUrlParams(1, searchTerm, filters);
    };

    const handleFilterChange = (newFilters: PetFilters) => {
        setFilters(newFilters);
        updateUrlParams(1, searchTerm, newFilters);
    };

    const handleSortChange = (value: string) => {
        const newFilters = { ...filters, sortBy: value };
        setFilters(newFilters);
        updateUrlParams(1, searchTerm, newFilters);
    };

    const handlePageChange = (page: number) => {
        updateUrlParams(page, searchTerm, filters);
    };

    // Pagination Controls Component
    const PaginationControls = () => {
        const maxVisiblePages = 5;
        let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
        let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

        if (endPage - startPage + 1 < maxVisiblePages) {
            startPage = Math.max(1, endPage - maxVisiblePages + 1);
        }

        return (
            <div className="flex gap-2">
                <Button
                    variant="outline"
                    onClick={() => handlePageChange(currentPage - 1)}
                    disabled={currentPage === 1 || loading}
                >
                    Previous
                </Button>
                
                {startPage > 1 && (
                    <>
                        <Button
                            variant="outline"
                            onClick={() => handlePageChange(1)}
                            className="hidden sm:inline-flex"
                        >
                            1
                        </Button>
                        {startPage > 2 && <span className="px-2">...</span>}
                    </>
                )}

                {Array.from(
                    { length: endPage - startPage + 1 },
                    (_, i) => startPage + i
                ).map((page) => (
                    <Button
                        key={page}
                        variant={currentPage === page ? "default" : "outline"}
                        onClick={() => handlePageChange(page)}
                        className="hidden sm:inline-flex"
                    >
                        {page}
                    </Button>
                ))}

                {endPage < totalPages && (
                    <>
                        {endPage < totalPages - 1 && <span className="px-2">...</span>}
                        <Button
                            variant="outline"
                            onClick={() => handlePageChange(totalPages)}
                            className="hidden sm:inline-flex"
                        >
                            {totalPages}
                        </Button>
                    </>
                )}

                <div className="flex items-center px-4 sm:hidden">
                    Page {currentPage} of {totalPages}
                </div>
                
                <Button
                    variant="outline"
                    onClick={() => handlePageChange(currentPage + 1)}
                    disabled={currentPage === totalPages || loading}
                >
                    Next
                </Button>
            </div>
        );
    };

    if (loading) {
        return (
            <div className="container max-w-4xl mx-auto p-4">
                <div className="flex justify-center items-center min-h-[400px]">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
                </div>
            </div>
        );
    }

    return (
        <div className="container mx-auto p-4">
            <div className="mb-8 space-y-4">
                <div>
                    <h1 className="text-3xl font-bold mb-2">Find Your Perfect Companion</h1>
                    <p className="text-muted-foreground">
                        Browse available pets or use filters to narrow your search
                    </p>
                </div>

                <div className="flex flex-col sm:flex-row gap-4">
                    <form onSubmit={handleSearch} className="flex-1">
                        <div className="relative">
                            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                            <Input
                                placeholder="Search by name, breed, or description..."
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                                className="pl-9"
                            />
                        </div>
                    </form>
                    <div className="flex gap-2">
                        <Select
                            value={filters.sortBy || 'newest'}
                            onValueChange={handleSortChange}
                        >
                            <SelectTrigger className="w-[180px]">
                                <SelectValue placeholder="Sort by" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="newest">Newest First</SelectItem>
                                <SelectItem value="oldest">Oldest First</SelectItem>
                                <SelectItem value="name_asc">Name (A-Z)</SelectItem>
                                <SelectItem value="name_desc">Name (Z-A)</SelectItem>
                            </SelectContent>
                        </Select>
                        <PetFilters
                            onFiltersChange={handleFilterChange}
                            initialFilters={filters}
                            availableTraits={availableTraits}
                        />
                    </div>
                </div>
            </div>

            {error && (
                <Card className="mb-8">
                    <CardContent className="p-6">
                        <p className="text-red-500">{error}</p>
                    </CardContent>
                </Card>
            )}

            {pets.length === 0 ? (
                <Card>
                    <CardContent className="p-6 text-center">
                        <PawPrint className="h-12 w-12 mx-auto mb-4 text-muted-foreground" />
                        <h3 className="text-lg font-semibold mb-2">No Pets Found</h3>
                        <p className="text-muted-foreground">
                            Try adjusting your filters or search terms
                        </p>
                    </CardContent>
                </Card>
            ) : (
                <>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {pets.map((pet) => (
                            <PetCard
                                key={pet.pet_id}
                                pet={pet}
                                onClick={() => navigate(`/pets/${pet.pet_id}`)}
                            />
                        ))}
                    </div>

                    <div className="mt-6 flex justify-center">
                        <PaginationControls />
                    </div>
                </>
            )}
        </div>
    );
}

export default PetsPage;

========================================

File: ./frontend/src/pages/shelter/NewPetPage.tsx
----------------------------------------
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import { z } from 'zod';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { PetImageUploader } from '@/components/pets/PetImageUploader';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage
} from '@/components/ui/form';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import api from '@/lib/axios';
import { ChevronLeft } from 'lucide-react';

const petFormSchema = z.object({
  name: z.string().min(1, 'Pet name is required'),
  species: z.string().min(1, 'Species is required'),
  breed: z.string().optional(),
  age: z.coerce.number().min(0, 'Age must be 0 or greater').optional(),
  gender: z.enum(['male', 'female']),
  description: z.string().min(10, 'Please provide a detailed description'),
});

type PetFormData = z.infer<typeof petFormSchema>;

export default function NewPetPage() {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [images, setImages] = useState<File[]>([]);
  const navigate = useNavigate();
  const { toast } = useToast();

  const form = useForm<PetFormData>({
    resolver: zodResolver(petFormSchema),
    defaultValues: {
      name: '',
      species: '',
      breed: '',
      description: '',
    },
  });

  const onSubmit = async (data: PetFormData) => {
    try {
      setIsSubmitting(true);
      const formData = new FormData();

      // Add all pet data to FormData
      Object.entries(data).forEach(([key, value]) => {
        if (value !== undefined) {
          formData.append(key, value.toString());
        }
      });

      // Add images to FormData
      images.forEach((image) => {
        formData.append('images[]', image);
      });

      const response = await api.post('/pets', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      if (response.data.success) {
        toast({
          title: "Success",
          description: "Pet added successfully",
        });
        navigate('/shelter/pets');
      }
    } catch (error: any) {
      toast({
        variant: "destructive",
        title: "Error",
        description: error.response?.data?.error || 'Failed to add pet',
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="container max-w-2xl mx-auto p-4">
      <Button
        variant="ghost"
        className="mb-4"
        onClick={() => navigate('/shelter/pets')}
      >
        <ChevronLeft className="mr-2 h-4 w-4" />
        Back to Pets
      </Button>

      <Card>
        <CardHeader>
          <CardTitle>Add New Pet</CardTitle>
          <CardDescription>
            Enter the details of the pet available for adoption
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Pet Name</FormLabel>
                    <FormControl>
                      <Input {...field} placeholder="Enter pet name" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="species"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Species</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select species" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="dog">Dog</SelectItem>
                        <SelectItem value="cat">Cat</SelectItem>
                        <SelectItem value="bird">Bird</SelectItem>
                        <SelectItem value="rabbit">Rabbit</SelectItem>
                        <SelectItem value="other">Other</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="grid grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="breed"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Breed (Optional)</FormLabel>
                      <FormControl>
                        <Input {...field} placeholder="Enter breed" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="age"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Age (Optional)</FormLabel>
                      <FormControl>
                        <Input 
                          type="number" 
                          min="0"
                          {...field}
                          placeholder="Enter age"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name="gender"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Gender</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select gender" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="male">Male</SelectItem>
                        <SelectItem value="female">Female</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Description</FormLabel>
                    <FormControl>
                      <Textarea
                        {...field}
                        placeholder="Describe the pet's personality, history, and any special needs..."
                        className="min-h-[100px]"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="space-y-2">
                <FormLabel>Pet Images</FormLabel>
                <PetImageUploader
                  onChange={(files) => setImages(files)}
                  maxFiles={5}
                  accept="image/*"
                />
              </div>

              <div className="flex justify-end gap-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => navigate('/shelter/pets')}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  disabled={isSubmitting}
                >
                  {isSubmitting ? 'Adding Pet...' : 'Add Pet'}
                </Button>
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  );
}

========================================

File: ./frontend/src/pages/shelter/NetPetPage.tsx
----------------------------------------
import { useNavigate } from 'react-router-dom';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import { z } from 'zod';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { PetImageUploader } from '@/components/pets/PetImageUploader';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage
} from '@/components/ui/form';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import api from '@/lib/axios';
import { useState } from 'react';
import { ChevronLeft } from 'lucide-react';

const petFormSchema = z.object({
  name: z.string().min(1, 'Pet name is required'),
  species: z.string().min(1, 'Species is required'),
  breed: z.string().optional(),
  age: z.coerce.number().min(0, 'Age must be 0 or greater').optional(),
  gender: z.enum(['male', 'female']),
  description: z.string().min(10, 'Please provide a detailed description'),
});

type PetFormData = z.infer<typeof petFormSchema>;

export default function NewPetPage() {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [images, setImages] = useState<File[]>([]);
  const navigate = useNavigate();
  const { toast } = useToast();

  const form = useForm<PetFormData>({
    resolver: zodResolver(petFormSchema),
    defaultValues: {
      name: '',
      species: '',
      breed: '',
      description: '',
    },
  });

  const onSubmit = async (data: PetFormData) => {
    try {
      setIsSubmitting(true);
      const formData = new FormData();

      // Add all pet data to FormData
      Object.entries(data).forEach(([key, value]) => {
        if (value !== undefined) {
          formData.append(key, value.toString());
        }
      });

      // Add images to FormData
      images.forEach((image) => {
        formData.append('images[]', image);
      });

      const response = await api.post('/pets', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      if (response.data.success) {
        toast({
          title: "Success",
          description: "Pet added successfully",
        });
        navigate('/shelter/pets');
      }
    } catch (error: any) {
      toast({
        variant: "destructive",
        title: "Error",
        description: error.response?.data?.error || 'Failed to add pet',
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="container max-w-2xl mx-auto p-4">
      <Button
        variant="ghost"
        className="mb-4"
        onClick={() => navigate('/shelter/pets')}
      >
        <ChevronLeft className="mr-2 h-4 w-4" />
        Back to Pets
      </Button>

      <Card>
        <CardHeader>
          <CardTitle>Add New Pet</CardTitle>
          <CardDescription>
            Enter the details of the pet available for adoption
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Pet Name</FormLabel>
                    <FormControl>
                      <Input {...field} placeholder="Enter pet name" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="species"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Species</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select species" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="dog">Dog</SelectItem>
                        <SelectItem value="cat">Cat</SelectItem>
                        <SelectItem value="bird">Bird</SelectItem>
                        <SelectItem value="rabbit">Rabbit</SelectItem>
                        <SelectItem value="other">Other</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="grid grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="breed"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Breed (Optional)</FormLabel>
                      <FormControl>
                        <Input {...field} placeholder="Enter breed" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="age"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Age (Optional)</FormLabel>
                      <FormControl>
                        <Input 
                          type="number" 
                          min="0"
                          {...field}
                          placeholder="Enter age"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name="gender"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Gender</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select gender" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="male">Male</SelectItem>
                        <SelectItem value="female">Female</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Description</FormLabel>
                    <FormControl>
                      <Textarea
                        {...field}
                        placeholder="Describe the pet's personality, history, and any special needs..."
                        className="min-h-[100px]"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="space-y-2">
                <FormLabel>Pet Images</FormLabel>
                <PetImageUploader
                  onChange={setImages}
                  maxFiles={5}
                  accept="image/*"
                />
              </div>

              <div className="flex justify-end gap-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => navigate('/shelter/pets')}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  disabled={isSubmitting}
                >
                  {isSubmitting ? 'Adding Pet...' : 'Add Pet'}
                </Button>
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  );
}

========================================

File: ./frontend/src/pages/shelter/ShelterManagement.tsx
----------------------------------------
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { PetCard } from '@/components/pets/PetCard';
import { useToast } from '@/hooks/use-toast';
import { Search, PawPrint, Plus } from 'lucide-react';
import api from '@/lib/axios';

interface Pet {
    pet_id: number;
    name: string;
    species: string;
    breed: string;
    age: number;
    gender: string;
    description: string;
    shelter_name: string;
    application_count: number;
    images?: Array<{
        image_id: number;
        url: string;
        is_primary: boolean;
    }>;
}

export default function ShelterManagement() {
    const [pets, setPets] = useState<Pet[]>([]);
    const [loading, setLoading] = useState(true);
    const [searchTerm, setSearchTerm] = useState('');
    const navigate = useNavigate();
    const { toast } = useToast();

    useEffect(() => {
        fetchPets();
    }, []);

    const fetchPets = async () => {
        try {
            setLoading(true);
            const response = await api.get('/shelter/pets');
            if (response.data.success) {
                setPets(response.data.data);
            }
        } catch (error: any) {
            toast({
                variant: "destructive",
                title: "Error",
                description: "Failed to load pets"
            });
        } finally {
            setLoading(false);
        }
    };

    const filteredPets = pets.filter(pet =>
        pet.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        pet.breed.toLowerCase().includes(searchTerm.toLowerCase()) ||
        pet.species.toLowerCase().includes(searchTerm.toLowerCase())
    );

    if (loading) {
        return (
            <div className="flex justify-center items-center min-h-screen">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            </div>
        );
    }

    return (
        <div className="container mx-auto p-6">
            <Card>
                <CardHeader>
                    <div className="flex justify-between items-center">
                        <div>
                            <CardTitle>Manage Pets</CardTitle>
                            <CardDescription>
                                Add and manage your shelter's pets
                            </CardDescription>
                        </div>
                        <Button onClick={() => navigate('/shelter/pets/new')}>
                            <Plus className="mr-2 h-4 w-4" />
                            Add New Pet
                        </Button>
                    </div>
                </CardHeader>
                <CardContent>
                    <div className="mb-6">
                        <div className="relative">
                            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                            <Input
                                placeholder="Search pets..."
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                                className="pl-9"
                            />
                        </div>
                    </div>

                    {filteredPets.length === 0 ? (
                        <div className="text-center py-12">
                            <PawPrint className="mx-auto h-12 w-12 text-muted-foreground" />
                            <h3 className="mt-4 text-lg font-semibold">No Pets Found</h3>
                            <p className="text-muted-foreground">
                                {pets.length === 0
                                    ? "Start by adding your first pet"
                                    : "No pets match your search"}
                            </p>
                        </div>
                    ) : (
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                            {filteredPets.map((pet) => (
                                <div key={pet.pet_id} className="relative group">
                                    <PetCard
                                        pet={pet}
                                        onClick={() => navigate(`/pets/${pet.pet_id}`)}
                                    />
                                    <div className="absolute top-2 right-2 space-x-2 opacity-0 group-hover:opacity-100 transition-opacity">
                                        <Button
                                            variant="secondary"
                                            size="sm"
                                            onClick={(e) => {
                                                e.stopPropagation();
                                                navigate(`/shelter/pets/${pet.pet_id}/edit`);
                                            }}
                                        >
                                            Edit
                                        </Button>
                                        {pet.application_count > 0 && (
                                            <Button
                                                variant="outline"
                                                size="sm"
                                                onClick={(e) => {
                                                    e.stopPropagation();
                                                    navigate(`/shelter/pets/${pet.pet_id}/applications`);
                                                }}
                                            >
                                                {pet.application_count} Applications
                                            </Button>
                                        )}
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}
                </CardContent>
            </Card>
        </div>
    );
}

========================================

File: ./frontend/src/pages/shelter/ShelterDashboard.tsx
----------------------------------------
import { useEffect, useState } from 'react';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Link } from 'react-router-dom';
import { PawPrint, FileText, Users, Plus } from 'lucide-react';
import api from '@/lib/axios';

interface ShelterStats {
  totalPets: number;
  activeApplications: number;
  adoptedPets: number;
}

export default function ShelterDashboard() {
  const [stats, setStats] = useState<ShelterStats>({
    totalPets: 0,
    activeApplications: 0,
    adoptedPets: 0
  });

  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const response = await api.get('/shelter/stats');
        setStats(response.data.data);
      } catch (error) {
        console.error('Failed to fetch shelter stats:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchStats();
  }, []);

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6">
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <div>
            <h2 className="text-3xl font-bold tracking-tight">Shelter Dashboard</h2>
            <p className="text-muted-foreground">
              Manage your shelter's pets and adoption applications
            </p>
          </div>
          <Button asChild>
            <Link to="/shelter/pets/new">
              <Plus className="mr-2 h-4 w-4" />
              Add New Pet
            </Link>
          </Button>
        </div>

        <div className="grid gap-4 md:grid-cols-3">
          <Card>
            <CardHeader>
              <CardTitle>Available Pets</CardTitle>
              <div className="text-3xl font-bold">{stats.totalPets}</div>
            </CardHeader>
            <CardContent>
              <Button asChild variant="link" className="p-0">
                <Link to="/shelter/pets">View All Pets</Link>
              </Button>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Active Applications</CardTitle>
              <div className="text-3xl font-bold">{stats.activeApplications}</div>
            </CardHeader>
            <CardContent>
              <Button asChild variant="link" className="p-0">
                <Link to="/shelter/applications">View Applications</Link>
              </Button>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Successful Adoptions</CardTitle>
              <div className="text-3xl font-bold">{stats.adoptedPets}</div>
            </CardHeader>
            <CardContent>
              <Button asChild variant="link" className="p-0">
                <Link to="/shelter/adoptions">View History</Link>
              </Button>
            </CardContent>
          </Card>
        </div>

        {/* Recent Applications */}
        <Card className="mt-6">
          <CardHeader>
            <CardTitle>Recent Applications</CardTitle>
            <CardDescription>
              Latest adoption applications requiring attention
            </CardDescription>
          </CardHeader>
          <CardContent>
            {/* Add recent applications table/list here */}
          </CardContent>
        </Card>

        {/* Featured Pets */}
        <Card className="mt-6">
          <CardHeader>
            <CardTitle>Featured Pets</CardTitle>
            <CardDescription>
              Pets that have been listed the longest
            </CardDescription>
          </CardHeader>
          <CardContent>
            {/* Add featured pets grid here */}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

========================================

File: ./frontend/src/pages/blog/BlogListPage.tsx
----------------------------------------
import React, { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Search, Calendar, ArrowRight, ShoppingCart } from 'lucide-react';
import api from '@/lib/axios';

interface Product {
  product_id: number;
  name: string;
  description: string;
  price: number;
  affiliate_link: string;
}

interface BlogPost {
  post_id: number;
  title: string;
  content: string;
  publication_date: string;
  author_name: string;
  products?: Product[] | null;
}

export default function BlogListPage() {
  const [posts, setPosts] = useState<BlogPost[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');
  const navigate = useNavigate();

  useEffect(() => {
    fetchPosts();
  }, []);

  const fetchPosts = async () => {
    try {
      setLoading(true);
      const response = await api.get('/blog');
      console.log('Blog response:', response);
      
      if (response.data.success && response.data.data) {
        setPosts(response.data.data);
      }
    } catch (error) {
      console.error('Failed to fetch blog posts:', error);
    } finally {
      setLoading(false);
    }
  };

  const truncateContent = (content: string, maxLength: number = 150) => {
    if (!content) return '';
    if (content.length <= maxLength) return content;
    return content.substring(0, maxLength) + '...';
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6">
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">Pet Care Blog</h1>
        <p className="text-muted-foreground">
          Tips, advice, and product recommendations for pet parents
        </p>
      </div>

      <div className="relative max-w-xl mb-8">
        <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
        <Input
          placeholder="Search blog posts..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
          className="pl-9"
        />
      </div>

      <div className="grid gap-6 md:grid-cols-2 lg:grid-cols-3">
        {posts.map((post) => (
          <Card key={post.post_id} className="flex flex-col">
            <CardHeader>
              <CardTitle className="line-clamp-2">{post.title}</CardTitle>
              <CardDescription className="flex items-center gap-2">
                <Calendar className="h-4 w-4" />
                {new Date(post.publication_date).toLocaleDateString()}
                <span className="text-sm">by {post.author_name}</span>
              </CardDescription>
            </CardHeader>
            <CardContent className="flex-1">
              <p className="text-muted-foreground mb-4">
                {truncateContent(post.content)}
              </p>
              {post.products && post.products.length > 0 && post.products.some(p => p !== null) && (
                <div className="mb-4">
                  <h4 className="text-sm font-medium mb-2">Featured Products:</h4>
                  <div className="flex flex-wrap gap-2">
                    {post.products.filter(Boolean).map((product) => (
                      <Button
                        key={product.product_id}
                        variant="outline"
                        size="sm"
                        className="flex items-center gap-1"
                      >
                        <ShoppingCart className="h-3 w-3" />
                        {product.name}
                      </Button>
                    ))}
                  </div>
                </div>
              )}
              <Button
                variant="link"
                className="p-0"
                onClick={() => navigate(`/blog/${post.post_id}`)}
              >
                Read More <ArrowRight className="ml-2 h-4 w-4" />
              </Button>
            </CardContent>
          </Card>
        ))}
      </div>
    </div>
  );
}

========================================

File: ./frontend/src/pages/blog/BlogDetailPage.tsx
----------------------------------------
import React, { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { ChevronLeft, Calendar, User, ShoppingCart } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import api from '@/lib/axios';

interface Product {
  product_id: number;
  name: string;
  description: string;
  price: number;
  affiliate_link: string;
}

interface BlogPost {
  post_id: number;
  title: string;
  content: string;
  publication_date: string;
  author_name: string;
  products?: Product[] | null;
}

export default function BlogDetailPage() {
  const { id } = useParams();
  const navigate = useNavigate();
  const { toast } = useToast();
  const [post, setPost] = useState<BlogPost | null>(null);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchPost();
  }, [id]);

  const fetchPost = async () => {
    try {
      setLoading(true);
      const response = await api.get(`/blog/posts/${id}`);
      console.log('Blog post response:', response);

      if (response.data.success) {
        setPost(response.data.data);
      } else {
        throw new Error(response.data.error || 'Failed to fetch post');
      }
    } catch (error) {
      console.error('Error:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to load blog post",
      });
      navigate('/blog/posts');
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
      </div>
    );
  }

  if (!post) {
    return (
      <div className="container max-w-4xl mx-auto p-6">
        <Card>
          <CardContent className="flex flex-col items-center justify-center py-12">
            <h3 className="text-lg font-semibold mb-2">Post Not Found</h3>
            <p className="text-muted-foreground mb-4">
              The blog post you're looking for doesn't exist or has been removed.
            </p>
            <Button onClick={() => navigate('/blog/posts')}>
              Back to Blog
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="container max-w-4xl mx-auto p-6">
      <Button
        variant="ghost"
        className="mb-6"
        onClick={() => navigate('/blog/posts')}
      >
        <ChevronLeft className="mr-2 h-4 w-4" />
        Back to Blog
      </Button>

      <Card>
        <CardHeader className="space-y-4">
          <CardTitle className="text-3xl">{post.title}</CardTitle>
          <div className="flex items-center gap-4 text-muted-foreground">
            <div className="flex items-center">
              <Calendar className="mr-2 h-4 w-4" />
              {new Date(post.publication_date).toLocaleDateString()}
            </div>
            <div className="flex items-center">
              <User className="mr-2 h-4 w-4" />
              {post.author_name}
            </div>
          </div>
        </CardHeader>
        <CardContent className="prose max-w-none">
          {post.content.split('\n').map((paragraph, index) => (
            <p key={index}>{paragraph}</p>
          ))}

          {post.products && post.products.length > 0 && post.products.some(p => p !== null) && (
            <div className="mt-8 border-t pt-8">
              <h2 className="text-xl font-semibold mb-4">Recommended Products</h2>
              <div className="grid gap-4 md:grid-cols-2">
                {post.products.filter(Boolean).map((product) => (
                  product && (
                    <Card key={product.product_id}>
                      <CardContent className="p-4">
                        <h3 className="font-semibold mb-2">{product.name}</h3>
                        <p className="text-sm text-muted-foreground mb-4">
                          {product.description}
                        </p>
                        <div className="flex justify-between items-center">
                          <span className="font-bold">${product.price}</span>
                          <Button variant="outline" className="flex items-center gap-2">
                            <ShoppingCart className="h-4 w-4" />
                            View Product
                          </Button>
                        </div>
                      </CardContent>
                    </Card>
                  )
                ))}
              </div>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  );
}

========================================

File: ./frontend/src/pages/RegisterPage.tsx
----------------------------------------
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import { useNavigate, Link } from 'react-router-dom';
import { useSetAtom } from 'jotai';
import { userAtom } from '@/stores/auth';
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { useToast } from '@/hooks/use-toast';
import api from '@/lib/axios';
import { ApiResponse } from '@/types/api';

const registerSchema = z.object({
  username: z.string()
    .min(3, 'Username must be at least 3 characters')
    .max(50, 'Username cannot exceed 50 characters'),
  email: z.string()
    .email('Please enter a valid email'),
  password: z.string()
    .min(8, 'Password must be at least 8 characters')
    .regex(/[A-Z]/, 'Password must contain at least one uppercase letter')
    .regex(/[a-z]/, 'Password must contain at least one lowercase letter')
    .regex(/[0-9]/, 'Password must contain at least one number'),
  confirmPassword: z.string()
}).refine((data) => data.password === data.confirmPassword, {
  message: "Passwords don't match",
  path: ["confirmPassword"],
});

type RegisterFormData = z.infer<typeof registerSchema>;

function RegisterPage() {
  const navigate = useNavigate();
  const setUser = useSetAtom(userAtom);
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<RegisterFormData>({
    resolver: zodResolver(registerSchema),
    defaultValues: {
      username: '',
      email: '',
      password: '',
      confirmPassword: '',
    },
  });

  const onSubmit = async (data: RegisterFormData) => {
      try {
          setIsLoading(true);
          
          const response = await api.post<ApiResponse<{ user: any; token: string }>>('/auth/register', {
              username: data.username,
              email: data.email,
              password: data.password,
          });
          
          // Check if response.data.data exists (new format) or fall back to response.data (old format)
          const authData = response.data.data || response.data;
          
          // Save token
          localStorage.setItem('token', authData.token);
          
          // Update user state
          setUser(authData.user);
          
          // Show success toast
          toast({
              title: "Registration successful!",
              description: "Welcome to PawPath! Let's find your perfect pet companion.",
          });
          
          // Navigate to quiz or home page
          navigate('/quiz');
      } catch (err: any) {
          const errorMessage = err.response?.data?.error || 'Registration failed. Please try again.';
          form.setError('root', { 
              message: errorMessage 
          });
          
          toast({
              variant: "destructive",
              title: "Registration failed",
              description: errorMessage,
          });
      } finally {
          setIsLoading(false);
      }
  };

  return (
    <div className="container max-w-lg mx-auto p-4">
      <Card>
        <CardHeader>
          <CardTitle>Create an Account</CardTitle>
          <CardDescription>
            Join PawPath to find your perfect pet companion
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              {form.formState.errors.root && (
                <Alert variant="destructive">
                  <AlertDescription>
                    {form.formState.errors.root.message}
                  </AlertDescription>
                </Alert>
              )}
              
              <FormField
                control={form.control}
                name="username"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Username</FormLabel>
                    <FormControl>
                      <Input 
                        {...field}
                        type="text"
                        placeholder="johndoe"
                        autoComplete="username"
                        disabled={isLoading}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email</FormLabel>
                    <FormControl>
                      <Input 
                        {...field}
                        type="email"
                        placeholder="john.doe@example.com"
                        autoComplete="email"
                        disabled={isLoading}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="password"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Password</FormLabel>
                    <FormControl>
                      <Input 
                        {...field}
                        type="password"
                        placeholder="••••••••"
                        autoComplete="new-password"
                        disabled={isLoading}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="confirmPassword"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Confirm Password</FormLabel>
                    <FormControl>
                      <Input 
                        {...field}
                        type="password"
                        placeholder="••••••••"
                        autoComplete="new-password"
                        disabled={isLoading}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <Button 
                type="submit" 
                className="w-full"
                disabled={isLoading}
              >
                {isLoading ? 'Creating account...' : 'Create Account'}
              </Button>
            </form>
          </Form>
        </CardContent>
        <CardFooter className="flex flex-col space-y-2">
          <p className="text-sm text-muted-foreground">
            Already have an account?{' '}
            <Button 
              variant="link" 
              className="px-0"
              onClick={() => navigate('/login')}
            >
              Sign in
            </Button>
          </p>
          <p className="text-xs text-muted-foreground text-center">
            By creating an account, you agree to our{' '}
            <Link to="/terms" className="underline hover:text-primary">
              Terms of Service
            </Link>
            {' '}and{' '}
            <Link to="/privacy" className="underline hover:text-primary">
              Privacy Policy
            </Link>
          </p>
        </CardFooter>
      </Card>
    </div>
  );
}

export default RegisterPage;

========================================

File: ./frontend/src/pages/ShelterDetailPage.tsx
----------------------------------------
import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { ChevronLeft, MapPin, Phone, Mail, PawPrint } from 'lucide-react';
import { PetCard } from '@/components/pets/PetCard';
import api from '@/lib/axios';

interface Shelter {
  shelter_id: number;
  name: string;
  address: string;
  phone: string;
  email: string;
  is_no_kill: boolean;
  total_pets: number;
  active_applications: number;
}

interface Pet {
  pet_id: number;
  name: string;
  species: string;
  breed: string;
  age: number;
  gender: string;
  description: string;
  shelter_name: string;
  images?: Array<{
    image_id: number;
    url: string;
    is_primary: boolean;
  }>;
  traits?: {
    [category: string]: string[];
  };
}

export default function ShelterDetailPage() {
  const { id } = useParams();
  const navigate = useNavigate();
  const { toast } = useToast();
  const [shelter, setShelter] = useState<Shelter | null>(null);
  const [pets, setPets] = useState<Pet[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchShelterDetails();
  }, [id]);

  const fetchShelterDetails = async () => {
    try {
      setLoading(true);
      // Fetch shelter details
      const shelterResponse = await api.get(`/shelters/${id}`);
      if (!shelterResponse.data.success) {
        throw new Error(shelterResponse.data.error || 'Failed to fetch shelter details');
      }
      setShelter(shelterResponse.data.data);

      // Fetch shelter's pets
      const petsResponse = await api.get('/pets', {
        params: {
          shelter_id: id
        }
      });
      if (petsResponse.data.success) {
        setPets(petsResponse.data.data.items);
      }
    } catch (error: any) {
      console.error('Error fetching shelter details:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: error.message || "Failed to load shelter details",
      });
      navigate('/shelters');
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="container mx-auto p-4">
        <div className="flex justify-center items-center min-h-[400px]">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
        </div>
      </div>
    );
  }

  if (!shelter) {
    return (
      <div className="container mx-auto p-4">
        <Card>
          <CardContent className="p-6 text-center">
            <h3 className="text-lg font-semibold mb-2">Shelter not found</h3>
            <p className="text-muted-foreground mb-4">
              The shelter you're looking for doesn't exist or has been removed.
            </p>
            <Button onClick={() => navigate('/shelters')}>
              View All Shelters
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-4">
      <Button
        variant="ghost"
        className="mb-4"
        onClick={() => navigate('/shelters')}
      >
        <ChevronLeft className="mr-2 h-4 w-4" />
        Back to Shelters
      </Button>

      <div className="grid gap-6">
        {/* Shelter Info Card */}
        <Card>
          <CardHeader>
            <div className="flex justify-between items-start">
              <div>
                <CardTitle className="text-3xl">{shelter.name}</CardTitle>
                <CardDescription className="flex items-center mt-2">
                  <MapPin className="h-4 w-4 mr-2" />
                  {shelter.address}
                </CardDescription>
              </div>
              {shelter.is_no_kill && (
                <Badge variant="success">No-Kill Shelter</Badge>
              )}
            </div>
          </CardHeader>
          <CardContent>
            <div className="grid gap-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <div className="flex items-center text-muted-foreground">
                    <Phone className="h-4 w-4 mr-2" />
                    {shelter.phone}
                  </div>
                  <div className="flex items-center text-muted-foreground">
                    <Mail className="h-4 w-4 mr-2" />
                    {shelter.email}
                  </div>
                </div>
                <div className="space-y-2">
                  <div className="flex items-center text-muted-foreground">
                    <PawPrint className="h-4 w-4 mr-2" />
                    {shelter.total_pets} pets available
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Available Pets Section */}
        <Card>
          <CardHeader>
            <CardTitle>Available Pets</CardTitle>
            <CardDescription>
              Pets currently available for adoption at {shelter.name}
            </CardDescription>
          </CardHeader>
          <CardContent>
            {pets.length === 0 ? (
              <div className="text-center py-8">
                <PawPrint className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                <h3 className="text-lg font-semibold mb-2">No Pets Available</h3>
                <p className="text-muted-foreground">
                  This shelter currently has no pets listed for adoption.
                </p>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {pets.map((pet) => (
                  <PetCard
                    key={pet.pet_id}
                    pet={pet}
                    onClick={() => navigate(`/pets/${pet.pet_id}`)}
                  />
                ))}
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

========================================

File: ./frontend/src/pages/LoginPage.tsx
----------------------------------------
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import { useNavigate, useLocation } from 'react-router-dom';
import { useSetAtom } from 'jotai';
import { userAtom } from '@/stores/auth';
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription } from '@/components/ui/alert';
import api from '@/lib/axios';
import { ApiResponse } from '@/types/api';

// Form validation schema
const loginSchema = z.object({
  email: z.string().email('Please enter a valid email'),
  password: z.string().min(6, 'Password must be at least 6 characters'),
});

type LoginFormData = z.infer<typeof loginSchema>;

function LoginPage() {
  const navigate = useNavigate();
  const location = useLocation();
  const setUser = useSetAtom(userAtom);
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  // Get return URL from location state or default to home
  const from = (location.state as any)?.from?.pathname || '/';

  const { register, handleSubmit, formState: { errors } } = useForm<LoginFormData>({
    resolver: zodResolver(loginSchema)
  });

  const onSubmit = async (data: LoginFormData) => {
      try {
          setIsLoading(true);
          setError(null);
          
          const response = await api.post<ApiResponse<{ user: any; token: string }>>('/auth/login', data);
          
          // Check if response.data.data exists (new format) or fall back to response.data (old format)
          const authData = response.data.data || response.data;
          
          // Save token
          localStorage.setItem('token', authData.token);
          
          // Update user state
          setUser(authData.user);
          
          // Navigate to return URL
          navigate(from, { replace: true });
      } catch (err: any) {
          const errorMessage = err.response?.data?.error || 'Failed to login';
          setError(errorMessage);
      } finally {
          setIsLoading(false);
      }
  };

  return (
    <div className="container max-w-lg mx-auto p-4">
      <Card>
        <CardHeader>
          <CardTitle>Welcome Back</CardTitle>
          <CardDescription>Sign in to your PawPath account</CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
            {error && (
              <Alert variant="destructive">
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}
            
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                {...register('email')}
                placeholder="you@example.com"
              />
              {errors.email && (
                <p className="text-sm text-red-500">{errors.email.message}</p>
              )}
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="password">Password</Label>
              <Input
                id="password"
                type="password"
                {...register('password')}
                placeholder="••••••••"
              />
              {errors.password && (
                <p className="text-sm text-red-500">{errors.password.message}</p>
              )}
            </div>
            
            <Button 
              type="submit" 
              className="w-full"
              disabled={isLoading}
            >
              {isLoading ? 'Signing in...' : 'Sign In'}
            </Button>
          </form>
        </CardContent>
        <CardFooter className="flex justify-center">
          <p className="text-sm text-muted-foreground">
            Don't have an account?{' '}
            <Button 
              variant="link" 
              className="px-0"
              onClick={() => navigate('/register')}
            >
              Register
            </Button>
          </p>
        </CardFooter>
      </Card>
    </div>
  );
}

export default LoginPage;

========================================

File: ./frontend/src/pages/ProfilePage.tsx
----------------------------------------
import { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { profileService } from '@/services/profile';
import { UserProfile, ProfileUpdateData } from '@/types/profile';
import { useToast } from '@/hooks/use-toast';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useAuth } from '@/contexts/AuthContext';

const profileSchema = z.object({
    first_name: z.string().min(1, 'First name is required'),
    last_name: z.string().min(1, 'Last name is required'),
    phone: z.string().min(10, 'Please enter a valid phone number'),
    address: z.string().optional(),
    city: z.string().optional(),
    state: z.string().optional(),
    zip_code: z.string().optional(),
    housing_type: z.enum(['house', 'apartment', 'condo', 'other']).optional(),
    has_yard: z.boolean().optional(),
    other_pets: z.string().optional(),
    household_members: z.number().int().min(1).optional()
});

export default function ProfilePage() {
    const [profile, setProfile] = useState<UserProfile | null>(null);
    const [loading, setLoading] = useState(true);
    const { toast } = useToast();
    const { user } = useAuth();
    
    const form = useForm<ProfileUpdateData>({
        resolver: zodResolver(profileSchema)
    });

    useEffect(() => {
        loadProfile();
    }, []);

    const loadProfile = async () => {
        try {
            const data = await profileService.getProfile();
            setProfile(data);
            form.reset({
                first_name: data.first_name,
                last_name: data.last_name,
                phone: data.phone,
                address: data.address || undefined,
                city: data.city || undefined,
                state: data.state || undefined,
                zip_code: data.zip_code || undefined,
                housing_type: data.housing_type || undefined,
                has_yard: data.has_yard || undefined,
                other_pets: data.other_pets || undefined,
                household_members: data.household_members || undefined
            });
        } catch (error: any) {
            toast({
                variant: "destructive",
                title: "Error",
                description: "Failed to load profile",
            });
        } finally {
            setLoading(false);
        }
    };

    const renderRoleSpecificContent = () => {
        switch (user?.role) {
            case 'shelter_staff':
                return (
                    <TabsContent value="shelter">
                        <Card>
                            <CardHeader>
                                <CardTitle>Shelter Management</CardTitle>
                                <CardDescription>
                                    Manage your shelter's information and pets
                                </CardDescription>
                            </CardHeader>
                            <CardContent>
                                {/* Shelter staff specific content */}
                            </CardContent>
                        </Card>
                    </TabsContent>
                );
            case 'admin':
                return (
                    <TabsContent value="admin">
                        <Card>
                            <CardHeader>
                                <CardTitle>Admin Dashboard</CardTitle>
                                <CardDescription>
                                    System administration tools
                                </CardDescription>
                            </CardHeader>
                            <CardContent>
                                {/* Admin specific content */}
                            </CardContent>
                        </Card>
                    </TabsContent>
                );
            default:
                return null;
        }
    };

    if (loading) {
        return <div>Loading...</div>;
    }

    return (
        <div className="container max-w-4xl mx-auto p-4">
            <Tabs defaultValue="profile">
                <TabsList>
                    <TabsTrigger value="profile">Profile</TabsTrigger>
                    {user?.role === 'shelter_staff' && (
                        <TabsTrigger value="shelter">Shelter Management</TabsTrigger>
                    )}
                    {user?.role === 'admin' && (
                        <TabsTrigger value="admin">Admin Dashboard</TabsTrigger>
                    )}
                </TabsList>

                <TabsContent value="profile">
                    <Card>
                        <CardHeader>
                            <CardTitle>Profile Settings</CardTitle>
                            <CardDescription>
                                Manage your personal information
                            </CardDescription>
                        </CardHeader>
                        <CardContent>
                            {/* Existing profile form content */}
                        </CardContent>
                    </Card>
                </TabsContent>

                {renderRoleSpecificContent()}
            </Tabs>
        </div>
    );
}

========================================

File: ./frontend/src/pages/profile/ApplicationDetailPage.tsx
----------------------------------------
import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { format } from 'date-fns';
import { 
    Card, 
    CardHeader, 
    CardTitle, 
    CardDescription, 
    CardContent 
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { ChevronLeft, PawPrint, Clock, Building2, FileText } from 'lucide-react';
import api from '@/lib/axios';

interface ApplicationDetails {
    application_id: number;
    pet_id: number;
    user_id: number;
    status: 'pending' | 'under_review' | 'approved' | 'rejected' | 'withdrawn';
    application_date: string;
    reason: string;
    experience: string;
    living_situation: string;
    has_other_pets: boolean;
    other_pets_details: string | null;
    daily_schedule: string;
    veterinarian: string | null;
    pet_name: string;
    pet_breed: string;
    pet_species: string;
    shelter_name: string;
    last_updated: string;
}

export default function ApplicationDetailPage() {
    const { id } = useParams();
    const navigate = useNavigate();
    const { toast } = useToast();
    const [application, setApplication] = useState<ApplicationDetails | null>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        if (id) {
            fetchApplicationDetails();
        }
    }, [id]);

    const fetchApplicationDetails = async () => {
        try {
            setLoading(true);
            setError(null);
            console.log('Fetching application details for ID:', id);

            const response = await api.get(`/adoptions/${id}`);
            console.log('API Response:', response.data);

            if (response.data.success) {
                setApplication(response.data.data);
            } else {
                throw new Error(response.data.error || 'Failed to fetch application details');
            }
        } catch (error: any) {
            console.error('Error fetching application:', error);
            console.error('Full error details:', {
                message: error.message,
                response: error.response?.data,
                status: error.response?.status
            });

            const errorMessage = error.response?.data?.error 
                || error.message 
                || "Failed to load application details";
            
            setError(errorMessage);
            toast({
                variant: "destructive",
                title: "Error",
                description: errorMessage,
            });
        } finally {
            setLoading(false);
        }
    };
    const getStatusBadgeVariant = (status: string) => {
        switch (status) {
            case 'approved':
                return 'success';
            case 'rejected':
                return 'destructive';
            case 'under_review':
                return 'warning';
            case 'withdrawn':
                return 'secondary';
            default:
                return 'default';
        }
    };

    const formatDate = (dateString: string) => {
        return format(new Date(dateString), 'PPP');
    };

    if (loading) {
        return (
            <div className="container max-w-4xl mx-auto p-4">
                <div className="flex justify-center items-center min-h-[400px]">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
                </div>
            </div>
        );
    }

    if (!application) {
        return (
            <div className="container max-w-4xl mx-auto p-4">
                <Card>
                    <CardContent className="flex flex-col items-center justify-center py-12">
                        <FileText className="h-12 w-12 text-muted-foreground mb-4" />
                        <h3 className="text-lg font-semibold mb-2">Application Not Found</h3>
                        <p className="text-muted-foreground text-center mb-4">
                            The application you're looking for doesn't exist or you don't have permission to view it.
                        </p>
                        <Button onClick={() => navigate('/profile/applications')}>
                            View All Applications
                        </Button>
                    </CardContent>
                </Card>
            </div>
        );
    }

    return (
        <div className="container max-w-4xl mx-auto p-4">
            <Button
                variant="ghost"
                className="mb-4"
                onClick={() => navigate('/profile/applications')}
            >
                <ChevronLeft className="mr-2 h-4 w-4" />
                Back to Applications
            </Button>

            <div className="grid gap-6">
                {/* Header Card */}
                <Card>
                    <CardHeader>
                        <div className="flex justify-between items-start">
                            <div>
                                <CardTitle>Adoption Application</CardTitle>
                                <CardDescription>
                                    Application for {application.pet_name}
                                </CardDescription>
                            </div>
                            <Badge variant={getStatusBadgeVariant(application.status)}>
                                {application.status.replace('_', ' ')}
                            </Badge>
                        </div>
                    </CardHeader>
                    <CardContent>
                        <div className="grid gap-4">
                            <div className="flex items-center gap-2 text-muted-foreground">
                                <Clock className="h-4 w-4" />
                                Submitted on {formatDate(application.application_date)}
                            </div>
                            <div className="flex items-center gap-2 text-muted-foreground">
                                <Building2 className="h-4 w-4" />
                                {application.shelter_name}
                            </div>
                        </div>
                    </CardContent>
                </Card>

                {/* Pet Details Card */}
                <Card>
                    <CardHeader>
                        <CardTitle>Pet Information</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <div className="grid gap-4">
                            <div className="flex items-center gap-4">
                                <PawPrint className="h-8 w-8 text-muted-foreground" />
                                <div>
                                    <h3 className="font-semibold">{application.pet_name}</h3>
                                    <p className="text-muted-foreground">
                                        {application.pet_breed} • {application.pet_species}
                                    </p>
                                </div>
                            </div>
                        </div>
                    </CardContent>
                </Card>

                {/* Application Details Card */}
                <Card>
                    <CardHeader>
                        <CardTitle>Application Details</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <div className="space-y-6">
                            <div>
                                <h3 className="font-semibold mb-2">Why do you want to adopt this pet?</h3>
                                <p className="text-muted-foreground">{application.reason}</p>
                            </div>

                            <div>
                                <h3 className="font-semibold mb-2">Pet Care Experience</h3>
                                <p className="text-muted-foreground">{application.experience}</p>
                            </div>

                            <div>
                                <h3 className="font-semibold mb-2">Living Situation</h3>
                                <p className="text-muted-foreground">{application.living_situation}</p>
                            </div>

                            {application.has_other_pets && application.other_pets_details && (
                                <div>
                                    <h3 className="font-semibold mb-2">Other Pets</h3>
                                    <p className="text-muted-foreground">{application.other_pets_details}</p>
                                </div>
                            )}

                            <div>
                                <h3 className="font-semibold mb-2">Daily Schedule</h3>
                                <p className="text-muted-foreground">{application.daily_schedule}</p>
                            </div>

                            {application.veterinarian && (
                                <div>
                                    <h3 className="font-semibold mb-2">Veterinarian Information</h3>
                                    <p className="text-muted-foreground">{application.veterinarian}</p>
                                </div>
                            )}
                        </div>
                    </CardContent>
                </Card>
            </div>
        </div>
    );
}

========================================

File: ./frontend/src/pages/profile/ProfileSettings.tsx
----------------------------------------
import { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Avatar, AvatarImage, AvatarFallback } from '@/components/ui/avatar';
import { useAuth } from '@/contexts/AuthContext';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import api from '@/lib/axios';

const profileSchema = z.object({
  first_name: z.string().min(1, 'First name is required'),
  last_name: z.string().min(1, 'Last name is required'),
  phone: z.string().min(10, 'Please enter a valid phone number'),
  email: z.string().email('Please enter a valid email'),
  address: z.string().nullable(),
  city: z.string().nullable(),
  state: z.string().nullable(),
  zip_code: z.string().nullable(),
  housing_type: z.enum(['house', 'apartment', 'condo', 'other']).nullable(),
  has_yard: z.boolean().nullable(),
});

type ProfileFormData = z.infer<typeof profileSchema>;

export default function ProfileSettings() {
  const [loading, setLoading] = useState(true);
  const [profileImage, setProfileImage] = useState<string | null>(null);
  const [isUploading, setIsUploading] = useState(false);
  const { toast } = useToast();
  const { user, setUser } = useAuth();
  
  const form = useForm<ProfileFormData>({
    resolver: zodResolver(profileSchema)
  });

  useEffect(() => {
    const loadProfile = async () => {
      try {
        setLoading(true);
        const response = await api.get('/profile');
        const profileData = response.data.data;
        form.reset(profileData);
        setProfileImage(profileData.profile_image);
      } catch (error) {
        toast({
          variant: "destructive",
          title: "Error",
          description: "Failed to load profile data",
        });
      } finally {
        setLoading(false);
      }
    };

    loadProfile();
  }, []);

  const handleImageUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {
      const file = event.target.files?.[0];
      if (!file) return;

      try {
          setIsUploading(true);
          const formData = new FormData();
          formData.append('profile_image', file);

          const response = await api.post('/profile/image', formData, {
              headers: {
                  'Content-Type': 'multipart/form-data',
              },
          });

          console.log('Image upload response:', JSON.stringify(response.data, null, 2));

          if (response.data.success) {
              const newImageUrl = response.data.data.profile_image;
              console.log('New image URL:', newImageUrl);  // Add this line
              setProfileImage(newImageUrl);
              
              if (user) {
                  const updatedUser = {
                      ...user,
                      profile_image: newImageUrl
                  };
                  setUser(updatedUser);
              }

              toast({
                  title: "Success",
                  description: "Profile picture updated successfully",
              });
          }
      } catch (error: any) {
          console.error('Upload error:', error);  // Add this line
          toast({
              variant: "destructive",
              title: "Error",
              description: error.response?.data?.error || "Failed to upload image",
          });
      } finally {
          setIsUploading(false);
      }
  };
  const [isSaving, setIsSaving] = useState(false);

  const onSubmit = async (data: ProfileFormData) => {
    try {
      console.log('Submitting form data:', data); // Debug log
      setIsSaving(true);

      // Filter out null values and convert empty strings to null
      const cleanedData = Object.entries(data).reduce((acc, [key, value]) => ({
        ...acc,
        [key]: value === '' ? null : value
      }), {});

      const response = await api.put('/profile', cleanedData);
      console.log('API response:', response); // Debug log

      if (response.data.success) {
        // Update global user state and storage
        if (user && setUser) {
          const updatedUser = {
            ...user,
            ...cleanedData
          };
          setUser(updatedUser);
          localStorage.setItem('user', JSON.stringify(updatedUser));
        }

        toast({
          title: "Success",
          description: "Profile updated successfully",
        });
      }
    } catch (error: any) {
      console.error('Profile update error:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: error.response?.data?.error || "Failed to update profile",
      });
    } finally {
      setIsSaving(false);
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
      </div>
    );
  }

  return (
    <div className="container max-w-2xl mx-auto p-6">
      <Card>
        <CardHeader>
          <CardTitle>Profile Settings</CardTitle>
          <CardDescription>
            Update your personal information
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form 
              onSubmit={form.handleSubmit(onSubmit)} 
              className="space-y-6"
            >
              <div className="flex items-center gap-6 mb-6">
                <Avatar className="w-24 h-24">
                  <AvatarImage src={profileImage || ''} alt="Profile" />
                  <AvatarFallback>
                    {form.getValues('first_name')?.[0]?.toUpperCase() || 'U'}
                  </AvatarFallback>
                </Avatar>
                <div className="flex flex-col gap-2">
                  <Label htmlFor="profile_image">Profile Picture</Label>
                  <input
                    type="file"
                    id="profile_image"
                    accept="image/*"
                    className="hidden"
                    onChange={handleImageUpload}
                  />
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => document.getElementById('profile_image')?.click()}
                    disabled={isUploading}
                  >
                    {isUploading ? 'Uploading...' : 'Change Picture'}
                  </Button>
                </div>
              </div>

              <div className="grid grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="first_name"  // This must match the schema
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>First Name</FormLabel>
                      <FormControl>
                        <Input {...field} placeholder="John" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="last_name"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Last Name</FormLabel>
                      <FormControl>
                        <Input {...field} placeholder="Doe" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email</FormLabel>
                    <FormControl>
                      <Input
                        {...field}
                        type="email"
                        placeholder="john.doe@example.com"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="phone"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Phone</FormLabel>
                    <FormControl>
                      <Input {...field} placeholder="(555) 555-5555" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="address"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Address</FormLabel>
                    <FormControl>
                      <Input {...field} placeholder="123 Main St" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="grid grid-cols-3 gap-4">
                <FormField
                  control={form.control}
                  name="city"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>City</FormLabel>
                      <FormControl>
                        <Input {...field} placeholder="City" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="state"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>State</FormLabel>
                      <FormControl>
                        <Input {...field} placeholder="State" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="zip_code"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>ZIP Code</FormLabel>
                      <FormControl>
                        <Input {...field} placeholder="ZIP Code" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name="housing_type"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Housing Type</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select housing type" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="house">House</SelectItem>
                        <SelectItem value="apartment">Apartment</SelectItem>
                        <SelectItem value="condo">Condo</SelectItem>
                        <SelectItem value="other">Other</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <Button 
                type="submit" 
                className="w-full"
                disabled={isSaving}
              >
                {isSaving ? 'Saving...' : 'Save Changes'}
              </Button>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  );
}

========================================

File: ./frontend/src/pages/profile/ApplicationsPage.tsx
----------------------------------------
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { ChevronRight, ClipboardList } from 'lucide-react';
import api from '@/lib/axios';

interface Application {
  application_id: number;
  pet_id: number;
  status: 'pending' | 'under_review' | 'approved' | 'rejected' | 'withdrawn';
  application_date: string;
  pet_name: string;
  pet_species: string;
  pet_breed: string;
  shelter_name: string;
}

interface ApiResponse {
  success: boolean;
  data: Application[];
  error?: string;
}

export default function ApplicationsPage() {
  const [applications, setApplications] = useState<Application[]>([]);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();
  const { toast } = useToast();

  useEffect(() => {
    fetchApplications();
  }, []);

  const fetchApplications = async () => {
    try {
      setLoading(true);
      const response = await api.get<ApiResponse>('/adoptions/user');
      console.log('API Response:', response.data); // Debug log

      if (response.data.success) {
        setApplications(response.data.data || []);
      } else {
        throw new Error(response.data.error || 'Failed to load applications');
      }
    } catch (error: any) {
      console.error('Error fetching applications:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: error.message || "Failed to load applications",
      });
      setApplications([]); // Set to empty array on error
    } finally {
      setLoading(false);
    }
  };

  const getStatusBadgeVariant = (status: string) => {
    switch (status) {
      case 'approved':
        return 'success';
      case 'rejected':
        return 'destructive';
      case 'under_review':
        return 'warning';
      case 'withdrawn':
        return 'secondary';
      default:
        return 'default';
    }
  };

  if (loading) {
    return (
      <div className="container max-w-4xl mx-auto p-4">
        <div className="flex justify-center items-center min-h-[400px]">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="container max-w-4xl mx-auto p-4">
      <div className="mb-6">
        <h1 className="text-3xl font-bold tracking-tight">My Applications</h1>
        <p className="text-muted-foreground">
          Track the status of your adoption applications
        </p>
      </div>

      {applications.length === 0 ? (
        <Card>
          <CardContent className="flex flex-col items-center justify-center py-12">
            <ClipboardList className="h-12 w-12 text-muted-foreground mb-4" />
            <h3 className="text-lg font-semibold mb-2">No Applications Yet</h3>
            <p className="text-muted-foreground text-center mb-4">
              You haven't submitted any adoption applications yet.
            </p>
            <Button onClick={() => navigate('/pets')}>
              Browse Available Pets
            </Button>
          </CardContent>
        </Card>
      ) : (
        <div className="grid gap-4">
          {applications.map((application) => (
            <Card key={application.application_id} className="group">
              <CardContent className="p-6">
                <div className="flex justify-between items-start">
                  <div className="space-y-1">
                    <div className="flex items-center gap-2">
                      <h3 className="font-semibold text-lg">
                        {application.pet_name}
                      </h3>
                      <Badge variant={getStatusBadgeVariant(application.status)}>
                        {application.status.replace('_', ' ')}
                      </Badge>
                    </div>
                    <p className="text-sm text-muted-foreground">
                      {application.pet_breed} • {application.pet_species}
                    </p>
                    <p className="text-sm text-muted-foreground">
                      At {application.shelter_name}
                    </p>
                    <p className="text-sm text-muted-foreground">
                      Submitted on {new Date(application.application_date).toLocaleDateString()}
                    </p>
                  </div>
                  
                  <Button
                    variant="ghost"
                    size="sm"
                    className="opacity-0 group-hover:opacity-100 transition-opacity"
                    onClick={() => navigate(`/profile/applications/${application.application_id}`)}
                  >
                    View Details
                    <ChevronRight className="ml-2 h-4 w-4" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
}

========================================

File: ./frontend/src/pages/profile/FavoritesPage.tsx
----------------------------------------
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Heart, PawPrint } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { Pet } from '@/types/api';
import api from '@/lib/axios';
import { PetCard } from '@/components/pets/PetCard';

interface FavoritedPet {
  pet_id: number;
  name: string;
  species: string;
  breed: string;
  age: number;
  gender: string;
  description: string;
  shelter_name: string;
  favorited_at: string;
  traits?: {
    [category: string]: string[];
  };
}

export default function FavoritesPage() {
    const [favorites, setFavorites] = useState<FavoritedPet[]>([]);
    const [loading, setLoading] = useState(true);
    const navigate = useNavigate();
    const { toast } = useToast();

    useEffect(() => {
        fetchFavorites();
    }, []);

    const fetchFavorites = async () => {
        try {
            setLoading(true);
            const response = await api.get('/favorites');
            
            if (response.data.success) {
                setFavorites(response.data.data);
            } else {
                throw new Error(response.data.error || 'Failed to fetch favorites');
            }
        } catch (error: any) {
            console.error('Error fetching favorites:', error);
            toast({
                variant: "destructive",
                title: "Error",
                description: error.message || "Failed to load favorites",
            });
        } finally {
            setLoading(false);
        }
    };

    const handleRemoveFavorite = async (petId: number) => {
        try {
            await api.delete(`/pets/${petId}/favorite`);
            setFavorites(favorites.filter(pet => pet.pet_id !== petId));
            toast({
                title: "Success",
                description: "Pet removed from favorites",
            });
        } catch (error: any) {
            toast({
                variant: "destructive",
                title: "Error",
                description: "Failed to remove from favorites",
            });
        }
    };

    if (loading) {
        return (
            <div className="container max-w-4xl mx-auto p-4">
                <div className="flex justify-center items-center min-h-[400px]">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
                </div>
            </div>
        );
    }

    if (favorites.length === 0) {
        return (
            <div className="container max-w-4xl mx-auto p-4">
                <Card>
                    <CardContent className="flex flex-col items-center justify-center py-12">
                        <Heart className="h-12 w-12 text-muted-foreground mb-4" />
                        <h3 className="text-lg font-semibold mb-2">No Favorite Pets Yet</h3>
                        <p className="text-muted-foreground text-center mb-4">
                            Browse our available pets and add some to your favorites!
                        </p>
                        <Button onClick={() => navigate('/pets')}>
                            Browse Pets
                        </Button>
                    </CardContent>
                </Card>
            </div>
        );
    }

    return (
        <div className="container max-w-4xl mx-auto p-4">
            <div className="mb-6">
                <h1 className="text-3xl font-bold tracking-tight">Favorite Pets</h1>
                <p className="text-muted-foreground">
                    Pets you've saved as favorites
                </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {favorites.map((pet) => (
                    <div key={pet.pet_id} className="relative group">
                        <PetCard
                            pet={pet}
                            onClick={() => navigate(`/pets/${pet.pet_id}`)}
                        />
                        <Button
                            variant="destructive"
                            size="sm"
                            className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity"
                            onClick={(e) => {
                                e.stopPropagation();
                                handleRemoveFavorite(pet.pet_id);
                            }}
                        >
                            <Heart className="h-4 w-4" /> Remove
                        </Button>
                    </div>
                ))}
            </div>
        </div>
    );
}

========================================

File: ./frontend/src/pages/admin/NewShelterPage.tsx
----------------------------------------
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/AuthContext';
import api from '@/lib/axios';

interface ShelterFormData {
    name: string;
    address: string;
    phone: string;
    email: string;
    is_no_kill: boolean;
}

export default function NewShelterPage() {
    const [formData, setFormData] = useState<ShelterFormData>({
        name: '',
        address: '',
        phone: '',
        email: '',
        is_no_kill: false
    });
    const [isSubmitting, setIsSubmitting] = useState(false);
    const { toast } = useToast();
    const navigate = useNavigate();
    const { user } = useAuth();

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        
        try {
            setIsSubmitting(true);
            const response = await api.post('/admin/shelters', formData);
            
            if (response.data.success) {
                toast({
                    title: "Success",
                    description: "Shelter created successfully"
                });
                navigate('/admin/shelters');
            } else {
                throw new Error(response.data.error || 'Failed to create shelter');
            }
        } catch (error: any) {
            toast({
                variant: "destructive",
                title: "Error",
                description: error.response?.data?.error || "Failed to create shelter"
            });
        } finally {
            setIsSubmitting(false);
        }
    };

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value, type, checked } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: type === 'checkbox' ? checked : value
        }));
    };

    return (
        <div className="container max-w-2xl mx-auto p-6">
            <Card>
                <CardHeader>
                    <CardTitle>Add New Shelter</CardTitle>
                    <CardDescription>
                        Create a new animal shelter in the system
                    </CardDescription>
                </CardHeader>

                <form onSubmit={handleSubmit}>
                    <CardContent className="space-y-4">
                        <div className="space-y-2">
                            <Label htmlFor="name">Shelter Name</Label>
                            <Input
                                id="name"
                                name="name"
                                placeholder="Enter shelter name"
                                required
                                value={formData.name}
                                onChange={handleChange}
                            />
                        </div>

                        <div className="space-y-2">
                            <Label htmlFor="address">Address</Label>
                            <Input
                                id="address"
                                name="address"
                                placeholder="Enter full address"
                                required
                                value={formData.address}
                                onChange={handleChange}
                            />
                        </div>

                        <div className="space-y-2">
                            <Label htmlFor="phone">Phone Number</Label>
                            <Input
                                id="phone"
                                name="phone"
                                placeholder="Enter phone number"
                                required
                                value={formData.phone}
                                onChange={handleChange}
                            />
                        </div>

                        <div className="space-y-2">
                            <Label htmlFor="email">Email</Label>
                            <Input
                                id="email"
                                name="email"
                                type="email"
                                placeholder="Enter email address"
                                required
                                value={formData.email}
                                onChange={handleChange}
                            />
                        </div>

                        <div className="flex items-center space-x-2">
                            <Checkbox
                                id="is_no_kill"
                                name="is_no_kill"
                                checked={formData.is_no_kill}
                                onCheckedChange={(checked) => 
                                    setFormData(prev => ({ ...prev, is_no_kill: checked as boolean }))
                                }
                            />
                            <Label htmlFor="is_no_kill">This is a no-kill shelter</Label>
                        </div>
                    </CardContent>

                    <CardFooter className="flex justify-between">
                        <Button
                            type="button"
                            variant="outline"
                            onClick={() => navigate('/admin/shelters')}
                        >
                            Cancel
                        </Button>
                        <Button
                            type="submit"
                            disabled={isSubmitting}
                        >
                            {isSubmitting ? 'Creating...' : 'Create Shelter'}
                        </Button>
                    </CardFooter>
                </form>
            </Card>
        </div>
    );
}

========================================

File: ./frontend/src/pages/admin/AdminDashboard.tsx
----------------------------------------
import { useEffect, useState } from 'react';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Link, useNavigate } from 'react-router-dom';
import { 
    PawPrint, 
    FileText, 
    Users, 
    Plus, 
    Building2, 
    TrendingUp, 
    AlertTriangle 
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/AuthContext';
import api from '@/lib/axios';

interface DashboardStats {
    totalUsers: number;
    totalShelters: number;
    totalPets: number;
    totalApplications: number;
    pendingApplications: number;
    activeUsers: number;
    recentActivity: Array<{
        id: number;
        type: string;
        message: string;
        timestamp: string;
    }>;
}

export default function AdminDashboard() {
    const [stats, setStats] = useState<DashboardStats>({
        totalUsers: 0,
        totalShelters: 0,
        totalPets: 0,
        totalApplications: 0,
        pendingApplications: 0,
        activeUsers: 0,
        recentActivity: []
    });

    const [loading, setLoading] = useState(true);
    const { toast } = useToast();
    const { user, isAuthenticated } = useAuth();
    const navigate = useNavigate();

    useEffect(() => {
        // Check if user is authenticated and has admin role
        if (!isAuthenticated || user?.role !== 'admin') {
            toast({
                variant: "destructive",
                title: "Unauthorized Access",
                description: "You don't have permission to view this page."
            });
            navigate('/unauthorized');
            return;
        }

        const fetchStats = async () => {
            try {
                setLoading(true);
                const response = await api.get('/admin/stats');
                if (response.data.success) {
                    setStats(response.data.data);
                } else {
                    throw new Error(response.data.error || 'Failed to fetch stats');
                }
            } catch (error) {
                console.error('Failed to fetch admin stats:', error);
                toast({
                    variant: "destructive",
                    title: "Error",
                    description: "Failed to load dashboard statistics"
                });
            } finally {
                setLoading(false);
            }
        };

        fetchStats();
    }, [isAuthenticated, user, navigate, toast]);

    const StatCard = ({ 
        title, 
        value, 
        icon: Icon, 
        description, 
        href, 
        trend 
    }: { 
        title: string;
        value: number;
        icon: any;
        description?: string;
        href: string;
        trend?: {
            value: number;
            label: string;
        };
    }) => (
        <Card>
            <CardHeader className="flex flex-row items-center justify-between pb-2">
                <CardTitle className="text-sm font-medium">{title}</CardTitle>
                <Icon className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
                <div className="flex items-center justify-between">
                    <div>
                        <div className="text-2xl font-bold">{value}</div>
                        {description && (
                            <p className="text-xs text-muted-foreground">{description}</p>
                        )}
                    </div>
                    {trend && (
                        <div className={`text-xs ${trend.value >= 0 ? 'text-green-500' : 'text-red-500'}`}>
                            <TrendingUp className="h-3 w-3 inline mr-1" />
                            {trend.value}% {trend.label}
                        </div>
                    )}
                </div>
                <Button asChild variant="link" className="p-0 mt-2">
                    <Link to={href}>View Details</Link>
                </Button>
            </CardContent>
        </Card>
    );

    if (loading) {
        return (
            <div className="flex justify-center items-center min-h-screen">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            </div>
        );
    }

    return (
        <div className="container mx-auto p-6">
            <div className="space-y-4">
                <div className="flex justify-between items-center">
                    <div>
                        <h2 className="text-3xl font-bold tracking-tight">Admin Dashboard</h2>
                        <p className="text-muted-foreground">
                            Welcome back, {user?.username}. Here's what's happening with your platform.
                        </p>
                    </div>
                    <Button asChild>
                        <Link to="/admin/shelters/new">
                            <Plus className="mr-2 h-4 w-4" />
                            Add New Shelter
                        </Link>
                    </Button>
                </div>

                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                    <StatCard
                        title="Total Users"
                        value={stats.totalUsers}
                        icon={Users}
                        description="Active platform users"
                        href="/admin/users"
                        trend={{ value: 12, label: 'this month' }}
                    />
                    <StatCard
                        title="Animal Shelters"
                        value={stats.totalShelters}
                        icon={Building2}
                        description="Registered shelters"
                        href="/admin/shelters"
                    />
                    <StatCard
                        title="Listed Pets"
                        value={stats.totalPets}
                        icon={PawPrint}
                        description="Available for adoption"
                        href="/admin/pets"
                    />
                    <StatCard
                        title="Pending Applications"
                        value={stats.pendingApplications}
                        icon={FileText}
                        description="Requiring review"
                        href="/admin/applications"
                    />
                </div>

                <div className="grid gap-4 grid-cols-1 md:grid-cols-2 mt-4">
                    {/* Recent Activity */}
                    <Card className="md:col-span-2">
                        <CardHeader>
                            <CardTitle>Recent Activity</CardTitle>
                            <CardDescription>Latest platform updates and changes</CardDescription>
                        </CardHeader>
                        <CardContent>
                            <div className="space-y-4">
                                {stats.recentActivity.length > 0 ? (
                                    stats.recentActivity.map((activity) => (
                                        <div 
                                            key={activity.id} 
                                            className="flex items-center justify-between p-2 hover:bg-secondary/50 rounded-lg"
                                        >
                                            <div className="flex items-center gap-2">
                                                <ActivityIcon type={activity.type} />
                                                <div>
                                                    <p className="text-sm">{activity.message}</p>
                                                    <p className="text-xs text-muted-foreground">
                                                        {new Date(activity.timestamp).toLocaleString()}
                                                    </p>
                                                </div>
                                            </div>
                                        </div>
                                    ))
                                ) : (
                                    <div className="text-center text-muted-foreground py-8">
                                        No recent activity to display
                                    </div>
                                )}
                            </div>
                        </CardContent>
                    </Card>

                    {/* System Alerts */}
                    <Card>
                        <CardHeader>
                            <CardTitle className="flex items-center gap-2">
                                <AlertTriangle className="h-5 w-5" />
                                System Alerts
                            </CardTitle>
                        </CardHeader>
                        <CardContent>
                            {/* Add system alerts here */}
                        </CardContent>
                    </Card>
                </div>
            </div>
        </div>
    );
}

// Helper component for activity icons
const ActivityIcon = ({ type }: { type: string }) => {
    switch (type) {
        case 'user':
            return <Users className="h-4 w-4 text-blue-500" />;
        case 'pet':
            return <PawPrint className="h-4 w-4 text-green-500" />;
        case 'shelter':
            return <Building2 className="h-4 w-4 text-purple-500" />;
        default:
            return <FileText className="h-4 w-4 text-gray-500" />;
    }
};

========================================

File: ./frontend/src/pages/admin/UserManagement.tsx
----------------------------------------
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from '@/components/ui/select';
import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeader,
    TableRow,
} from '@/components/ui/table';
import { Input } from '@/components/ui/input';
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuLabel,
    DropdownMenuSeparator,
    DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/AuthContext';
import api from '@/lib/axios';
import { 
    MoreHorizontal, 
    Search, 
    UserPlus, 
    Shield, 
    Ban, 
    Mail,
    RefreshCw
} from 'lucide-react';

interface User {
    user_id: number;
    username: string;
    email: string;
    role: string;
    account_status: string;
    registration_date: string;
    last_login?: string;
}

interface UserFilters {
    search?: string;
    role?: string;
    status?: string;
}

export default function UserManagement() {
    const [users, setUsers] = useState<User[]>([]);
    const [loading, setLoading] = useState(true);
    const [filters, setFilters] = useState<UserFilters>({});
    const { toast } = useToast();
    const navigate = useNavigate();
    const { user: currentUser } = useAuth();

    useEffect(() => {
        // Check admin access
        if (currentUser?.role !== 'admin') {
            navigate('/unauthorized');
            return;
        }
        
        fetchUsers();
    }, [currentUser, navigate]);

    const fetchUsers = async (appliedFilters: UserFilters = filters) => {
        try {
            setLoading(true);
            const response = await api.get('/admin/users', { params: appliedFilters });
            if (response.data.success) {
                setUsers(response.data.data);
            } else {
                throw new Error(response.data.error || 'Failed to fetch users');
            }
        } catch (error) {
            toast({
                variant: "destructive",
                title: "Error",
                description: "Failed to fetch users"
            });
        } finally {
            setLoading(false);
        }
    };

    const handleRoleChange = async (userId: number, newRole: string) => {
        try {
            const response = await api.put(`/admin/users/${userId}/role`, { role: newRole });
            if (response.data.success) {
                fetchUsers();
                toast({
                    title: "Success",
                    description: "User role updated successfully"
                });
            } else {
                throw new Error(response.data.error || 'Failed to update role');
            }
        } catch (error) {
            toast({
                variant: "destructive",
                title: "Error",
                description: "Failed to update user role"
            });
        }
    };

    const handleStatusChange = async (userId: number, newStatus: string) => {
        try {
            const response = await api.put(`/admin/users/${userId}/status`, { status: newStatus });
            if (response.data.success) {
                fetchUsers();
                toast({
                    title: "Success",
                    description: "User status updated successfully"
                });
            } else {
                throw new Error(response.data.error || 'Failed to update status');
            }
        } catch (error) {
            toast({
                variant: "destructive",
                title: "Error",
                description: "Failed to update user status"
            });
        }
    };

    const resendVerificationEmail = async (userId: number) => {
        try {
            const response = await api.post(`/admin/users/${userId}/resend-verification`);
            if (response.data.success) {
                toast({
                    title: "Success",
                    description: "Verification email sent successfully"
                });
            } else {
                throw new Error(response.data.error || 'Failed to send verification email');
            }
        } catch (error) {
            toast({
                variant: "destructive",
                title: "Error",
                description: "Failed to send verification email"
            });
        }
    };

    const handleSearch = (searchTerm: string) => {
        const newFilters = { ...filters, search: searchTerm };
        setFilters(newFilters);
        fetchUsers(newFilters);
    };

    const handleFilterChange = (key: string, value: string) => {
        const newFilters = { ...filters, [key]: value };
        setFilters(newFilters);
        fetchUsers(newFilters);
    };

    if (loading) {
        return (
            <div className="flex justify-center items-center min-h-screen">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            </div>
        );
    }

    return (
        <div className="container mx-auto p-6">
            <Card>
                <CardHeader>
                    <div className="flex justify-between items-center">
                        <div>
                            <CardTitle>User Management</CardTitle>
                            <CardDescription>
                                Manage user roles and account status
                            </CardDescription>
                        </div>
                        <Button>
                            <UserPlus className="mr-2 h-4 w-4" />
                            Add User
                        </Button>
                    </div>
                </CardHeader>
                <CardContent>
                    <div className="flex gap-4 mb-6">
                        <div className="flex-1 relative">
                            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                            <Input
                                placeholder="Search users..."
                                className="pl-9"
                                onChange={(e) => handleSearch(e.target.value)}
                            />
                        </div>
                        <Select
                            defaultValue={filters.role}
                            onValueChange={(value) => handleFilterChange('role', value)}
                        >
                            <SelectTrigger className="w-[180px]">
                                <SelectValue placeholder="Filter by role" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="all">All Roles</SelectItem>
                                <SelectItem value="admin">Admin</SelectItem>
                                <SelectItem value="shelter_staff">Shelter Staff</SelectItem>
                                <SelectItem value="adopter">Adopter</SelectItem>
                            </SelectContent>
                        </Select>
                        <Select
                            defaultValue={filters.status}
                            onValueChange={(value) => handleFilterChange('status', value)}
                        >
                            <SelectTrigger className="w-[180px]">
                                <SelectValue placeholder="Filter by status" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="all">All Statuses</SelectItem>
                                <SelectItem value="active">Active</SelectItem>
                                <SelectItem value="pending">Pending</SelectItem>
                                <SelectItem value="suspended">Suspended</SelectItem>
                            </SelectContent>
                        </Select>
                    </div>

                    <div className="rounded-md border">
                        <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableHead>Username</TableHead>
                                    <TableHead>Email</TableHead>
                                    <TableHead>Role</TableHead>
                                    <TableHead>Status</TableHead>
                                    <TableHead>Registration Date</TableHead>
                                    <TableHead>Last Login</TableHead>
                                    <TableHead className="text-right">Actions</TableHead>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                {users.map((user) => (
                                    <TableRow key={user.user_id}>
                                        <TableCell className="font-medium">{user.username}</TableCell>
                                        <TableCell>{user.email}</TableCell>
                                        <TableCell>
                                            <Select
                                                defaultValue={user.role}
                                                onValueChange={(value) => handleRoleChange(user.user_id, value)}
                                                disabled={currentUser?.user_id === user.user_id}
                                            >
                                                <SelectTrigger className="w-[140px]">
                                                    <SelectValue />
                                                </SelectTrigger>
                                                <SelectContent>
                                                    <SelectItem value="adopter">Adopter</SelectItem>
                                                    <SelectItem value="shelter_staff">Shelter Staff</SelectItem>
                                                    <SelectItem value="admin">Admin</SelectItem>
                                                </SelectContent>
                                            </Select>
                                        </TableCell>
                                        <TableCell>
                                            <div className={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium
                                                ${user.account_status === 'active' ? 'bg-green-100 text-green-800' :
                                                user.account_status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                                                'bg-red-100 text-red-800'}`}>
                                                {user.account_status.charAt(0).toUpperCase() + user.account_status.slice(1)}
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            {new Date(user.registration_date).toLocaleDateString()}
                                        </TableCell>
                                        <TableCell>
                                            {user.last_login ? new Date(user.last_login).toLocaleString() : 'Never'}
                                        </TableCell>
                                        <TableCell className="text-right">
                                            <DropdownMenu>
                                                <DropdownMenuTrigger asChild>
                                                    <Button variant="ghost" className="h-8 w-8 p-0">
                                                        <span className="sr-only">Open menu</span>
                                                        <MoreHorizontal className="h-4 w-4" />
                                                    </Button>
                                                </DropdownMenuTrigger>
                                                <DropdownMenuContent align="end">
                                                    <DropdownMenuLabel>Actions</DropdownMenuLabel>
                                                    <DropdownMenuItem
                                                        onClick={() => handleStatusChange(user.user_id, 
                                                            user.account_status === 'suspended' ? 'active' : 'suspended')}
                                                    >
                                                        {user.account_status === 'suspended' ? (
                                                            <>
                                                                <RefreshCw className="mr-2 h-4 w-4" />
                                                                Reactivate Account
                                                            </>
                                                        ) : (
                                                            <>
                                                                <Ban className="mr-2 h-4 w-4" />
                                                                Suspend Account
                                                            </>
                                                        )}
                                                    </DropdownMenuItem>
                                                    {user.account_status === 'pending' && (
                                                        <DropdownMenuItem
                                                            onClick={() => resendVerificationEmail(user.user_id)}
                                                        >
                                                            <Mail className="mr-2 h-4 w-4" />
                                                            Resend Verification
                                                        </DropdownMenuItem>
                                                    )}
                                                    <DropdownMenuSeparator />
                                                    <DropdownMenuItem
                                                        onClick={() => navigate(`/admin/users/${user.user_id}`)}
                                                    >
                                                        <Shield className="mr-2 h-4 w-4" />
                                                        View Full Profile
                                                    </DropdownMenuItem>
                                                </DropdownMenuContent>
                                            </DropdownMenu>
                                        </TableCell>
                                    </TableRow>
                                ))}
                            </TableBody>
                        </Table>
                    </div>
                </CardContent>
            </Card>
        </div>
    );
}

========================================

File: ./frontend/src/pages/admin/ShelterManagement.tsx
----------------------------------------
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeader,
    TableRow,
} from '@/components/ui/table';
import { Input } from '@/components/ui/input';
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuLabel,
    DropdownMenuSeparator,
    DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/AuthContext';
import api from '@/lib/axios';
import { 
    Building2,
    MoreHorizontal, 
    Search, 
    Plus, 
    Edit, 
    Trash2, 
    Users,
    CheckCircle,
    XCircle
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';

interface Shelter {
    shelter_id: number;
    name: string;
    address: string;
    phone: string;
    email: string;
    is_no_kill: boolean;
    manager_id: number | null;
    total_pets: number;
    active_applications: number;
}

interface ShelterFilters {
    search?: string;
    is_no_kill?: boolean;
}

export default function ShelterManagement() {
    const [shelters, setShelters] = useState<Shelter[]>([]);
    const [loading, setLoading] = useState(true);
    const [filters, setFilters] = useState<ShelterFilters>({});
    const { toast } = useToast();
    const navigate = useNavigate();
    const { user } = useAuth();

    useEffect(() => {
        if (user?.role !== 'admin') {
            navigate('/unauthorized');
            return;
        }
        fetchShelters();
    }, [user, navigate]);

    const fetchShelters = async () => {
        try {
            setLoading(true);
            const response = await api.get('/admin/shelters', { params: filters });
            if (response.data.success) {
                setShelters(response.data.data);
            } else {
                throw new Error(response.data.error || 'Failed to fetch shelters');
            }
        } catch (error) {
            toast({
                variant: "destructive",
                title: "Error",
                description: "Failed to fetch shelters"
            });
        } finally {
            setLoading(false);
        }
    };

    const handleDeleteShelter = async (shelterId: number) => {
        if (!confirm('Are you sure you want to delete this shelter? This action cannot be undone.')) {
            return;
        }

        try {
            const response = await api.delete(`/admin/shelters/${shelterId}`);
            if (response.data.success) {
                toast({
                    title: "Success",
                    description: "Shelter deleted successfully"
                });
                fetchShelters();
            } else {
                throw new Error(response.data.error || 'Failed to delete shelter');
            }
        } catch (error: any) {
            toast({
                variant: "destructive",
                title: "Error",
                description: error.response?.data?.error || "Failed to delete shelter"
            });
        }
    };

    const handleSearch = (searchTerm: string) => {
        const newFilters = { ...filters, search: searchTerm };
        setFilters(newFilters);
    };

    if (loading) {
        return (
            <div className="flex justify-center items-center min-h-screen">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            </div>
        );
    }

    return (
        <div className="container mx-auto p-6">
            <Card>
                <CardHeader>
                    <div className="flex justify-between items-center">
                        <div>
                            <CardTitle>Shelter Management</CardTitle>
                            <CardDescription>
                                Manage animal shelters and their information
                            </CardDescription>
                        </div>
                        <Button onClick={() => navigate('/admin/shelters/new')}>
                            <Plus className="mr-2 h-4 w-4" />
                            Add New Shelter
                        </Button>
                    </div>
                </CardHeader>
                <CardContent>
                    <div className="flex gap-4 mb-6">
                        <div className="flex-1 relative">
                            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                            <Input
                                placeholder="Search shelters..."
                                className="pl-9"
                                onChange={(e) => handleSearch(e.target.value)}
                            />
                        </div>
                    </div>

                    <div className="rounded-md border">
                        <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableHead>Name</TableHead>
                                    <TableHead>Contact</TableHead>
                                    <TableHead>Location</TableHead>
                                    <TableHead>Status</TableHead>
                                    <TableHead>Pets</TableHead>
                                    <TableHead>Applications</TableHead>
                                    <TableHead className="text-right">Actions</TableHead>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                {shelters.map((shelter) => (
                                    <TableRow key={shelter.shelter_id}>
                                        <TableCell className="font-medium">
                                            {shelter.name}
                                        </TableCell>
                                        <TableCell>
                                            <div className="text-sm">
                                                <div>{shelter.phone}</div>
                                                <div className="text-muted-foreground">{shelter.email}</div>
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            <div className="text-sm">{shelter.address}</div>
                                        </TableCell>
                                        <TableCell>
                                            <Badge 
                                                variant={shelter.is_no_kill ? "success" : "default"}
                                                className="flex items-center gap-1 w-fit"
                                            >
                                                {shelter.is_no_kill ? 
                                                    <CheckCircle className="h-3 w-3" /> : 
                                                    <XCircle className="h-3 w-3" />
                                                }
                                                {shelter.is_no_kill ? 'No-Kill' : 'Standard'}
                                            </Badge>
                                        </TableCell>
                                        <TableCell>
                                            <Badge variant="outline">{shelter.total_pets}</Badge>
                                        </TableCell>
                                        <TableCell>
                                            <Badge variant="outline">{shelter.active_applications}</Badge>
                                        </TableCell>
                                        <TableCell className="text-right">
                                            <DropdownMenu>
                                                <DropdownMenuTrigger asChild>
                                                    <Button variant="ghost" className="h-8 w-8 p-0">
                                                        <span className="sr-only">Open menu</span>
                                                        <MoreHorizontal className="h-4 w-4" />
                                                    </Button>
                                                </DropdownMenuTrigger>
                                                <DropdownMenuContent align="end">
                                                    <DropdownMenuLabel>Actions</DropdownMenuLabel>
                                                    <DropdownMenuItem
                                                        onClick={() => navigate(`/admin/shelters/${shelter.shelter_id}`)}
                                                    >
                                                        <Building2 className="mr-2 h-4 w-4" />
                                                        View Details
                                                    </DropdownMenuItem>
                                                    <DropdownMenuItem
                                                        onClick={() => navigate(`/admin/shelters/${shelter.shelter_id}/staff`)}
                                                    >
                                                        <Users className="mr-2 h-4 w-4" />
                                                        Manage Staff
                                                    </DropdownMenuItem>
                                                    <DropdownMenuSeparator />
                                                    <DropdownMenuItem
                                                        onClick={() => navigate(`/admin/shelters/${shelter.shelter_id}/edit`)}
                                                    >
                                                        <Edit className="mr-2 h-4 w-4" />
                                                        Edit Shelter
                                                    </DropdownMenuItem>
                                                    <DropdownMenuItem
                                                        onClick={() => handleDeleteShelter(shelter.shelter_id)}
                                                        className="text-red-600"
                                                    >
                                                        <Trash2 className="mr-2 h-4 w-4" />
                                                        Delete Shelter
                                                    </DropdownMenuItem>
                                                </DropdownMenuContent>
                                            </DropdownMenu>
                                        </TableCell>
                                    </TableRow>
                                ))}
                            </TableBody>
                        </Table>
                    </div>
                </CardContent>
            </Card>
        </div>
    );
}

========================================

File: ./frontend/src/pages/UnauthorizedPage.tsx
----------------------------------------
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Shield, Home } from 'lucide-react';
import { Card, CardContent } from '@/components/ui/card';

export default function UnauthorizedPage() {
  const navigate = useNavigate();

  return (
    <div className="container max-w-md mx-auto px-4 py-16">
      <Card>
        <CardContent className="pt-6 text-center">
          <Shield className="h-16 w-16 mx-auto mb-6 text-muted-foreground" />
          
          <h1 className="text-2xl font-bold mb-4">
            Access Denied
          </h1>
          
          <p className="text-muted-foreground mb-8">
            You don't have permission to access this page. Please contact your administrator if you believe this is an error.
          </p>
          
          <div className="space-x-4">
            <Button 
              variant="default"
              onClick={() => navigate(-1)}
            >
              Go Back
            </Button>
            
            <Button 
              variant="outline"
              onClick={() => navigate('/')}
            >
              <Home className="mr-2 h-4 w-4" />
              Home
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

========================================

File: ./frontend/src/App.css
----------------------------------------
@tailwind base;
@tailwind components;
@tailwind utilities;
 
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;

    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
 
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
 
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
 
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
 
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
 
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
 
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;

    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
 
    --radius: 0.5rem;
 
    --chart-1: 12 76% 61%;
 
    --chart-2: 173 58% 39%;
 
    --chart-3: 197 37% 24%;
 
    --chart-4: 43 74% 66%;
 
    --chart-5: 27 87% 67%;
  }
 
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
 
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
 
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
 
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
 
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
 
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
 
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
 
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
 
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}
 
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

========================================

File: ./frontend/src/types/api.ts
----------------------------------------
export interface User {
    user_id: number;
    username: string;
    email: string;
    role: 'admin' | 'shelter_staff' | 'adopter';
    profile_image?: string;
}

export interface PetImage {
    image_id: number;
    url: string;
    is_primary: boolean;
    created_at: string;
}

export interface PetTrait {
    trait_id: number;
    trait_name: string;
    category: string;
}

export interface Pet {
    pet_id: number;
    name: string;
    species: string;
    breed: string;
    age: number;
    gender: string;
    description: string;
    shelter_name: string;
    traits: {
        [category: string]: string[];
    };
    images?: PetImage[];
}

export interface ApiResponse<T> {
    success: boolean;
    data?: T;
    error?: string;
}

export interface PaginatedResponse<T> extends ApiResponse<T> {
    data: {
        items: T[];
        total: number;
        page: number;
        perPage: number;
    };
}

========================================

File: ./frontend/src/types/profile.ts
----------------------------------------
export interface UserProfile {
    profile_id: number;
    user_id: number;
    first_name: string;
    last_name: string;
    phone: string;
    address: string | null;
    city: string | null;
    state: string | null;
    zip_code: string | null;
    housing_type: 'house' | 'apartment' | 'condo' | 'other' | null;
    has_yard: boolean | null;
    other_pets: string | null;
    household_members: number | null;
    email: string;
    username: string;
    role: 'adopter' | 'shelter_staff' | 'admin';
    account_status: 'pending' | 'active' | 'suspended';
    profile_image: string | null;
}

export interface ProfileUpdateData {
    first_name: string;
    last_name: string;
    phone: string;
    address?: string;
    city?: string;
    state?: string;
    zip_code?: string;
    housing_type?: 'house' | 'apartment' | 'condo' | 'other';
    has_yard?: boolean;
    other_pets?: string;
    household_members?: number;
}

========================================

File: ./frontend/src/types/index.ts
----------------------------------------

========================================

File: ./frontend/src/index.css
----------------------------------------
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tpe && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.3.2",
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-dropdown-menu": "^2.0.6",
    "@radix-ui/react-tabs": "^1.0.4",
    "@tanstack/react-query": "^5.8.4",
    "axios": "^1.6.2",
    "clsx": "^2.0.0",
    "jotai": "^2.5.1",
    "lucide-react": "^0.292.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-hook-form": "^7.48.2",
    "react-router-dom": "^6.19.0",
    "recharts": "^2.9.3",
    "tailwind-merge": "^2.0.0",
    "zod": "^3.22.4"
  },
  "devDependencies": {
    "@heroicons/react": "^2.0.18",
    "@testing-library/jest-dom": "^6.1.4",
    "@testing-library/react": "^14.1.2",
    "@types/node": "^20.9.2",
    "@types/react": "^18.2.37",
    "@types/react-dom": "^18.2.15",
    "@typescript-eslint/eslint-plugin": "^6.11.0",
    "@typescript-eslint/parser": "^6.11.0",
    "@vitejs/plugin-react": "^4.2.0",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.53.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.1",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.4",
    "postcss": "^8.4.31",
    "prettier": "^3.1.0",
    "tailwindcss": "^3.3.5",
    "typescript": "^5.2.2",
    "vite": "^5.0.0",
    "vitest": "^0.34.6"
  }
}

========================================

File: ./frontend/src/stores/auth.ts
----------------------------------------
import { atom } from 'jotai';

export interface User {
  user_id: number;
  username: string;
  email: string;
  role: 'admin' | 'shelter_staff' | 'adopter';
  profile_image?: string | null;
}

// Create atoms for user and loading state
export const userAtom = atom<User | null>(null);
export const authLoadingAtom = atom<boolean>(true);

// Token management functions
export const getStoredToken = () => localStorage.getItem('token');
export const setStoredToken = (token: string) => localStorage.setItem('token', token);
export const removeStoredToken = () => localStorage.removeItem('token');

// User management functions
export const getStoredUser = (): User | null => {
  try {
    const userStr = localStorage.getItem('user');
    if (!userStr) return null;
    const user = JSON.parse(userStr);
    return user;
  } catch (e) {
    console.error('Error parsing stored user:', e);
    return null;
  }
};

export const setStoredUser = (user: User) => {
  try {
    localStorage.setItem('user', JSON.stringify(user));
  } catch (e) {
    console.error('Error storing user:', e);
  }
};

export const removeStoredUser = () => {
  localStorage.removeItem('user');
};

========================================

File: ./frontend/src/routes/shelterRoutes.tsx
----------------------------------------
import { Route, Routes } from 'react-router-dom';
import { RoleProtectedRoute } from '@/components/auth/RoleProtectedRoute';
import ShelterDashboard from '@/pages/shelter/ShelterDashboard';
import ShelterPetManagement from '@/pages/shelter/ShelterManagement';
import NewPetPage from '@/pages/shelter/NewPetPage';

export function ShelterRoutes() {
  return (
    <RoleProtectedRoute requiredRole="shelter_staff">
      <Routes>
        <Route path="/" element={<ShelterDashboard />} />
        <Route path="/pets" element={<ShelterPetManagement />} />
        <Route path="/pets/new" element={<NewPetPage />} />
      </Routes>
    </RoleProtectedRoute>
  );
}

========================================

File: ./frontend/src/services/api.ts
----------------------------------------

========================================

File: ./frontend/src/services/profile.ts
----------------------------------------
import api from '@/lib/axios';
import { UserProfile, ProfileUpdateData } from '@/types/profile';
import { ApiResponse } from '@/types/api';

export const profileService = {
    async getProfile() {
        const response = await api.get<ApiResponse<UserProfile>>('/profile');
        return response.data.data;
    },

    async updateProfile(data: ProfileUpdateData) {
        const response = await api.put<ApiResponse<UserProfile>>('/profile', data);
        return response.data.data;
    },
    
    async updateUserRole(userId: number, role: string) {
        const response = await api.put<ApiResponse<UserProfile>>(`/admin/users/${userId}/role`, { role });
        return response.data.data;
    },
    
    async getUsersByRole(role: string) {
        const response = await api.get<ApiResponse<UserProfile[]>>(`/admin/users`, {
            params: { role }
        });
        return response.data.data;
    },
    
    async getShelterStaff(shelterId: number) {
        const response = await api.get<ApiResponse<UserProfile[]>>(`/shelters/${shelterId}/staff`);
        return response.data.data;
    },

    async verifyEmail(token: string) {
        const response = await api.post<ApiResponse<{ message: string }>>('/auth/verify-email', { token });
        return response.data;
    },
    
    hasPermission(requiredRole: string): boolean {
        const user = JSON.parse(localStorage.getItem('user') || '{}');
        const roles = {
            'admin': ['admin'],
            'shelter_staff': ['admin', 'shelter_staff'],
            'adopter': ['admin', 'shelter_staff', 'adopter']
        };
        return roles[requiredRole]?.includes(user.role) || false;
    }
};

========================================

File: ./frontend/src/services/auth.ts
----------------------------------------
import api from '@/lib/axios'

interface LoginCredentials {
  email: string
  password: string
}

interface RegisterCredentials {
  username: string
  email: string
  password: string
}

interface AuthResponse {
  user: {
    user_id: number
    username: string
    email: string
  }
  token: string
}

export const authService = {
    async login(credentials: LoginCredentials) {
        const response = await api.post<ApiResponse<AuthResponse>>('/auth/login', credentials);
        return response.data.data || response.data;
    },

    async register(credentials: RegisterCredentials) {
        const response = await api.post<ApiResponse<AuthResponse>>('/auth/register', credentials);
        return response.data.data || response.data;
    },

    async logout() {
        localStorage.removeItem('token');
    }
}

========================================

File: ./frontend/src/hooks/use-toast.ts
----------------------------------------
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

========================================

File: ./frontend/src/main.tsx
----------------------------------------
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'  // Remove the .tsx extension
import './App.css'
import { Toaster } from "@/components/ui/toaster"

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
    <Toaster />
  </React.StrictMode>
)

========================================

File: ./frontend/src/App.tsx
----------------------------------------
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { AuthProvider } from '@/contexts/AuthContext';
import { ProtectedRoute } from '@/components/auth/ProtectedRoute';
import { RoleProtectedRoute } from '@/components/auth/RoleProtectedRoute';
import Navbar from '@/components/layout/Navbar';

// Page Imports
import HomePage from '@/pages/HomePage';
import LoginPage from '@/pages/LoginPage';
import PetsPage from '@/pages/PetsPage';
import QuizPage from '@/pages/QuizPage';
import QuizResultsPage from '@/pages/QuizResultsPage';
import RegisterPage from '@/pages/RegisterPage';
import PetDetailPage from '@/pages/PetDetailPage';
import ProfilePage from '@/pages/ProfilePage';
import ProfileSettings from '@/pages/profile/ProfileSettings';
import UnauthorizedPage from '@/pages/UnauthorizedPage';
import AdoptionFormPage from '@/pages/AdoptionFormPage';
import ApplicationsPage from '@/pages/profile/ApplicationsPage';
import ApplicationDetailPage from '@/pages/profile/ApplicationDetailPage';
import FavoritesPage from '@/pages/profile/FavoritesPage';

// Admin Pages
import AdminDashboard from '@/pages/admin/AdminDashboard';
import UserManagement from '@/pages/admin/UserManagement';
import ShelterManagement from '@/pages/admin/ShelterManagement';
import NewShelterPage from '@/pages/admin/NewShelterPage';

// Shelter Pages
import ShelterDashboard from '@/pages/shelter/ShelterDashboard';
import ShelterPetManagement from '@/pages/shelter/ShelterManagement';
import NewPetPage from '@/pages/shelter/NewPetPage';
import SheltersPage from '@/pages/SheltersPage';
import ShelterDetailPage from '@/pages/ShelterDetailPage';

// Blog Pages
import BlogListPage from '@/pages/blog/BlogListPage';
import BlogDetailPage from '@/pages/blog/BlogDetailPage';

function App() {
  return (
    <AuthProvider>
      <Router>
        <div className="min-h-screen bg-background">
          <Navbar />
          <Routes>
            {/* Public Routes */}
            <Route path="/" element={<HomePage />} />
            <Route path="/login" element={<LoginPage />} />
            <Route path="/register" element={<RegisterPage />} />
            <Route path="/unauthorized" element={<UnauthorizedPage />} />

            {/* Protected Routes */}
            <Route 
              path="/pets" 
              element={
                <ProtectedRoute>
                  <PetsPage />
                </ProtectedRoute>
              } 
            />
            <Route 
              path="/pets/:id" 
              element={
                <ProtectedRoute>
                  <PetDetailPage />
                </ProtectedRoute>
              }
            />

            <Route 
              path="/quiz" 
              element={
                <ProtectedRoute>
                  <QuizPage />
                </ProtectedRoute>
              }
            />
            
            <Route 
              path="/quiz/results" 
              element={
                <ProtectedRoute>
                  <QuizResultsPage />
                </ProtectedRoute>
              }
            />

            <Route 
              path="/adopt/:id" 
              element={
                <ProtectedRoute>
                  <AdoptionFormPage />
                </ProtectedRoute>
              }
            />

            {/* Profile Routes */}
            <Route 
              path="/profile/*" 
              element={
                <ProtectedRoute>
                  <Routes>
                    <Route path="/" element={<ProfilePage />} />
                    <Route path="/settings" element={<ProfileSettings />} />
                    <Route path="/applications" element={<ApplicationsPage />} />
                    <Route path="/applications/:id" element={<ApplicationDetailPage />} />
                    <Route path="/favorites" element={<FavoritesPage />} />
                  </Routes>
                </ProtectedRoute>
              } 
            />

            {/* Admin Routes */}
            <Route
              path="/admin/*"
              element={
                <RoleProtectedRoute requiredRole="admin">
                  <Routes>
                    <Route path="/" element={<AdminDashboard />} />
                    <Route path="/users" element={<UserManagement />} />
                    <Route path="/shelters" element={<ShelterManagement />} />
                    <Route path="/shelters/new" element={<NewShelterPage />} />
                  </Routes>
                </RoleProtectedRoute>
              }
            />

            {/* Shelter Routes */}
            <Route
              path="/shelter/*"
              element={
                <RoleProtectedRoute requiredRole="shelter_staff">
                  <Routes>
                    <Route path="/" element={<ShelterDashboard />} />
                    <Route path="/pets" element={<ShelterPetManagement />} />
                    <Route path="/pets/new" element={<NewPetPage />} />
                  </Routes>
                </RoleProtectedRoute>
              }
            />

            <Route 
              path="/shelters" 
              element={
                <ProtectedRoute>
                  <SheltersPage />
                </ProtectedRoute>
              }
            />

            <Route 
              path="/shelters/:id" 
              element={
                <ProtectedRoute>
                  <ShelterDetailPage />
                </ProtectedRoute>
              }
            />

            {/* Blog Routes */}
            <Route 
              path="/blog" 
              element={
                <ProtectedRoute>
                  <BlogListPage />
                </ProtectedRoute>
              }
            />
            <Route 
              path="/blog/:id" 
              element={
                <ProtectedRoute>
                  <BlogDetailPage />
                </ProtectedRoute>
              }
            />
          </Routes>
        </div>
      </Router>
    </AuthProvider>
  );
}

export default App;

========================================

File: ./frontend/components/pages/LoginPage.tsx
----------------------------------------
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { useNavigate, Link } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Form } from '@/components/ui/form';
import { Alert, AlertDescription } from '@/components/ui/alert';
import AuthLayout from './AuthLayout';
import FormInput from './FormInput';

// Validation schema
const loginSchema = z.object({
  email: z.string().email('Invalid email address'),
  password: z.string().min(8, 'Password must be at least 8 characters')
});

type LoginFormData = z.infer<typeof loginSchema>;

const LoginPage = () => {
  const navigate = useNavigate();
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);
  
  const form = useForm<LoginFormData>({
    resolver: zodResolver(loginSchema),
    defaultValues: {
      email: '',
      password: ''
    }
  });

  const onSubmit = async (data: LoginFormData) => {
    try {
      setError(null);
      setIsLoading(true);
      
      // TODO: Implement login logic with authService
      console.log('Login data:', data);
      
      // Redirect to home page on success
      navigate('/');
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An error occurred during login');
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <AuthLayout 
      title="Welcome back" 
      description="Enter your email to sign in to your account"
    >
      <Form {...form}>
        <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
          {error && (
            <Alert variant="destructive">
              <AlertDescription>{error}</AlertDescription>
            </Alert>
          )}
          
          <FormInput
            form={form}
            name="email"
            label="Email"
            placeholder="Enter your email"
            type="email"
          />
          
          <FormInput
            form={form}
            name="password"
            label="Password"
            placeholder="Enter your password"
            type="password"
          />
          
          <Button 
            type="submit" 
            className="w-full"
            disabled={isLoading}
          >
            {isLoading ? 'Signing in...' : 'Sign in'}
          </Button>
          
          <div className="text-center text-sm">
            <Link 
              to="/forgot-password"
              className="text-primary hover:text-primary/90"
            >
              Forgot password?
            </Link>
          </div>
          
          <div className="text-center text-sm">
            Don't have an account?{' '}
            <Link 
              to="/register"
              className="text-primary hover:text-primary/90"
            >
              Sign up
            </Link>
          </div>
        </form>
      </Form>
    </AuthLayout>
  );
};

export default LoginPage;

========================================

File: ./frontend/components/auth/AuthLayout.tsx
----------------------------------------
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';

const AuthLayout = ({ 
  children,
  title,
  description
}: { 
  children: React.ReactNode;
  title: string;
  description?: string;
}) => {
  return (
    <div className="min-h-screen w-full flex items-center justify-center bg-background p-4">
      <Card className="w-full max-w-md">
        <CardHeader className="space-y-1">
          <CardTitle className="text-2xl text-center">{title}</CardTitle>
          {description && (
            <CardDescription className="text-center">
              {description}
            </CardDescription>
          )}
        </CardHeader>
        <CardContent>
          {children}
        </CardContent>
      </Card>
    </div>
  );
};

export default AuthLayout;

========================================

File: ./frontend/components/auth/FormInput.tsx
----------------------------------------
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { 
  FormField,
  FormItem,
  FormLabel,
  FormControl,
  FormMessage,
} from "@/components/ui/form";
import { UseFormReturn } from "react-hook-form";

interface FormInputProps {
  form: UseFormReturn<any>;
  name: string;
  label: string;
  placeholder?: string;
  type?: string;
}

const FormInput = ({ 
  form, 
  name, 
  label, 
  placeholder, 
  type = "text" 
}: FormInputProps) => {
  return (
    <FormField
      control={form.control}
      name={name}
      render={({ field }) => (
        <FormItem>
          <FormLabel>{label}</FormLabel>
          <FormControl>
            <Input 
              placeholder={placeholder} 
              type={type} 
              {...field} 
            />
          </FormControl>
          <FormMessage />
        </FormItem>
      )}
    />
  );
};

export default FormInput;

========================================

File: ./frontend/eslintrc.js
----------------------------------------
module.exports = {
  env: {
    browser: true,
    es2021: true,
  },
  extends: [
    'eslint:recommended',
    'plugin:@typescript-eslint/recommended',
    'plugin:react-hooks/recommended',
    'plugin:prettier/recommended',
  ],
  parser: '@typescript-eslint/parser',
  parserOptions: {
    ecmaFeatures: {
      jsx: true,
    },
    ecmaVersion: 12,
    sourceType: 'module',
  },
  plugins: ['react', '@typescript-eslint', 'prettier'],
  rules: {
    'react/react-in-jsx-scope': 'off',
    'prettier/prettier': 'error',
    '@typescript-eslint/explicit-module-boundary-types': 'off',
    '@typescript-eslint/no-unused-vars': ['warn', { argsIgnorePattern: '^_' }],
  },
  settings: {
    react: {
      version: 'detect',
    },
  },
}

========================================

