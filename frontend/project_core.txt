# PawPath Pet Adoption Frontend Codebase
Generated on Thu Nov 21 15:31:30 CST 2024



### File: ./src/components/layout/MainLayout.tsx
```

```


### File: ./src/components/layout/Navbar.tsx
```
import { Link } from 'react-router-dom'
import { useAuth } from '@/contexts/AuthContext'
import { Button } from '@/components/ui/button'
import {
  DropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuTrigger,
  DropdownMenuSeparator,
  DropdownMenuLabel,
} from '@/components/ui/dropdown-menu'
import { 
  User, 
  LogOut, 
  Settings, 
  Shield, 
  Home, 
  PawPrint,
  Heart,
  ClipboardList
} from 'lucide-react'
import { Avatar, AvatarFallback } from '@/components/ui/avatar'

function Navbar() {
  const { isAuthenticated, user, logout } = useAuth()

  const handleLogout = () => {
    logout()
  }

  const getInitials = (username: string) => {
    return username
      .split(' ')
      .map(word => word[0])
      .join('')
      .toUpperCase()
      .slice(0, 2);
  }

  const renderRoleBasedLinks = () => {
    if (!user) return null;

    switch (user.role) {
      case 'admin':
        return (
          <>
            <DropdownMenuSeparator />
            <DropdownMenuLabel>Admin</DropdownMenuLabel>
            <DropdownMenuItem asChild>
              <Link to="/admin">
                <Shield className="mr-2 h-4 w-4" />
                Admin Dashboard
              </Link>
            </DropdownMenuItem>
            <DropdownMenuItem asChild>
              <Link to="/admin/users">
                <User className="mr-2 h-4 w-4" />
                User Management
              </Link>
            </DropdownMenuItem>
          </>
        );
      case 'shelter_staff':
        return (
          <>
            <DropdownMenuSeparator />
            <DropdownMenuLabel>Shelter</DropdownMenuLabel>
            <DropdownMenuItem asChild>
              <Link to="/shelter">
                <Home className="mr-2 h-4 w-4" />
                Shelter Dashboard
              </Link>
            </DropdownMenuItem>
            <DropdownMenuItem asChild>
              <Link to="/shelter/pets">
                <PawPrint className="mr-2 h-4 w-4" />
                Manage Pets
              </Link>
            </DropdownMenuItem>
          </>
        );
      default:
        return null;
    }
  };

  return (
    <nav className="bg-primary text-primary-foreground shadow-lg">
      <div className="container mx-auto px-4">
        <div className="flex justify-between items-center h-16">
          <Link to="/" className="text-xl font-bold">
            PawPath
          </Link>
          
          <div className="space-x-4 flex items-center">
            <Link to="/pets" className="hover:text-opacity-80">
              Find Pets
            </Link>
            
            {isAuthenticated ? (
              <>
                <Link to="/quiz" className="hover:text-opacity-80">
                  Take Quiz
                </Link>
                
                <DropdownMenu>
                  <DropdownMenuTrigger asChild>
                    <Button 
                      variant="ghost" 
                      className="hover:text-opacity-80 relative flex items-center"
                    >
                      <Avatar className="h-8 w-8 mr-2">
                        <AvatarFallback>
                          {user?.username ? getInitials(user.username) : 'U'}
                        </AvatarFallback>
                      </Avatar>
                      <span>{user?.username}</span>
                    </Button>
                  </DropdownMenuTrigger>
                  <DropdownMenuContent align="end" className="w-56">
                    <DropdownMenuLabel>My Account</DropdownMenuLabel>
                    <DropdownMenuItem asChild>
                      <Link to="/profile">
                        <User className="mr-2 h-4 w-4" />
                        Profile
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuItem asChild>
                      <Link to="/profile/applications">
                        <ClipboardList className="mr-2 h-4 w-4" />
                        My Applications
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuItem asChild>
                      <Link to="/profile/favorites">
                        <Heart className="mr-2 h-4 w-4" />
                        Saved Pets
                      </Link>
                    </DropdownMenuItem>
                    <DropdownMenuItem asChild>
                      <Link to="/profile/settings">
                        <Settings className="mr-2 h-4 w-4" />
                        Settings
                      </Link>
                    </DropdownMenuItem>
                    
                    {renderRoleBasedLinks()}
                    
                    <DropdownMenuSeparator />
                    <DropdownMenuItem 
                      onClick={handleLogout}
                      className="text-red-600 cursor-pointer"
                    >
                      <LogOut className="mr-2 h-4 w-4" />
                      Logout
                    </DropdownMenuItem>
                  </DropdownMenuContent>
                </DropdownMenu>
              </>
            ) : (
              <>
                <Link to="/login" className="hover:text-opacity-80">
                  Login
                </Link>
                <Link to="/register" className="hover:text-opacity-80">
                  Register
                </Link>
              </>
            )}
          </div>
        </div>
      </div>
    </nav>
  );
}

export default Navbar;

```


### File: ./src/components/shared/LoadingSpinner.tsx
```

```


### File: ./src/components/pets/PetCard.tsx
```
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { PawPrint, MapPin } from 'lucide-react';

interface PetImage {
    image_id: number;
    url: string;
    is_primary: boolean;
}

interface PetCardProps {
    pet: {
        pet_id: number;
        name: string;
        species: string;
        breed: string;
        age: number;
        gender: string;
        description: string;
        shelter_name: string;
        traits?: { [category: string]: string[] };
        images?: PetImage[];
    };
    onClick?: () => void;
}

export function PetCard({ pet, onClick }: PetCardProps) {
    // Find primary image or first image
    const displayImage = pet.images?.find(img => img.is_primary) || pet.images?.[0];

    return (
        <Card
            className="cursor-pointer hover:shadow-lg transition-shadow h-full"
            onClick={onClick}
        >
            <div className="aspect-square relative bg-white">
                {displayImage ? (
                    <img
                        src={displayImage.url}
                        alt={`${pet.name} - ${pet.breed}`}
                        className="w-full h-full object-contain"
                        style={{ backgroundColor: 'white' }}
                        onError={(e) => {
                            console.error(`Failed to load image: ${displayImage.url}`);
                            const target = e.target as HTMLImageElement;
                            target.style.display = 'none';
                            const fallback = target.parentElement?.querySelector('.fallback');
                            if (fallback) fallback.classList.remove('hidden');
                        }}
                    />
                ) : (
                    <div className="w-full h-full flex items-center justify-center">
                        <PawPrint className="h-12 w-12 text-muted-foreground" />
                    </div>
                )}
                {/* Hidden fallback that shows if image fails to load */}
                <div className="fallback hidden w-full h-full flex items-center justify-center absolute top-0 left-0 bg-muted">
                    <PawPrint className="h-12 w-12 text-muted-foreground" />
                </div>
            </div>

            <CardHeader className="space-y-1">
                <CardTitle className="text-xl">{pet.name}</CardTitle>
                <CardDescription>
                    {pet.breed} • {pet.age} years old • {pet.gender}
                </CardDescription>
            </CardHeader>

            <CardContent>
                <p className="text-sm text-muted-foreground line-clamp-2 mb-4">
                    {pet.description}
                </p>

                {pet.traits && Object.keys(pet.traits).length > 0 && (
                    <div className="flex flex-wrap gap-2 mb-4">
                        {Object.entries(pet.traits).map(([category, traits]) => (
                            Array.isArray(traits) ? traits.map(trait => (
                                <Badge
                                    key={`${category}-${trait}`}
                                    variant="secondary"
                                    className="text-xs"
                                >
                                    {trait}
                                </Badge>
                            )) : null
                        ))}
                    </div>
                )}

                <div className="flex items-center text-sm text-muted-foreground">
                    <MapPin className="h-4 w-4 mr-1" />
                    {pet.shelter_name}
                </div>
            </CardContent>
        </Card>
    );
}

```


### File: ./src/components/pets/PetImageUploader.tsx
```
import { useState } from 'react';
import { Button } from '@/components/ui/button';
import { Card } from '@/components/ui/card';
import { Image as ImageIcon, X, Upload } from 'lucide-react';

interface PetImageUploaderProps {
  onChange: (files: File[]) => void;
  maxFiles?: number;
  accept?: string;
}

export function PetImageUploader({ 
  onChange, 
  maxFiles = 5, 
  accept = "image/*" 
}: PetImageUploaderProps) {
  const [previewUrls, setPreviewUrls] = useState<string[]>([]);

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    const files = Array.from(event.target.files || []);
    if (files.length + previewUrls.length > maxFiles) {
      alert(`You can only upload up to ${maxFiles} images`);
      return;
    }

    // Create preview URLs
    const newPreviewUrls = files.map(file => URL.createObjectURL(file));
    setPreviewUrls(prev => [...prev, ...newPreviewUrls]);
    
    // Call onChange with all files
    onChange(files);
  };

  const removeImage = (index: number) => {
    setPreviewUrls(prev => {
      const newUrls = [...prev];
      URL.revokeObjectURL(newUrls[index]); // Clean up URL object
      newUrls.splice(index, 1);
      return newUrls;
    });
    
    // Notify parent about removed image
    onChange([]);
  };

  return (
    <div className="space-y-4">
      <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
        {previewUrls.map((url, index) => (
          <Card key={url} className="relative group">
            <div className="aspect-square relative">
              <img
                src={url}
                alt={`Preview ${index + 1}`}
                className="w-full h-full object-cover rounded-md"
              />
              <Button
                size="icon"
                variant="destructive"
                className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity"
                onClick={() => removeImage(index)}
              >
                <X className="h-4 w-4" />
              </Button>
            </div>
          </Card>
        ))}

        {previewUrls.length < maxFiles && (
          <Card className="aspect-square flex items-center justify-center cursor-pointer hover:bg-accent transition-colors">
            <label className="w-full h-full flex flex-col items-center justify-center cursor-pointer">
              <input
                type="file"
                className="hidden"
                accept={accept}
                multiple
                onChange={handleFileChange}
              />
              <Upload className="h-8 w-8 mb-2 text-muted-foreground" />
              <span className="text-sm text-muted-foreground">Upload Image</span>
            </label>
          </Card>
        )}
      </div>
    </div>
  );
}

```


### File: ./src/components/pets/PetSubmissionForm.tsx
```
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { useToast } from '@/hooks/use-toast';
import { PetImageUploader } from '@/components/pets/PetImageUploader';
import api from '@/lib/axios';

const petSubmissionSchema = z.object({
  name: z.string().min(1, 'Pet name is required'),
  species: z.string().min(1, 'Species is required'),
  breed: z.string().optional(),
  age: z.number().min(0, 'Age must be positive').optional(),
  gender: z.enum(['male', 'female']).optional(),
  description: z.string().min(10, 'Please provide a detailed description'),
});

type PetSubmissionFormData = z.infer<typeof petSubmissionSchema>;

export default function PetSubmissionForm() {
  const [images, setImages] = useState<File[]>([]);
  const [isSubmitting, setIsSubmitting] = useState(false);
  const { toast } = useToast();
  const navigate = useNavigate();
  
  const form = useForm<PetSubmissionFormData>({
    resolver: zodResolver(petSubmissionSchema),
    defaultValues: {
      name: '',
      species: '',
      breed: '',
      description: '',
    },
  });

  const onSubmit = async (data: PetSubmissionFormData) => {
    try {
      setIsSubmitting(true);
      
      // Create FormData to handle both text data and files
      const formData = new FormData();
      Object.entries(data).forEach(([key, value]) => {
        if (value !== undefined) {
          formData.append(key, value.toString());
        }
      });
      
      // Append images
      images.forEach((image) => {
        formData.append('images[]', image);
      });

      const response = await api.post('/pets/submit', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      if (response.data.success) {
        toast({
          title: 'Success',
          description: 'Your pet has been submitted for review',
        });
        navigate('/profile/submissions');
      }
    } catch (error: any) {
      toast({
        variant: 'destructive',
        title: 'Error',
        description: error.response?.data?.error || 'Failed to submit pet',
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <Form {...form}>
      <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
        <FormField
          control={form.control}
          name="name"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Pet Name</FormLabel>
              <FormControl>
                <Input {...field} placeholder="Enter pet name" />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="species"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Species</FormLabel>
              <Select
                onValueChange={field.onChange}
                defaultValue={field.value}
              >
                <FormControl>
                  <SelectTrigger>
                    <SelectValue placeholder="Select species" />
                  </SelectTrigger>
                </FormControl>
                <SelectContent>
                  <SelectItem value="dog">Dog</SelectItem>
                  <SelectItem value="cat">Cat</SelectItem>
                  <SelectItem value="bird">Bird</SelectItem>
                  <SelectItem value="rabbit">Rabbit</SelectItem>
                  <SelectItem value="other">Other</SelectItem>
                </SelectContent>
              </Select>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="breed"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Breed (Optional)</FormLabel>
              <FormControl>
                <Input {...field} placeholder="Enter breed" />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <FormField
          control={form.control}
          name="description"
          render={({ field }) => (
            <FormItem>
              <FormLabel>Description</FormLabel>
              <FormControl>
                <Textarea
                  {...field}
                  placeholder="Describe the pet's personality, history, and any special needs..."
                  className="min-h-[100px]"
                />
              </FormControl>
              <FormMessage />
            </FormItem>
          )}
        />

        <div className="space-y-2">
          <FormLabel>Pet Images</FormLabel>
          <PetImageUploader
            onChange={setImages}
            maxFiles={5}
            accept="image/*"
          />
        </div>

        <div className="flex justify-end gap-4">
          <Button
            type="button"
            variant="outline"
            onClick={() => navigate(-1)}
          >
            Cancel
          </Button>
          <Button
            type="submit"
            disabled={isSubmitting}
          >
            {isSubmitting ? 'Submitting...' : 'Submit Pet for Review'}
          </Button>
        </div>
      </form>
    </Form>
  );
}

```


### File: ./src/components/pets/PetFilters.tsx
```
import { useState } from 'react';
import {
  Sheet,
  SheetContent,
  SheetDescription,
  SheetHeader,
  SheetTitle,
  SheetTrigger,
} from '@/components/ui/sheet';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Slider } from '@/components/ui/slider';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Filter, X } from 'lucide-react';

interface PetFilters {
  species?: string;
  breed?: string;
  ageMin?: number;
  ageMax?: number;
  gender?: string;
  size?: string;
  goodWith?: string[];
  traits?: string[];
}

interface PetFiltersProps {
  onFiltersChange: (filters: PetFilters) => void;
  initialFilters?: PetFilters;
  availableTraits: string[];
}

export function PetFilters({ onFiltersChange, initialFilters, availableTraits }: PetFiltersProps) {
  const [filters, setFilters] = useState<PetFilters>(initialFilters || {});
  const [isOpen, setIsOpen] = useState(false);

  const handleFilterChange = (key: keyof PetFilters, value: any) => {
    const newFilters = { ...filters, [key]: value };
    setFilters(newFilters);
    onFiltersChange(newFilters);
  };

  const clearFilters = () => {
    setFilters({});
    onFiltersChange({});
  };

  return (
    <Sheet open={isOpen} onOpenChange={setIsOpen}>
      <SheetTrigger asChild>
        <Button variant="outline" size="sm">
          <Filter className="mr-2 h-4 w-4" />
          Filters
        </Button>
      </SheetTrigger>
      <SheetContent className="w-full sm:max-w-md">
        <SheetHeader>
          <SheetTitle>Filter Pets</SheetTitle>
          <SheetDescription>
            Customize your search to find the perfect pet
          </SheetDescription>
        </SheetHeader>

        <div className="space-y-6 py-4">
          <div className="space-y-2">
            <Label>Species</Label>
            <Select
              value={filters.species}
              onValueChange={(value) => handleFilterChange('species', value)}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select species" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="dog">Dogs</SelectItem>
                <SelectItem value="cat">Cats</SelectItem>
                <SelectItem value="bird">Birds</SelectItem>
                <SelectItem value="rabbit">Rabbits</SelectItem>
                <SelectItem value="other">Other</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label>Breed</Label>
            <Input
              placeholder="Search breeds..."
              value={filters.breed || ''}
              onChange={(e) => handleFilterChange('breed', e.target.value)}
            />
          </div>

          <div className="space-y-2">
            <Label>Age Range (Years)</Label>
            <div className="flex items-center space-x-4">
              <Input
                type="number"
                placeholder="Min"
                min={0}
                max={20}
                value={filters.ageMin || ''}
                onChange={(e) => handleFilterChange('ageMin', e.target.value)}
              />
              <span>to</span>
              <Input
                type="number"
                placeholder="Max"
                min={0}
                max={20}
                value={filters.ageMax || ''}
                onChange={(e) => handleFilterChange('ageMax', e.target.value)}
              />
            </div>
          </div>

          <div className="space-y-2">
            <Label>Gender</Label>
            <RadioGroup
              value={filters.gender}
              onValueChange={(value) => handleFilterChange('gender', value)}
            >
              <div className="flex items-center space-x-4">
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="any" id="gender-any" />
                  <Label htmlFor="gender-any">Any</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="male" id="gender-male" />
                  <Label htmlFor="gender-male">Male</Label>
                </div>
                <div className="flex items-center space-x-2">
                  <RadioGroupItem value="female" id="gender-female" />
                  <Label htmlFor="gender-female">Female</Label>
                </div>
              </div>
            </RadioGroup>
          </div>

          <div className="space-y-2">
            <Label>Size</Label>
            <Select
              value={filters.size}
              onValueChange={(value) => handleFilterChange('size', value)}
            >
              <SelectTrigger>
                <SelectValue placeholder="Select size" />
              </SelectTrigger>
              <SelectContent>
                <SelectItem value="small">Small</SelectItem>
                <SelectItem value="medium">Medium</SelectItem>
                <SelectItem value="large">Large</SelectItem>
              </SelectContent>
            </Select>
          </div>

          <div className="space-y-2">
            <Label>Good with</Label>
            <div className="flex flex-wrap gap-2">
              {['kids', 'dogs', 'cats'].map((type) => (
                <Button
                  key={type}
                  variant="outline"
                  size="sm"
                  className={`capitalize ${
                    filters.goodWith?.includes(type)
                      ? 'bg-primary text-primary-foreground'
                      : ''
                  }`}
                  onClick={() => {
                    const current = filters.goodWith || [];
                    const updated = current.includes(type)
                      ? current.filter((t) => t !== type)
                      : [...current, type];
                    handleFilterChange('goodWith', updated);
                  }}
                >
                  {type}
                </Button>
              ))}
            </div>
          </div>

          <div className="pt-4 flex justify-between">
            <Button variant="outline" onClick={clearFilters}>
              <X className="mr-2 h-4 w-4" />
              Clear Filters
            </Button>
            <Button onClick={() => setIsOpen(false)}>
              Apply Filters
            </Button>
          </div>
        </div>
      </SheetContent>
    </Sheet>
  );
}

```


### File: ./src/components/auth/RoleProtectedRoute.tsx
```
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';

interface RoleProtectedRouteProps {
  children: React.ReactNode;
  requiredRole: string;
}

export function RoleProtectedRoute({ children, requiredRole }: RoleProtectedRouteProps) {
  const { isAuthenticated, isLoading, user } = useAuth();
  const location = useLocation();

  if (isLoading) {
    return <div>Loading...</div>;
  }

  if (!isAuthenticated) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  // Check role authorization
  const roleHierarchy = {
    'admin': ['admin'],
    'shelter_staff': ['admin', 'shelter_staff'],
    'adopter': ['admin', 'shelter_staff', 'adopter']
  };

  const userRole = user?.role || 'adopter';
  const allowedRoles = roleHierarchy[requiredRole] || [];

  if (!allowedRoles.includes(userRole)) {
    return <Navigate to="/unauthorized" replace />;
  }

  return <>{children}</>;
}

```


### File: ./src/components/auth/ProtectedRoute.tsx
```
import { Navigate, useLocation } from 'react-router-dom';
import { useAuth } from '@/contexts/AuthContext';

export function ProtectedRoute({ children }: { children: React.ReactNode }) {
  const { isAuthenticated, isLoading } = useAuth();
  const location = useLocation();

  if (isLoading) {
    // You could return a loading spinner here
    return <div>Loading...</div>;
  }

  if (!isAuthenticated) {
    return <Navigate to="/login" state={{ from: location }} replace />;
  }

  return <>{children}</>;
}

```


### File: ./src/contexts/AuthContext.tsx
```
import { createContext, useContext, useEffect, useState } from 'react';
import { useAtom } from 'jotai';
import { 
    userAtom, 
    authLoadingAtom,
    getStoredToken,
    setStoredToken,
    removeStoredToken,
    getStoredUser,
    setStoredUser,
    removeStoredUser,
    User 
} from '@/stores/auth';
import api from '@/lib/axios';

interface AuthContextType {
    isAuthenticated: boolean;
    user: User | null;
    login: (email: string, password: string) => Promise<void>;
    logout: () => void;
    isLoading: boolean;
}

const AuthContext = createContext<AuthContextType | undefined>(undefined);

export function AuthProvider({ children }: { children: React.ReactNode }) {
    const [user, setUser] = useAtom(userAtom);
    const [isLoading, setIsLoading] = useAtom(authLoadingAtom);

    // Set up axios interceptor for authentication
    useEffect(() => {
        const token = getStoredToken();
        if (token) {
            api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
        }

        // Add request interceptor
        const requestInterceptor = api.interceptors.request.use(
            (config) => {
                const token = getStoredToken();
                if (token) {
                    config.headers.Authorization = `Bearer ${token}`;
                }
                return config;
            },
            (error) => {
                return Promise.reject(error);
            }
        );

        // Add response interceptor
        const responseInterceptor = api.interceptors.response.use(
            (response) => response,
            async (error) => {
                if (error.response?.status === 401) {
                    // Token expired or invalid
                    logout();
                }
                return Promise.reject(error);
            }
        );

        return () => {
            // Clean up interceptors
            api.interceptors.request.eject(requestInterceptor);
            api.interceptors.response.eject(responseInterceptor);
        };
    }, []);

    // Initialize auth state from localStorage
    useEffect(() => {
        const initializeAuth = async () => {
            try {
                setIsLoading(true);
                const token = getStoredToken();
                const storedUser = getStoredUser();
                
                if (!token) {
                    setIsLoading(false);
                    return;
                }

                api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
                
                try {
                    // Verify token with backend
                    const response = await api.get('/auth/me');
                    const userData = response.data.data.user;
                    
                    if (JSON.stringify(userData) !== JSON.stringify(storedUser)) {
                        setStoredUser(userData);
                        setUser(userData);
                    } else {
                        setUser(storedUser);
                    }
                } catch (error) {
                    console.error('Token verification failed:', error);
                    logout();
                }
            } catch (error) {
                console.error('Auth initialization error:', error);
                logout();
            } finally {
                setIsLoading(false);
            }
        };

        initializeAuth();
    }, []);

    const login = async (email: string, password: string) => {
        try {
            const response = await api.post('/auth/login', { email, password });
            const { token, user: userData } = response.data.data;
            
            setStoredToken(token);
            api.defaults.headers.common['Authorization'] = `Bearer ${token}`;
            setStoredUser(userData);
            setUser(userData);
            
            console.log('Login successful, user:', userData);
        } catch (error) {
            console.error('Login error:', error);
            throw error;
        }
    };

    const logout = () => {
        removeStoredToken();
        removeStoredUser();
        delete api.defaults.headers.common['Authorization'];
        setUser(null);
    };

    return (
        <AuthContext.Provider 
            value={{ 
                isAuthenticated: !!user, 
                user, 
                login, 
                logout,
                isLoading 
            }}
        >
            {children}
        </AuthContext.Provider>
    );
}

export const useAuth = () => {
    const context = useContext(AuthContext);
    if (context === undefined) {
        throw new Error('useAuth must be used within an AuthProvider');
    }
    return context;
};

```


### File: ./src/lib/utils.ts
```
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

```


### File: ./src/lib/axios.ts
```
import axios from 'axios';
import { getStoredToken } from '@/stores/auth';

const api = axios.create({
    baseURL: '/api', // This will be prepended to all requests
    headers: {
        'Content-Type': 'application/json',
    },
});

// Add request interceptor to include auth token
api.interceptors.request.use((config) => {
    const token = getStoredToken();
    if (token) {
        config.headers.Authorization = `Bearer ${token}`;
    }
    return config;
}, (error) => {
    return Promise.reject(error);
});

// Add response interceptor to handle image URLs
api.interceptors.response.use((response) => {
    // Function to process image URLs in an object
    const processImageUrls = (obj: any) => {
        if (!obj) return obj;
        
        if (Array.isArray(obj)) {
            return obj.map(item => processImageUrls(item));
        }
        
        if (typeof obj === 'object') {
            Object.keys(obj).forEach(key => {
                if (key === 'images' && Array.isArray(obj[key])) {
                    obj[key] = obj[key].map((image: any) => ({
                        ...image,
                        url: `${window.location.origin}${image.url}`
                    }));
                } else if (typeof obj[key] === 'object') {
                    obj[key] = processImageUrls(obj[key]);
                }
            });
        }
        return obj;
    };

    // Process the response data
    if (response.data && response.data.data) {
        response.data.data = processImageUrls(response.data.data);
    }

    return response;
}, (error) => {
    return Promise.reject(error);
});

export default api;

```


### File: ./src/pages/HomePage.tsx
```
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { ArrowRight, Heart, Search, Newspaper, PawPrint, Building2 } from 'lucide-react';

function HomePage() {
  const navigate = useNavigate();

  return (
    <div className="min-h-screen">
      {/* Hero Section */}
      <section className="relative py-20 bg-gradient-to-b from-primary/10 to-background">
        <div className="container mx-auto px-4">
          <div className="text-center max-w-3xl mx-auto">
            <h1 className="text-4xl md:text-6xl font-bold mb-6">
              Find Your Perfect Pet Companion
            </h1>
            <p className="text-xl text-muted-foreground mb-8">
              Take our matching quiz and discover the pet that fits perfectly with your lifestyle
            </p>
            <div className="flex flex-col sm:flex-row gap-4 justify-center">
              <Button size="lg" onClick={() => navigate('/quiz')}>
                Take the Quiz <ArrowRight className="ml-2 h-4 w-4" />
              </Button>
              <Button size="lg" variant="outline" onClick={() => navigate('/pets')}>
                Browse Pets <Search className="ml-2 h-4 w-4" />
              </Button>
              <Button size="lg" variant="secondary" onClick={() => navigate('/shelters')}>
                View Shelters <Building2 className="ml-2 h-4 w-4" />
              </Button>
            </div>
          </div>
        </div>
      </section>

      {/* Features Section */}
      <section className="py-16 bg-background">
        <div className="container mx-auto px-4">
          <h2 className="text-3xl font-bold text-center mb-12">How PawPath Works</h2>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <Card>
              <CardContent className="pt-6">
                <div className="rounded-full bg-primary/10 w-12 h-12 flex items-center justify-center mb-4">
                  <Heart className="h-6 w-6 text-primary" />
                </div>
                <h3 className="text-xl font-semibold mb-2">Personalized Matching</h3>
                <p className="text-muted-foreground">
                  Take our comprehensive quiz to find pets that match your lifestyle, living situation, and preferences.
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="pt-6">
                <div className="rounded-full bg-primary/10 w-12 h-12 flex items-center justify-center mb-4">
                  <Search className="h-6 w-6 text-primary" />
                </div>
                <h3 className="text-xl font-semibold mb-2">Smart Search</h3>
                <p className="text-muted-foreground">
                  Browse pets from multiple shelters with advanced filters to find your perfect companion.
                </p>
              </CardContent>
            </Card>

            <Card>
              <CardContent className="pt-6">
                <div className="rounded-full bg-primary/10 w-12 h-12 flex items-center justify-center mb-4">
                  <Newspaper className="h-6 w-6 text-primary" />
                </div>
                <h3 className="text-xl font-semibold mb-2">Expert Resources</h3>
                <p className="text-muted-foreground">
                  Access our library of articles and guides about pet care, training, and adoption.
                </p>
              </CardContent>
            </Card>
          </div>
        </div>
      </section>

      {/* Recent Adoptables Section */}
      <section className="py-16 bg-secondary/50">
        <div className="container mx-auto px-4">
          <div className="flex justify-between items-center mb-8">
            <h2 className="text-3xl font-bold">Recent Adoptables</h2>
            <Button variant="outline" onClick={() => navigate('/pets')}>
              View All <ArrowRight className="ml-2 h-4 w-4" />
            </Button>
          </div>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
            {/* We'll fetch and display recent pets here later */}
            {[1, 2, 3].map((i) => (
              <Card key={i} className="relative group cursor-pointer" onClick={() => navigate('/pets')}>
                <CardContent className="p-0">
                  <div className="aspect-square bg-muted flex items-center justify-center">
                    <PawPrint className="h-12 w-12 text-muted-foreground" />
                  </div>
                  <div className="p-4">
                    <h3 className="font-semibold mb-1">Coming Soon</h3>
                    <p className="text-sm text-muted-foreground">Check back for new pets</p>
                  </div>
                </CardContent>
              </Card>
            ))}
          </div>
        </div>
      </section>

      {/* CTA Section */}
      <section className="py-20 bg-primary text-primary-foreground">
        <div className="container mx-auto px-4 text-center">
          <h2 className="text-3xl md:text-4xl font-bold mb-4">
            Ready to Meet Your New Best Friend?
          </h2>
          <p className="text-xl mb-8 text-primary-foreground/90">
            Start your journey today and find the perfect pet companion.
          </p>
          <Button 
            size="lg" 
            variant="secondary"
            onClick={() => navigate('/quiz')}
          >
            Take the Quiz Now
            <ArrowRight className="ml-2 h-4 w-4" />
          </Button>
        </div>
      </section>
    </div>
  );
}

export default HomePage;

```


### File: ./src/pages/AdoptionFormPage.tsx
```
import { useState } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import api from '@/lib/axios';

const adoptionFormSchema = z.object({
  reason: z.string().min(50, 'Please provide a detailed reason for wanting to adopt this pet'),
  experience: z.string().min(20, 'Please describe your pet care experience'),
  living_situation: z.string().min(20, 'Please describe your living situation'),
  has_other_pets: z.boolean().optional(),
  other_pets_details: z.string().optional(),
  daily_schedule: z.string().min(20, 'Please describe your daily schedule'),
  veterinarian: z.string().optional(),
});

type AdoptionFormData = z.infer<typeof adoptionFormSchema>;

export default function AdoptionFormPage() {
  const { id } = useParams();
  const navigate = useNavigate();
  const { toast } = useToast();
  const [isSubmitting, setIsSubmitting] = useState(false);

  const form = useForm<AdoptionFormData>({
    resolver: zodResolver(adoptionFormSchema),
    defaultValues: {
      reason: '',
      experience: '',
      living_situation: '',
      has_other_pets: false,
      other_pets_details: '',
      daily_schedule: '',
      veterinarian: '',
    },
  });

  const onSubmit = async (data: AdoptionFormData) => {
    try {
      setIsSubmitting(true);
      const response = await api.post(`/adoptions`, {
        pet_id: id,
        ...data,
      });

      toast({
        title: "Application Submitted",
        description: "Your adoption application has been received. We'll be in touch soon!",
      });

      navigate('/profile/applications');
    } catch (error: any) {
      toast({
        variant: "destructive",
        title: "Error",
        description: error.response?.data?.error || "Failed to submit application",
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="container max-w-2xl mx-auto p-4">
      <Card>
        <CardHeader>
          <CardTitle>Adoption Application</CardTitle>
          <CardDescription>
            Please fill out this form to begin the adoption process
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <FormField
                control={form.control}
                name="reason"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Why do you want to adopt this pet?</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Tell us why you think you'd be a great match..."
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="experience"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Pet Care Experience</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Describe your experience with pets..."
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="living_situation"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Living Situation</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Describe your home and living environment..."
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="daily_schedule"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Daily Schedule</FormLabel>
                    <FormControl>
                      <Textarea
                        placeholder="Describe your typical daily schedule..."
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="veterinarian"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Veterinarian (Optional)</FormLabel>
                    <FormControl>
                      <Input
                        placeholder="Name and contact of your veterinarian..."
                        {...field}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="flex gap-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => navigate(-1)}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  disabled={isSubmitting}
                  className="flex-1"
                >
                  {isSubmitting ? 'Submitting...' : 'Submit Application'}
                </Button>
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  );
}

```


### File: ./src/pages/SheltersPage.tsx
```
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { Search, MapPin, Phone, Mail, Building2, PawPrint } from 'lucide-react';
import api from '@/lib/axios';

interface Shelter {
  shelter_id: number;
  name: string;
  address: string;
  phone: string;
  email: string;
  is_no_kill: boolean;
  total_pets: number;
  active_applications: number;
}

export default function SheltersPage() {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [shelters, setShelters] = useState<Shelter[]>([]);
  const [loading, setLoading] = useState(true);
  const [searchTerm, setSearchTerm] = useState('');

  useEffect(() => {
    fetchShelters();
  }, []);


  const fetchShelters = async () => {
    try {
      setLoading(true);
      console.log('Fetching shelters with search term:', searchTerm);
      
      // Note: Now we just use '/shelters' instead of '/api/shelters'
      const response = await api.get('/shelters', {
        params: {
          search: searchTerm || undefined
        }
      });
      
      console.log('Shelter API response:', response);

      if (response.data.success) {
        setShelters(response.data.data);
      } else {
        throw new Error(response.data.error || 'Failed to fetch shelters');
      }
    } catch (error: any) {
      console.error('Error fetching shelters:', error);
      console.error('Full error details:', {
        message: error.message,
        response: error.response?.data,
        status: error.response?.status,
        config: error.config
      });
      
      toast({
        variant: "destructive",
        title: "Error",
        description: error.response?.data?.error || error.message || "Failed to load shelters",
      });
    } finally {
      setLoading(false);
    }
  };

  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    fetchShelters();
  };

  return (
    <div className="container mx-auto p-4">
      <div className="mb-8">
        <h1 className="text-3xl font-bold mb-2">Animal Shelters</h1>
        <p className="text-muted-foreground">
          Find local shelters and rescue organizations
        </p>
      </div>

      {/* Search */}
      <form onSubmit={handleSearch} className="mb-8">
        <div className="relative max-w-xl">
          <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
          <Input
            placeholder="Search shelters by name or location..."
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="pl-9"
          />
        </div>
      </form>

      {loading ? (
        <div className="flex justify-center items-center min-h-[400px]">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
        </div>
      ) : shelters.length === 0 ? (
        <Card>
          <CardContent className="flex flex-col items-center justify-center py-12">
            <Building2 className="h-12 w-12 text-muted-foreground mb-4" />
            <h3 className="text-lg font-semibold mb-2">No Shelters Found</h3>
            <p className="text-muted-foreground text-center">
              Try adjusting your search terms
            </p>
          </CardContent>
        </Card>
      ) : (
        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
          {shelters.map((shelter) => (
            <Card 
              key={shelter.shelter_id}
              className="group hover:shadow-lg transition-shadow cursor-pointer"
              onClick={() => navigate(`/shelters/${shelter.shelter_id}`)}
            >
              <CardHeader>
                <CardTitle className="flex items-center justify-between">
                  <span>{shelter.name}</span>
                  {shelter.is_no_kill && (
                    <Badge variant="success" className="whitespace-nowrap">
                      No-Kill Shelter
                    </Badge>
                  )}
                </CardTitle>
                <CardDescription>
                  <div className="flex items-center text-sm">
                    <MapPin className="h-4 w-4 mr-1" />
                    {shelter.address}
                  </div>
                </CardDescription>
              </CardHeader>
              <CardContent>
                <div className="space-y-4">
                  <div className="grid grid-cols-2 gap-4">
                    <div className="text-sm space-y-1">
                      <div className="flex items-center text-muted-foreground">
                        <Phone className="h-4 w-4 mr-1" />
                        {shelter.phone}
                      </div>
                      <div className="flex items-center text-muted-foreground">
                        <Mail className="h-4 w-4 mr-1" />
                        {shelter.email}
                      </div>
                    </div>
                    <div className="text-right">
                      <div className="flex items-center justify-end text-sm text-muted-foreground mb-1">
                        <PawPrint className="h-4 w-4 mr-1" />
                        {shelter.total_pets} pets
                      </div>
                    </div>
                  </div>
                  <Button className="w-full opacity-0 group-hover:opacity-100 transition-opacity">
                    View Details
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
}

```


### File: ./src/pages/QuizResultsPage.tsx
```
import { useEffect, useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { PawPrint, Heart, ArrowRight } from 'lucide-react';

interface Pet {
  pet_id: number;
  name: string;
  species: string;
  breed: string;
  age: number;
  gender: string;
  description: string;
  shelter_name: string;
  traits: {
    [category: string]: string[];
  };
  images?: Array<{
    image_id: number;
    url: string;
    is_primary: boolean;
  }>;
  match_score?: number;
}

interface QuizResults {
  recommended_species: string;
  trait_preferences?: Array<{ trait: string; value: string }>;
  recommended_traits?: string[];
  matching_pets: Pet[];
  confidence_score: number;
}

function QuizResultsPage() {
  const location = useLocation();
  const navigate = useNavigate();
  const [results, setResults] = useState<QuizResults | null>(null);

  useEffect(() => {
    if (!location.state?.results) {
      navigate('/quiz');
      return;
    }

    // Transform the data if needed
    const rawResults = location.state.results;
    const transformedResults = {
      ...rawResults,
      // Convert trait_preferences to recommended_traits if needed
      recommended_traits: rawResults.recommended_traits || 
        rawResults.trait_preferences?.map(t => t.trait) ||
        []
    };
    
    setResults(transformedResults);
  }, [location.state, navigate]);

  // Show loading state while results are being set
  if (!results) {
    return (
      <div className="container max-w-4xl mx-auto p-4">
        <Card>
          <CardContent className="p-6 text-center">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto"></div>
            <p className="mt-4">Loading your results...</p>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="container max-w-4xl mx-auto p-4">
      <div className="mb-8 text-center">
        <h1 className="text-3xl font-bold mb-2">Your Perfect Pet Match Results</h1>
        <p className="text-muted-foreground">
          Based on your responses, we've found some great matches for you!
        </p>
      </div>

      <div className="grid gap-6 mb-8">
        <Card>
          <CardHeader>
            <CardTitle>Match Summary</CardTitle>
            <CardDescription>
              Our algorithm is {results.confidence_score}% confident in these recommendations
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="grid gap-4">
              <div>
                <h3 className="font-medium mb-2">Recommended Pet Type</h3>
                <Badge variant="secondary" className="text-lg">
                  <PawPrint className="mr-2 h-4 w-4" />
                  {results.recommended_species}
                </Badge>
              </div>
              
              {(results.recommended_traits?.length || results.trait_preferences?.length) > 0 && (
                <div>
                  <h3 className="font-medium mb-2">Key Traits That Match You</h3>
                  <div className="flex flex-wrap gap-2">
                    {results.recommended_traits?.map((trait) => (
                      <Badge key={trait} variant="outline">
                        {trait}
                      </Badge>
                    )) || 
                    results.trait_preferences?.map((trait) => (
                      <Badge key={trait.trait} variant="outline">
                        {trait.trait}
                      </Badge>
                    ))}
                  </div>
                </div>
              )}
            </div>
          </CardContent>
        </Card>

            {results.matching_pets?.length > 0 && (
                <Card>
                    <CardHeader>
                        <CardTitle>Your Top Matches</CardTitle>
                        <CardDescription>
                            These pets match your lifestyle and preferences
                        </CardDescription>
                    </CardHeader>
                    <CardContent>
                        <div className="grid gap-6 md:grid-cols-2">
                            {results.matching_pets.map((pet) => (
                                <Card key={pet.pet_id} className="overflow-hidden">
                                    <div className="aspect-square relative">
                                        {pet.images && pet.images.length > 0 ? (
                                            <img
                                                src={pet.images[0].url}
                                                alt={pet.name}
                                                className="object-cover w-full h-full"
                                            />
                                        ) : (
                                            <div className="w-full h-full flex items-center justify-center bg-muted">
                                                <PawPrint className="h-12 w-12 text-muted-foreground" />
                                            </div>
                                        )}
                                        {pet.match_score && (
                                            <Badge 
                                                className="absolute top-2 right-2"
                                                variant="secondary"
                                            >
                                                {pet.match_score}% Match
                                            </Badge>
                                        )}
                                    </div>
                                    <CardContent className="p-4">
                                        <div className="flex justify-between items-start mb-2">
                                            <div>
                                                <h3 className="font-semibold text-lg">{pet.name}</h3>
                                                <p className="text-sm text-muted-foreground">
                                                    {pet.breed} • {pet.age} years old
                                                </p>
                                            </div>
                                        </div>
                                        
                                        <p className="text-sm mb-4">{pet.description}</p>
                                        
                                        {pet.traits && Object.keys(pet.traits).length > 0 && (
                                            <div className="flex flex-wrap gap-2 mb-4">
                                                {Object.entries(pet.traits).map(([category, traits]) => (
                                                    traits.map((trait) => (
                                                        <Badge 
                                                            key={`${category}-${trait}`}
                                                            variant="outline"
                                                        >
                                                            {trait}
                                                        </Badge>
                                                    ))
                                                ))}
                                            </div>
                                        )}
                                        
                                        <p className="text-sm text-muted-foreground mb-4">
                                            Available at {pet.shelter_name}
                                        </p>
                                        
                                        <Button 
                                            className="w-full"
                                            onClick={() => navigate(`/pets/${pet.pet_id}`)}
                                        >
                                            <Heart className="mr-2 h-4 w-4" />
                                            Meet {pet.name}
                                        </Button>
                                    </CardContent>
                                </Card>
                            ))}
                        </div>
                    </CardContent>
                </Card>
            )}
      </div>

      <div className="flex justify-center gap-4">
        <Button variant="outline" onClick={() => navigate('/pets')}>
          Browse All Pets
        </Button>
        <Button onClick={() => navigate('/quiz')}>
          Retake Quiz
          <ArrowRight className="ml-2 h-4 w-4" />
        </Button>
      </div>
    </div>
  );
}

export default QuizResultsPage;

```


### File: ./src/pages/PetDetailPage.tsx
```
import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { ChevronLeft, Heart, MapPin, Phone, Mail, Calendar, Info, PawPrint, ChevronRight } from 'lucide-react';
import { Button } from '@/components/ui/button';
import { Card, CardContent } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { useAuth } from '@/contexts/AuthContext';
import { useToast } from '@/hooks/use-toast';
import { Pet } from '@/types/api';
import api from '@/lib/axios';

function PetDetailPage() {
    const { id } = useParams();
    const navigate = useNavigate();
    const { isAuthenticated } = useAuth();
    const { toast } = useToast();
    const [pet, setPet] = useState<Pet | null>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [isFavorited, setIsFavorited] = useState(false);
    const [isToggling, setIsToggling] = useState(false);
    const [currentImageIndex, setCurrentImageIndex] = useState(0);  // Add this line

    useEffect(() => {
        const fetchPet = async () => {
            try {
                setIsLoading(true);
                const response = await api.get(`/pets/${id}`);
                if (response.data.success) {
                    setPet(response.data.data);
                    setCurrentImageIndex(0); // Reset image index when pet data changes
                    
                    if (isAuthenticated) {
                        const favResponse = await api.get(`/pets/${id}/favorite`);
                        setIsFavorited(favResponse.data.data.is_favorited);
                    }
                } else {
                    throw new Error(response.data.error || 'Failed to load pet details');
                }
            } catch (err: any) {
                const errorMsg = err.response?.data?.error || err.message || 'Failed to load pet details';
                setError(errorMsg);
                toast({
                    variant: "destructive",
                    title: "Error",
                    description: errorMsg,
                });
            } finally {
                setIsLoading(false);
            }
        };

        fetchPet();
    }, [id, isAuthenticated, toast]);

    const navigateImage = (direction: 'next' | 'prev') => {
        if (!pet?.images?.length) return;
        
        setCurrentImageIndex(prev => {
            if (direction === 'next') {
                return prev === pet.images!.length - 1 ? 0 : prev + 1;
            } else {
                return prev === 0 ? pet.images!.length - 1 : prev - 1;
            }
        });
    };

    const handleFavoriteToggle = async () => {
        if (!isAuthenticated) {
            navigate('/login', { state: { from: `/pets/${id}` } });
            return;
        }

        try {
            setIsToggling(true);
            if (isFavorited) {
                await api.delete(`/pets/${id}/favorite`);
                toast({
                    title: "Removed from favorites",
                    description: "Pet has been removed from your favorites",
                });
            } else {
                await api.post(`/pets/${id}/favorite`);
                toast({
                    title: "Added to favorites",
                    description: "Pet has been added to your favorites",
                });
            }
            setIsFavorited(!isFavorited);
        } catch (err) {
            toast({
                variant: "destructive",
                title: "Error",
                description: "Failed to update favorites",
            });
        } finally {
            setIsToggling(false);
        }
    };

    const handleAdopt = () => {
        if (!isAuthenticated) {
            navigate('/login', { state: { from: `/pets/${id}` } });
            return;
        }
        navigate(`/adopt/${id}`);
    };

    if (isLoading) {
        return (
            <div className="container max-w-4xl mx-auto p-4">
                <div className="h-96 flex items-center justify-center">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
                </div>
            </div>
        );
    }

    if (error || !pet) {
        return (
            <div className="container max-w-4xl mx-auto p-4">
                <Card>
                    <CardContent className="p-6">
                        <h2 className="text-lg font-semibold mb-2">Error</h2>
                        <p className="text-muted-foreground">{error || 'Pet not found'}</p>
                        <Button
                            className="mt-4"
                            variant="outline"
                            onClick={() => navigate('/pets')}
                        >
                            <ChevronLeft className="mr-2 h-4 w-4" />
                            Back to Pets
                        </Button>
                    </CardContent>
                </Card>
            </div>
        );
    }

    return (
        <div className="container max-w-4xl mx-auto p-4">
      <Button
        variant="ghost"
        className="mb-4"
        onClick={() => navigate('/pets')}
      >
        <ChevronLeft className="mr-2 h-4 w-4" />
        Back to Pets
      </Button>

      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
      {/* Image Gallery */}
      <div className="space-y-4">
          <div className="aspect-square relative bg-muted rounded-lg overflow-hidden">
              {pet.images && pet.images.length > 0 ? (
                  <>
                      <img
                          src={pet.images[currentImageIndex].url}
                          alt={`${pet.name} - ${pet.breed}`}
                          className="w-full h-full object-contain"  // Changed from object-cover
                          style={{
                              backgroundColor: 'white',  // Add white background
                              maxHeight: '600px'        // Limit maximum height
                          }}
                      />
                      {pet.images.length > 1 && (
                          <>
                              <Button
                                  variant="secondary"
                                  size="icon"
                                  className="absolute left-2 top-1/2 -translate-y-1/2"
                                  onClick={() => navigateImage('prev')}
                              >
                                  <ChevronLeft className="h-4 w-4" />
                              </Button>
                              <Button
                                  variant="secondary"
                                  size="icon"
                                  className="absolute right-2 top-1/2 -translate-y-1/2"
                                  onClick={() => navigateImage('next')}
                              >
                                  <ChevronRight className="h-4 w-4" />
                              </Button>
                          </>
                      )}
                  </>
              ) : (
                  <div className="w-full h-full flex items-center justify-center">
                      <PawPrint className="h-12 w-12 text-muted-foreground" />
                  </div>
              )}
          </div>

                  {/* Thumbnail Grid */}
                  {pet.images && pet.images.length > 1 && (
                      <div className="grid grid-cols-4 gap-2">
                          {pet.images.map((image, index) => (
                              <button
                                  key={image.image_id}
                                  className={`aspect-square rounded-md overflow-hidden border-2 
                                      ${currentImageIndex === index ? 'border-primary' : 'border-transparent'}`}
                                  onClick={() => setCurrentImageIndex(index)}
                              >
                                  <img
                                      src={image.url}
                                      alt={`${pet.name} ${index + 1}`}
                                      className="w-full h-full object-contain bg-white"
                                  />
                              </button>
                          ))}
                      </div>
                  )}
                </div>
        {/* Pet Details */}
        <div className="space-y-6">
          <div>
            <h1 className="text-3xl font-bold mb-2">{pet.name}</h1>
            <div className="flex flex-wrap gap-2 mb-4">
              <Badge variant="secondary">{pet.species}</Badge>
              <Badge variant="secondary">{pet.breed}</Badge>
              <Badge variant="secondary">{pet.gender}</Badge>
              <Badge variant="secondary">{pet.age} years old</Badge>
            </div>
            <p className="text-muted-foreground">{pet.description}</p>
          </div>

          {/* Traits */}
          {pet.traits && Object.keys(pet.traits).length > 0 && (
            <div>
              <h2 className="text-xl font-semibold mb-3">Characteristics</h2>
              {Object.entries(pet.traits).map(([category, traits]) => (
                <div key={category} className="mb-4">
                  <h3 className="text-sm font-medium text-muted-foreground mb-2">
                    {category}:
                  </h3>
                  <div className="flex flex-wrap gap-2">
                    {traits.map((trait) => (
                      <Badge key={trait} variant="outline">
                        {trait}
                      </Badge>
                    ))}
                  </div>
                </div>
              ))}
            </div>
          )}

          {/* Shelter Information */}
          <Card>
            <CardContent className="p-6">
              <h2 className="text-xl font-semibold mb-3">Available at</h2>
              <div className="space-y-2">
                <p className="flex items-center">
                  <MapPin className="mr-2 h-4 w-4" />
                  {pet.shelter_name}
                </p>
              </div>
            </CardContent>
          </Card>

          {/* Action Buttons */}
          <div className="flex gap-4">
            <Button onClick={handleAdopt} className="flex-1">
              Start Adoption Process
            </Button>
            <Button 
              variant="outline" 
              className={`w-auto ${isFavorited ? 'bg-primary text-primary-foreground' : ''}`}
              onClick={handleFavoriteToggle}
              disabled={isToggling}
            >
              <Heart className={`h-4 w-4 ${isFavorited ? 'fill-current' : ''}`} />
            </Button>
          </div>
        </div>
      </div>
    </div>
  );
}

export default PetDetailPage;

```


### File: ./src/pages/PetsPage.tsx
```
import { useState, useEffect, useCallback } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { PetFilters } from '@/components/pets/PetFilters';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Card, CardContent } from '@/components/ui/card';
import { Search, PawPrint } from 'lucide-react';
import { PetCard } from '@/components/pets/PetCard';
import api from '@/lib/axios';
import { Pet, ApiResponse, PaginatedResponse } from '@/types/api';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/AuthContext';
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from "@/components/ui/select";

interface PetFilters {
    species?: string;
    breed?: string;
    ageMin?: number;
    ageMax?: number;
    gender?: string;
    size?: string;
    goodWith?: string[];
    traits?: string[];
    sortBy?: string;
}

interface PetFiltersProps {
    onFiltersChange: (filters: PetFilters) => void;
    initialFilters?: PetFilters;
    availableTraits: string[];
}

function PetsPage() {
    const navigate = useNavigate();
    const [searchParams, setSearchParams] = useSearchParams();
    const [pets, setPets] = useState<Pet[]>([]);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);
    const [searchTerm, setSearchTerm] = useState(searchParams.get('search') || '');
    const [filters, setFilters] = useState<PetFilters>({});
    const [availableTraits, setAvailableTraits] = useState<string[]>([]);
    const [totalPages, setTotalPages] = useState(1);
    const { toast } = useToast();
    const { isAuthenticated } = useAuth();

    const currentPage = parseInt(searchParams.get('page') || '1', 10);
    const perPage = 12;

    const updateUrlParams = useCallback((page: number, search: string, currentFilters: PetFilters) => {
        const newParams = new URLSearchParams(searchParams);
        
        if (page > 1) newParams.set('page', page.toString());
        else newParams.delete('page');
        
        if (search) newParams.set('search', search);
        else newParams.delete('search');
        
        Object.entries(currentFilters).forEach(([key, value]) => {
            if (value !== undefined && value !== null && value !== '') {
                if (Array.isArray(value)) {
                    newParams.delete(key);
                    value.forEach(v => newParams.append(key, v));
                } else {
                    newParams.set(key, value.toString());
                }
            } else {
                newParams.delete(key);
            }
        });

        setSearchParams(newParams);
    }, [setSearchParams, searchParams]);

    // Effect for authentication check
    useEffect(() => {
        if (!isAuthenticated) {
            navigate('/login', { state: { from: '/pets' } });
        }
    }, [isAuthenticated, navigate]);

    // Effect for fetching pets
    useEffect(() => {
        if (isAuthenticated) {
            fetchPets();
        }
    }, [currentPage, searchTerm, filters, isAuthenticated]);

    const fetchPets = async () => {
        try {
            setLoading(true);
            const response = await api.get<ApiResponse<PaginatedResponse<Pet>>>('/pets', { 
                params: {
                    page: currentPage,
                    perPage,
                    offset: (currentPage - 1) * perPage,
                    search: searchTerm,
                    sortBy: filters.sortBy || 'newest',
                    ...filters
                }
            });

            if (response.data.success) {
                setPets(response.data.data.items);
                const newTotalPages = Math.ceil(response.data.data.total / perPage);
                setTotalPages(newTotalPages);
                
                if (currentPage > newTotalPages && newTotalPages > 0) {
                    updateUrlParams(1, searchTerm, filters);
                }
            } else {
                throw new Error(response.data.error || 'Failed to fetch pets');
            }
        } catch (err: any) {
            const errorMessage = err.response?.data?.error || err.message || 'Failed to fetch pets';
            setError(errorMessage);
            toast({
                variant: "destructive",
                title: "Error",
                description: errorMessage,
            });
        } finally {
            setLoading(false);
        }
    };

    const handleSearch = (event: React.FormEvent) => {
        event.preventDefault();
        updateUrlParams(1, searchTerm, filters);
    };

    const handleFilterChange = (newFilters: PetFilters) => {
        setFilters(newFilters);
        updateUrlParams(1, searchTerm, newFilters);
    };

    const handleSortChange = (value: string) => {
        const newFilters = { ...filters, sortBy: value };
        setFilters(newFilters);
        updateUrlParams(1, searchTerm, newFilters);
    };

    const handlePageChange = (page: number) => {
        updateUrlParams(page, searchTerm, filters);
    };

    // Pagination Controls Component
    const PaginationControls = () => {
        const maxVisiblePages = 5;
        let startPage = Math.max(1, currentPage - Math.floor(maxVisiblePages / 2));
        let endPage = Math.min(totalPages, startPage + maxVisiblePages - 1);

        if (endPage - startPage + 1 < maxVisiblePages) {
            startPage = Math.max(1, endPage - maxVisiblePages + 1);
        }

        return (
            <div className="flex gap-2">
                <Button
                    variant="outline"
                    onClick={() => handlePageChange(currentPage - 1)}
                    disabled={currentPage === 1 || loading}
                >
                    Previous
                </Button>
                
                {startPage > 1 && (
                    <>
                        <Button
                            variant="outline"
                            onClick={() => handlePageChange(1)}
                            className="hidden sm:inline-flex"
                        >
                            1
                        </Button>
                        {startPage > 2 && <span className="px-2">...</span>}
                    </>
                )}

                {Array.from(
                    { length: endPage - startPage + 1 },
                    (_, i) => startPage + i
                ).map((page) => (
                    <Button
                        key={page}
                        variant={currentPage === page ? "default" : "outline"}
                        onClick={() => handlePageChange(page)}
                        className="hidden sm:inline-flex"
                    >
                        {page}
                    </Button>
                ))}

                {endPage < totalPages && (
                    <>
                        {endPage < totalPages - 1 && <span className="px-2">...</span>}
                        <Button
                            variant="outline"
                            onClick={() => handlePageChange(totalPages)}
                            className="hidden sm:inline-flex"
                        >
                            {totalPages}
                        </Button>
                    </>
                )}

                <div className="flex items-center px-4 sm:hidden">
                    Page {currentPage} of {totalPages}
                </div>
                
                <Button
                    variant="outline"
                    onClick={() => handlePageChange(currentPage + 1)}
                    disabled={currentPage === totalPages || loading}
                >
                    Next
                </Button>
            </div>
        );
    };

    if (loading) {
        return (
            <div className="container max-w-4xl mx-auto p-4">
                <div className="flex justify-center items-center min-h-[400px]">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
                </div>
            </div>
        );
    }

    return (
        <div className="container mx-auto p-4">
            <div className="mb-8 space-y-4">
                <div>
                    <h1 className="text-3xl font-bold mb-2">Find Your Perfect Companion</h1>
                    <p className="text-muted-foreground">
                        Browse available pets or use filters to narrow your search
                    </p>
                </div>

                <div className="flex flex-col sm:flex-row gap-4">
                    <form onSubmit={handleSearch} className="flex-1">
                        <div className="relative">
                            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                            <Input
                                placeholder="Search by name, breed, or description..."
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                                className="pl-9"
                            />
                        </div>
                    </form>
                    <div className="flex gap-2">
                        <Select
                            value={filters.sortBy || 'newest'}
                            onValueChange={handleSortChange}
                        >
                            <SelectTrigger className="w-[180px]">
                                <SelectValue placeholder="Sort by" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="newest">Newest First</SelectItem>
                                <SelectItem value="oldest">Oldest First</SelectItem>
                                <SelectItem value="name_asc">Name (A-Z)</SelectItem>
                                <SelectItem value="name_desc">Name (Z-A)</SelectItem>
                            </SelectContent>
                        </Select>
                        <PetFilters
                            onFiltersChange={handleFilterChange}
                            initialFilters={filters}
                            availableTraits={availableTraits}
                        />
                    </div>
                </div>
            </div>

            {error && (
                <Card className="mb-8">
                    <CardContent className="p-6">
                        <p className="text-red-500">{error}</p>
                    </CardContent>
                </Card>
            )}

            {pets.length === 0 ? (
                <Card>
                    <CardContent className="p-6 text-center">
                        <PawPrint className="h-12 w-12 mx-auto mb-4 text-muted-foreground" />
                        <h3 className="text-lg font-semibold mb-2">No Pets Found</h3>
                        <p className="text-muted-foreground">
                            Try adjusting your filters or search terms
                        </p>
                    </CardContent>
                </Card>
            ) : (
                <>
                    <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                        {pets.map((pet) => (
                            <PetCard
                                key={pet.pet_id}
                                pet={pet}
                                onClick={() => navigate(`/pets/${pet.pet_id}`)}
                            />
                        ))}
                    </div>

                    <div className="mt-6 flex justify-center">
                        <PaginationControls />
                    </div>
                </>
            )}
        </div>
    );
}

export default PetsPage;

```


### File: ./src/pages/shelter/NewPetPage.tsx
```
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import { z } from 'zod';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { PetImageUploader } from '@/components/pets/PetImageUploader';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage
} from '@/components/ui/form';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import api from '@/lib/axios';
import { ChevronLeft } from 'lucide-react';

const petFormSchema = z.object({
  name: z.string().min(1, 'Pet name is required'),
  species: z.string().min(1, 'Species is required'),
  breed: z.string().optional(),
  age: z.coerce.number().min(0, 'Age must be 0 or greater').optional(),
  gender: z.enum(['male', 'female']),
  description: z.string().min(10, 'Please provide a detailed description'),
});

type PetFormData = z.infer<typeof petFormSchema>;

export default function NewPetPage() {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [images, setImages] = useState<File[]>([]);
  const navigate = useNavigate();
  const { toast } = useToast();

  const form = useForm<PetFormData>({
    resolver: zodResolver(petFormSchema),
    defaultValues: {
      name: '',
      species: '',
      breed: '',
      description: '',
    },
  });

  const onSubmit = async (data: PetFormData) => {
    try {
      setIsSubmitting(true);
      const formData = new FormData();

      // Add all pet data to FormData
      Object.entries(data).forEach(([key, value]) => {
        if (value !== undefined) {
          formData.append(key, value.toString());
        }
      });

      // Add images to FormData
      images.forEach((image) => {
        formData.append('images[]', image);
      });

      const response = await api.post('/pets', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      if (response.data.success) {
        toast({
          title: "Success",
          description: "Pet added successfully",
        });
        navigate('/shelter/pets');
      }
    } catch (error: any) {
      toast({
        variant: "destructive",
        title: "Error",
        description: error.response?.data?.error || 'Failed to add pet',
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="container max-w-2xl mx-auto p-4">
      <Button
        variant="ghost"
        className="mb-4"
        onClick={() => navigate('/shelter/pets')}
      >
        <ChevronLeft className="mr-2 h-4 w-4" />
        Back to Pets
      </Button>

      <Card>
        <CardHeader>
          <CardTitle>Add New Pet</CardTitle>
          <CardDescription>
            Enter the details of the pet available for adoption
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Pet Name</FormLabel>
                    <FormControl>
                      <Input {...field} placeholder="Enter pet name" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="species"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Species</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select species" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="dog">Dog</SelectItem>
                        <SelectItem value="cat">Cat</SelectItem>
                        <SelectItem value="bird">Bird</SelectItem>
                        <SelectItem value="rabbit">Rabbit</SelectItem>
                        <SelectItem value="other">Other</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="grid grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="breed"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Breed (Optional)</FormLabel>
                      <FormControl>
                        <Input {...field} placeholder="Enter breed" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="age"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Age (Optional)</FormLabel>
                      <FormControl>
                        <Input 
                          type="number" 
                          min="0"
                          {...field}
                          placeholder="Enter age"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name="gender"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Gender</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select gender" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="male">Male</SelectItem>
                        <SelectItem value="female">Female</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Description</FormLabel>
                    <FormControl>
                      <Textarea
                        {...field}
                        placeholder="Describe the pet's personality, history, and any special needs..."
                        className="min-h-[100px]"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="space-y-2">
                <FormLabel>Pet Images</FormLabel>
                <PetImageUploader
                  onChange={(files) => setImages(files)}
                  maxFiles={5}
                  accept="image/*"
                />
              </div>

              <div className="flex justify-end gap-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => navigate('/shelter/pets')}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  disabled={isSubmitting}
                >
                  {isSubmitting ? 'Adding Pet...' : 'Add Pet'}
                </Button>
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  );
}

```


### File: ./src/pages/shelter/NetPetPage.tsx
```
import { useNavigate } from 'react-router-dom';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { useToast } from '@/hooks/use-toast';
import { z } from 'zod';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { PetImageUploader } from '@/components/pets/PetImageUploader';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage
} from '@/components/ui/form';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import api from '@/lib/axios';
import { useState } from 'react';
import { ChevronLeft } from 'lucide-react';

const petFormSchema = z.object({
  name: z.string().min(1, 'Pet name is required'),
  species: z.string().min(1, 'Species is required'),
  breed: z.string().optional(),
  age: z.coerce.number().min(0, 'Age must be 0 or greater').optional(),
  gender: z.enum(['male', 'female']),
  description: z.string().min(10, 'Please provide a detailed description'),
});

type PetFormData = z.infer<typeof petFormSchema>;

export default function NewPetPage() {
  const [isSubmitting, setIsSubmitting] = useState(false);
  const [images, setImages] = useState<File[]>([]);
  const navigate = useNavigate();
  const { toast } = useToast();

  const form = useForm<PetFormData>({
    resolver: zodResolver(petFormSchema),
    defaultValues: {
      name: '',
      species: '',
      breed: '',
      description: '',
    },
  });

  const onSubmit = async (data: PetFormData) => {
    try {
      setIsSubmitting(true);
      const formData = new FormData();

      // Add all pet data to FormData
      Object.entries(data).forEach(([key, value]) => {
        if (value !== undefined) {
          formData.append(key, value.toString());
        }
      });

      // Add images to FormData
      images.forEach((image) => {
        formData.append('images[]', image);
      });

      const response = await api.post('/pets', formData, {
        headers: {
          'Content-Type': 'multipart/form-data',
        },
      });

      if (response.data.success) {
        toast({
          title: "Success",
          description: "Pet added successfully",
        });
        navigate('/shelter/pets');
      }
    } catch (error: any) {
      toast({
        variant: "destructive",
        title: "Error",
        description: error.response?.data?.error || 'Failed to add pet',
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  return (
    <div className="container max-w-2xl mx-auto p-4">
      <Button
        variant="ghost"
        className="mb-4"
        onClick={() => navigate('/shelter/pets')}
      >
        <ChevronLeft className="mr-2 h-4 w-4" />
        Back to Pets
      </Button>

      <Card>
        <CardHeader>
          <CardTitle>Add New Pet</CardTitle>
          <CardDescription>
            Enter the details of the pet available for adoption
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
              <FormField
                control={form.control}
                name="name"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Pet Name</FormLabel>
                    <FormControl>
                      <Input {...field} placeholder="Enter pet name" />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="species"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Species</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select species" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="dog">Dog</SelectItem>
                        <SelectItem value="cat">Cat</SelectItem>
                        <SelectItem value="bird">Bird</SelectItem>
                        <SelectItem value="rabbit">Rabbit</SelectItem>
                        <SelectItem value="other">Other</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="grid grid-cols-2 gap-4">
                <FormField
                  control={form.control}
                  name="breed"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Breed (Optional)</FormLabel>
                      <FormControl>
                        <Input {...field} placeholder="Enter breed" />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />

                <FormField
                  control={form.control}
                  name="age"
                  render={({ field }) => (
                    <FormItem>
                      <FormLabel>Age (Optional)</FormLabel>
                      <FormControl>
                        <Input 
                          type="number" 
                          min="0"
                          {...field}
                          placeholder="Enter age"
                        />
                      </FormControl>
                      <FormMessage />
                    </FormItem>
                  )}
                />
              </div>

              <FormField
                control={form.control}
                name="gender"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Gender</FormLabel>
                    <Select
                      onValueChange={field.onChange}
                      defaultValue={field.value}
                    >
                      <FormControl>
                        <SelectTrigger>
                          <SelectValue placeholder="Select gender" />
                        </SelectTrigger>
                      </FormControl>
                      <SelectContent>
                        <SelectItem value="male">Male</SelectItem>
                        <SelectItem value="female">Female</SelectItem>
                      </SelectContent>
                    </Select>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <FormField
                control={form.control}
                name="description"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Description</FormLabel>
                    <FormControl>
                      <Textarea
                        {...field}
                        placeholder="Describe the pet's personality, history, and any special needs..."
                        className="min-h-[100px]"
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />

              <div className="space-y-2">
                <FormLabel>Pet Images</FormLabel>
                <PetImageUploader
                  onChange={setImages}
                  maxFiles={5}
                  accept="image/*"
                />
              </div>

              <div className="flex justify-end gap-4">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => navigate('/shelter/pets')}
                >
                  Cancel
                </Button>
                <Button
                  type="submit"
                  disabled={isSubmitting}
                >
                  {isSubmitting ? 'Adding Pet...' : 'Add Pet'}
                </Button>
              </div>
            </form>
          </Form>
        </CardContent>
      </Card>
    </div>
  );
}

```


### File: ./src/pages/shelter/ShelterManagement.tsx
```
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { PetCard } from '@/components/pets/PetCard';
import { useToast } from '@/hooks/use-toast';
import { Search, PawPrint, Plus } from 'lucide-react';
import api from '@/lib/axios';

interface Pet {
    pet_id: number;
    name: string;
    species: string;
    breed: string;
    age: number;
    gender: string;
    description: string;
    shelter_name: string;
    application_count: number;
    images?: Array<{
        image_id: number;
        url: string;
        is_primary: boolean;
    }>;
}

export default function ShelterManagement() {
    const [pets, setPets] = useState<Pet[]>([]);
    const [loading, setLoading] = useState(true);
    const [searchTerm, setSearchTerm] = useState('');
    const navigate = useNavigate();
    const { toast } = useToast();

    useEffect(() => {
        fetchPets();
    }, []);

    const fetchPets = async () => {
        try {
            setLoading(true);
            const response = await api.get('/shelter/pets');
            if (response.data.success) {
                setPets(response.data.data);
            }
        } catch (error: any) {
            toast({
                variant: "destructive",
                title: "Error",
                description: "Failed to load pets"
            });
        } finally {
            setLoading(false);
        }
    };

    const filteredPets = pets.filter(pet =>
        pet.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        pet.breed.toLowerCase().includes(searchTerm.toLowerCase()) ||
        pet.species.toLowerCase().includes(searchTerm.toLowerCase())
    );

    if (loading) {
        return (
            <div className="flex justify-center items-center min-h-screen">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            </div>
        );
    }

    return (
        <div className="container mx-auto p-6">
            <Card>
                <CardHeader>
                    <div className="flex justify-between items-center">
                        <div>
                            <CardTitle>Manage Pets</CardTitle>
                            <CardDescription>
                                Add and manage your shelter's pets
                            </CardDescription>
                        </div>
                        <Button onClick={() => navigate('/shelter/pets/new')}>
                            <Plus className="mr-2 h-4 w-4" />
                            Add New Pet
                        </Button>
                    </div>
                </CardHeader>
                <CardContent>
                    <div className="mb-6">
                        <div className="relative">
                            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                            <Input
                                placeholder="Search pets..."
                                value={searchTerm}
                                onChange={(e) => setSearchTerm(e.target.value)}
                                className="pl-9"
                            />
                        </div>
                    </div>

                    {filteredPets.length === 0 ? (
                        <div className="text-center py-12">
                            <PawPrint className="mx-auto h-12 w-12 text-muted-foreground" />
                            <h3 className="mt-4 text-lg font-semibold">No Pets Found</h3>
                            <p className="text-muted-foreground">
                                {pets.length === 0
                                    ? "Start by adding your first pet"
                                    : "No pets match your search"}
                            </p>
                        </div>
                    ) : (
                        <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                            {filteredPets.map((pet) => (
                                <div key={pet.pet_id} className="relative group">
                                    <PetCard
                                        pet={pet}
                                        onClick={() => navigate(`/pets/${pet.pet_id}`)}
                                    />
                                    <div className="absolute top-2 right-2 space-x-2 opacity-0 group-hover:opacity-100 transition-opacity">
                                        <Button
                                            variant="secondary"
                                            size="sm"
                                            onClick={(e) => {
                                                e.stopPropagation();
                                                navigate(`/shelter/pets/${pet.pet_id}/edit`);
                                            }}
                                        >
                                            Edit
                                        </Button>
                                        {pet.application_count > 0 && (
                                            <Button
                                                variant="outline"
                                                size="sm"
                                                onClick={(e) => {
                                                    e.stopPropagation();
                                                    navigate(`/shelter/pets/${pet.pet_id}/applications`);
                                                }}
                                            >
                                                {pet.application_count} Applications
                                            </Button>
                                        )}
                                    </div>
                                </div>
                            ))}
                        </div>
                    )}
                </CardContent>
            </Card>
        </div>
    );
}

```


### File: ./src/pages/shelter/ShelterDashboard.tsx
```
import { useEffect, useState } from 'react';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Link } from 'react-router-dom';
import { PawPrint, FileText, Users, Plus } from 'lucide-react';
import api from '@/lib/axios';

interface ShelterStats {
  totalPets: number;
  activeApplications: number;
  adoptedPets: number;
}

export default function ShelterDashboard() {
  const [stats, setStats] = useState<ShelterStats>({
    totalPets: 0,
    activeApplications: 0,
    adoptedPets: 0
  });

  const [loading, setLoading] = useState(true);

  useEffect(() => {
    const fetchStats = async () => {
      try {
        const response = await api.get('/shelter/stats');
        setStats(response.data.data);
      } catch (error) {
        console.error('Failed to fetch shelter stats:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchStats();
  }, []);

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6">
      <div className="space-y-4">
        <div className="flex justify-between items-center">
          <div>
            <h2 className="text-3xl font-bold tracking-tight">Shelter Dashboard</h2>
            <p className="text-muted-foreground">
              Manage your shelter's pets and adoption applications
            </p>
          </div>
          <Button asChild>
            <Link to="/shelter/pets/new">
              <Plus className="mr-2 h-4 w-4" />
              Add New Pet
            </Link>
          </Button>
        </div>

        <div className="grid gap-4 md:grid-cols-3">
          <Card>
            <CardHeader>
              <CardTitle>Available Pets</CardTitle>
              <div className="text-3xl font-bold">{stats.totalPets}</div>
            </CardHeader>
            <CardContent>
              <Button asChild variant="link" className="p-0">
                <Link to="/shelter/pets">View All Pets</Link>
              </Button>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Active Applications</CardTitle>
              <div className="text-3xl font-bold">{stats.activeApplications}</div>
            </CardHeader>
            <CardContent>
              <Button asChild variant="link" className="p-0">
                <Link to="/shelter/applications">View Applications</Link>
              </Button>
            </CardContent>
          </Card>

          <Card>
            <CardHeader>
              <CardTitle>Successful Adoptions</CardTitle>
              <div className="text-3xl font-bold">{stats.adoptedPets}</div>
            </CardHeader>
            <CardContent>
              <Button asChild variant="link" className="p-0">
                <Link to="/shelter/adoptions">View History</Link>
              </Button>
            </CardContent>
          </Card>
        </div>

        {/* Recent Applications */}
        <Card className="mt-6">
          <CardHeader>
            <CardTitle>Recent Applications</CardTitle>
            <CardDescription>
              Latest adoption applications requiring attention
            </CardDescription>
          </CardHeader>
          <CardContent>
            {/* Add recent applications table/list here */}
          </CardContent>
        </Card>

        {/* Featured Pets */}
        <Card className="mt-6">
          <CardHeader>
            <CardTitle>Featured Pets</CardTitle>
            <CardDescription>
              Pets that have been listed the longest
            </CardDescription>
          </CardHeader>
          <CardContent>
            {/* Add featured pets grid here */}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

```


### File: ./src/pages/QuizPage.tsx
```
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Progress } from '@/components/ui/progress';
import { RadioGroup, RadioGroupItem } from '@/components/ui/radio-group';
import { Label } from '@/components/ui/label';
import { ChevronLeft, ChevronRight } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import api from '@/lib/axios';

// Quiz sections and questions
const quizData = {
  sections: [
    {
      id: 'living_situation',
      title: 'Living Situation',
      questions: [
        {
          id: 'living_space',
          text: 'What type of home do you live in?',
          options: [
            { id: 'apartment_small', label: 'Small Apartment' },
            { id: 'apartment_large', label: 'Large Apartment' },
            { id: 'house_small', label: 'Small House' },
            { id: 'house_large', label: 'Large House with Yard' }
          ]
        },
        {
          id: 'outdoor_access',
          text: 'Do you have access to outdoor space?',
          options: [
            { id: 'private_yard', label: 'Private Yard' },
            { id: 'shared_yard', label: 'Shared Yard/Garden' },
            { id: 'nearby_park', label: 'Nearby Park' },
            { id: 'no_outdoor', label: 'Limited Outdoor Access' }
          ]
        }
      ]
    },
    {
      id: 'lifestyle',
      title: 'Your Lifestyle',
      questions: [
        {
          id: 'activity_level',
          text: 'How would you describe your activity level?',
          options: [
            { id: 'very_active', label: 'Very Active (Daily Exercise)' },
            { id: 'moderate', label: 'Moderately Active' },
            { id: 'somewhat', label: 'Somewhat Active' },
            { id: 'sedentary', label: 'Mostly Sedentary' }
          ]
        },
        {
          id: 'time_available',
          text: 'How much time can you dedicate to pet care daily?',
          options: [
            { id: 'very_limited', label: 'Less than 1 hour' },
            { id: 'limited', label: '1-2 hours' },
            { id: 'moderate', label: '2-4 hours' },
            { id: 'extensive', label: '4+ hours' }
          ]
        }
      ]
    }
    // Add more sections as needed
  ]
};

interface QuizResults {
  quiz_id: number;
  recommendations: {
    species: string;
    breed: string | null;
    traits: Array<{ trait: string; value: string }>;
  };
  confidence_score: number;
  matching_pets: Array<{
    pet_id: number;
    name: string;
    species: string;
    breed: string;
    match_score: number;
    // Add other pet properties as needed
  }>;
}

function QuizPage() {
  const navigate = useNavigate();
  const { toast } = useToast();
  const [currentSection, setCurrentSection] = useState(0);
  const [answers, setAnswers] = useState<Record<string, string>>({});
  const [isSubmitting, setIsSubmitting] = useState(false);

  const section = quizData.sections[currentSection];
  const progress = ((currentSection + 1) / quizData.sections.length) * 100;

  const handleAnswer = (questionId: string, value: string) => {
    setAnswers(prev => ({
      ...prev,
      [questionId]: value
    }));
  };

  const handleNext = () => {
    if (currentSection < quizData.sections.length - 1) {
      setCurrentSection(prev => prev + 1);
    } else {
      handleSubmit();
    }
  };

  const handlePrevious = () => {
    if (currentSection > 0) {
      setCurrentSection(prev => prev - 1);
    }
  };

  const handleSubmit = async () => {
    try {
      setIsSubmitting(true);
      
      // Format answers into sections for the API
      const formattedAnswers = Object.entries(answers).reduce((acc, [questionId, answer]) => {
        const section = quizData.sections.find(s => 
          s.questions.some(q => q.id === questionId)
        );
        if (section) {
          if (!acc[section.id]) {
            acc[section.id] = {};
          }
          acc[section.id][questionId] = answer;
        }
        return acc;
      }, {} as Record<string, Record<string, string>>);

      // Submit to the API
      const response = await api.post<{ success: boolean; data: QuizResults }>('/quiz/submit', {
        answers: formattedAnswers
      });

      if (response.data.success) {
        // Navigate to results page with the quiz results
        navigate('/quiz/results', { 
          state: { 
            results: response.data.data 
          }
        });
      } else {
        throw new Error('Failed to process quiz results');
      }
    } catch (error: any) {
      console.error('Failed to submit quiz:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: error.response?.data?.error || 'Failed to submit quiz. Please try again.',
      });
    } finally {
      setIsSubmitting(false);
    }
  };

  const isLastSection = currentSection === quizData.sections.length - 1;
  const hasAnsweredCurrent = section.questions.every(q => answers[q.id]);

  return (
    <div className="container max-w-2xl mx-auto p-4">
      <Card>
        <CardHeader>
          <CardTitle>Pet Matching Quiz</CardTitle>
          <CardDescription>
            Section {currentSection + 1} of {quizData.sections.length}: {section.title}
          </CardDescription>
          <Progress value={progress} className="mt-2" />
        </CardHeader>

        <CardContent className="space-y-6">
          {section.questions.map((question) => (
            <div key={question.id} className="space-y-4">
              <h3 className="font-medium">{question.text}</h3>
              <RadioGroup
                value={answers[question.id] || ''}
                onValueChange={(value) => handleAnswer(question.id, value)}
              >
                {question.options.map((option) => (
                  <div key={option.id} className="flex items-center space-x-2">
                    <RadioGroupItem value={option.id} id={option.id} />
                    <Label htmlFor={option.id}>{option.label}</Label>
                  </div>
                ))}
              </RadioGroup>
            </div>
          ))}
        </CardContent>

        <CardFooter className="flex justify-between">
          <Button
            variant="outline"
            onClick={handlePrevious}
            disabled={currentSection === 0}
          >
            <ChevronLeft className="mr-2 h-4 w-4" />
            Previous
          </Button>

          <Button
            onClick={handleNext}
            disabled={!hasAnsweredCurrent || isSubmitting}
          >
            {isLastSection ? (
              isSubmitting ? 'Submitting...' : 'Submit'
            ) : (
              <>
                Next
                <ChevronRight className="ml-2 h-4 w-4" />
              </>
            )}
          </Button>
        </CardFooter>
      </Card>
    </div>
  );
}

export default QuizPage;

```


### File: ./src/pages/RegisterPage.tsx
```
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import { useNavigate, Link } from 'react-router-dom';
import { useSetAtom } from 'jotai';
import { userAtom } from '@/stores/auth';
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from "@/components/ui/form";
import { useToast } from '@/hooks/use-toast';
import api from '@/lib/axios';
import { ApiResponse } from '@/types/api';

const registerSchema = z.object({
  username: z.string()
    .min(3, 'Username must be at least 3 characters')
    .max(50, 'Username cannot exceed 50 characters'),
  email: z.string()
    .email('Please enter a valid email'),
  password: z.string()
    .min(8, 'Password must be at least 8 characters')
    .regex(/[A-Z]/, 'Password must contain at least one uppercase letter')
    .regex(/[a-z]/, 'Password must contain at least one lowercase letter')
    .regex(/[0-9]/, 'Password must contain at least one number'),
  confirmPassword: z.string()
}).refine((data) => data.password === data.confirmPassword, {
  message: "Passwords don't match",
  path: ["confirmPassword"],
});

type RegisterFormData = z.infer<typeof registerSchema>;

function RegisterPage() {
  const navigate = useNavigate();
  const setUser = useSetAtom(userAtom);
  const { toast } = useToast();
  const [isLoading, setIsLoading] = useState(false);

  const form = useForm<RegisterFormData>({
    resolver: zodResolver(registerSchema),
    defaultValues: {
      username: '',
      email: '',
      password: '',
      confirmPassword: '',
    },
  });

  const onSubmit = async (data: RegisterFormData) => {
      try {
          setIsLoading(true);
          
          const response = await api.post<ApiResponse<{ user: any; token: string }>>('/auth/register', {
              username: data.username,
              email: data.email,
              password: data.password,
          });
          
          // Check if response.data.data exists (new format) or fall back to response.data (old format)
          const authData = response.data.data || response.data;
          
          // Save token
          localStorage.setItem('token', authData.token);
          
          // Update user state
          setUser(authData.user);
          
          // Show success toast
          toast({
              title: "Registration successful!",
              description: "Welcome to PawPath! Let's find your perfect pet companion.",
          });
          
          // Navigate to quiz or home page
          navigate('/quiz');
      } catch (err: any) {
          const errorMessage = err.response?.data?.error || 'Registration failed. Please try again.';
          form.setError('root', { 
              message: errorMessage 
          });
          
          toast({
              variant: "destructive",
              title: "Registration failed",
              description: errorMessage,
          });
      } finally {
          setIsLoading(false);
      }
  };

  return (
    <div className="container max-w-lg mx-auto p-4">
      <Card>
        <CardHeader>
          <CardTitle>Create an Account</CardTitle>
          <CardDescription>
            Join PawPath to find your perfect pet companion
          </CardDescription>
        </CardHeader>
        <CardContent>
          <Form {...form}>
            <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
              {form.formState.errors.root && (
                <Alert variant="destructive">
                  <AlertDescription>
                    {form.formState.errors.root.message}
                  </AlertDescription>
                </Alert>
              )}
              
              <FormField
                control={form.control}
                name="username"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Username</FormLabel>
                    <FormControl>
                      <Input 
                        {...field}
                        type="text"
                        placeholder="johndoe"
                        autoComplete="username"
                        disabled={isLoading}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="email"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Email</FormLabel>
                    <FormControl>
                      <Input 
                        {...field}
                        type="email"
                        placeholder="john.doe@example.com"
                        autoComplete="email"
                        disabled={isLoading}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="password"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Password</FormLabel>
                    <FormControl>
                      <Input 
                        {...field}
                        type="password"
                        placeholder="••••••••"
                        autoComplete="new-password"
                        disabled={isLoading}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <FormField
                control={form.control}
                name="confirmPassword"
                render={({ field }) => (
                  <FormItem>
                    <FormLabel>Confirm Password</FormLabel>
                    <FormControl>
                      <Input 
                        {...field}
                        type="password"
                        placeholder="••••••••"
                        autoComplete="new-password"
                        disabled={isLoading}
                      />
                    </FormControl>
                    <FormMessage />
                  </FormItem>
                )}
              />
              
              <Button 
                type="submit" 
                className="w-full"
                disabled={isLoading}
              >
                {isLoading ? 'Creating account...' : 'Create Account'}
              </Button>
            </form>
          </Form>
        </CardContent>
        <CardFooter className="flex flex-col space-y-2">
          <p className="text-sm text-muted-foreground">
            Already have an account?{' '}
            <Button 
              variant="link" 
              className="px-0"
              onClick={() => navigate('/login')}
            >
              Sign in
            </Button>
          </p>
          <p className="text-xs text-muted-foreground text-center">
            By creating an account, you agree to our{' '}
            <Link to="/terms" className="underline hover:text-primary">
              Terms of Service
            </Link>
            {' '}and{' '}
            <Link to="/privacy" className="underline hover:text-primary">
              Privacy Policy
            </Link>
          </p>
        </CardFooter>
      </Card>
    </div>
  );
}

export default RegisterPage;

```


### File: ./src/pages/ShelterDetailPage.tsx
```
import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { ChevronLeft, MapPin, Phone, Mail, PawPrint } from 'lucide-react';
import { PetCard } from '@/components/pets/PetCard';
import api from '@/lib/axios';

interface Shelter {
  shelter_id: number;
  name: string;
  address: string;
  phone: string;
  email: string;
  is_no_kill: boolean;
  total_pets: number;
  active_applications: number;
}

interface Pet {
  pet_id: number;
  name: string;
  species: string;
  breed: string;
  age: number;
  gender: string;
  description: string;
  shelter_name: string;
  images?: Array<{
    image_id: number;
    url: string;
    is_primary: boolean;
  }>;
  traits?: {
    [category: string]: string[];
  };
}

export default function ShelterDetailPage() {
  const { id } = useParams();
  const navigate = useNavigate();
  const { toast } = useToast();
  const [shelter, setShelter] = useState<Shelter | null>(null);
  const [pets, setPets] = useState<Pet[]>([]);
  const [loading, setLoading] = useState(true);

  useEffect(() => {
    fetchShelterDetails();
  }, [id]);

  const fetchShelterDetails = async () => {
    try {
      setLoading(true);
      // Fetch shelter details
      const shelterResponse = await api.get(`/shelters/${id}`);
      if (!shelterResponse.data.success) {
        throw new Error(shelterResponse.data.error || 'Failed to fetch shelter details');
      }
      setShelter(shelterResponse.data.data);

      // Fetch shelter's pets
      const petsResponse = await api.get('/pets', {
        params: {
          shelter_id: id
        }
      });
      if (petsResponse.data.success) {
        setPets(petsResponse.data.data.items);
      }
    } catch (error: any) {
      console.error('Error fetching shelter details:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: error.message || "Failed to load shelter details",
      });
      navigate('/shelters');
    } finally {
      setLoading(false);
    }
  };

  if (loading) {
    return (
      <div className="container mx-auto p-4">
        <div className="flex justify-center items-center min-h-[400px]">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
        </div>
      </div>
    );
  }

  if (!shelter) {
    return (
      <div className="container mx-auto p-4">
        <Card>
          <CardContent className="p-6 text-center">
            <h3 className="text-lg font-semibold mb-2">Shelter not found</h3>
            <p className="text-muted-foreground mb-4">
              The shelter you're looking for doesn't exist or has been removed.
            </p>
            <Button onClick={() => navigate('/shelters')}>
              View All Shelters
            </Button>
          </CardContent>
        </Card>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-4">
      <Button
        variant="ghost"
        className="mb-4"
        onClick={() => navigate('/shelters')}
      >
        <ChevronLeft className="mr-2 h-4 w-4" />
        Back to Shelters
      </Button>

      <div className="grid gap-6">
        {/* Shelter Info Card */}
        <Card>
          <CardHeader>
            <div className="flex justify-between items-start">
              <div>
                <CardTitle className="text-3xl">{shelter.name}</CardTitle>
                <CardDescription className="flex items-center mt-2">
                  <MapPin className="h-4 w-4 mr-2" />
                  {shelter.address}
                </CardDescription>
              </div>
              {shelter.is_no_kill && (
                <Badge variant="success">No-Kill Shelter</Badge>
              )}
            </div>
          </CardHeader>
          <CardContent>
            <div className="grid gap-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-2">
                  <div className="flex items-center text-muted-foreground">
                    <Phone className="h-4 w-4 mr-2" />
                    {shelter.phone}
                  </div>
                  <div className="flex items-center text-muted-foreground">
                    <Mail className="h-4 w-4 mr-2" />
                    {shelter.email}
                  </div>
                </div>
                <div className="space-y-2">
                  <div className="flex items-center text-muted-foreground">
                    <PawPrint className="h-4 w-4 mr-2" />
                    {shelter.total_pets} pets available
                  </div>
                </div>
              </div>
            </div>
          </CardContent>
        </Card>

        {/* Available Pets Section */}
        <Card>
          <CardHeader>
            <CardTitle>Available Pets</CardTitle>
            <CardDescription>
              Pets currently available for adoption at {shelter.name}
            </CardDescription>
          </CardHeader>
          <CardContent>
            {pets.length === 0 ? (
              <div className="text-center py-8">
                <PawPrint className="h-12 w-12 mx-auto text-muted-foreground mb-4" />
                <h3 className="text-lg font-semibold mb-2">No Pets Available</h3>
                <p className="text-muted-foreground">
                  This shelter currently has no pets listed for adoption.
                </p>
              </div>
            ) : (
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {pets.map((pet) => (
                  <PetCard
                    key={pet.pet_id}
                    pet={pet}
                    onClick={() => navigate(`/pets/${pet.pet_id}`)}
                  />
                ))}
              </div>
            )}
          </CardContent>
        </Card>
      </div>
    </div>
  );
}

```


### File: ./src/pages/LoginPage.tsx
```
import { useState } from 'react';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import { useNavigate, useLocation } from 'react-router-dom';
import { useSetAtom } from 'jotai';
import { userAtom } from '@/stores/auth';
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription } from '@/components/ui/alert';
import api from '@/lib/axios';
import { ApiResponse } from '@/types/api';

// Form validation schema
const loginSchema = z.object({
  email: z.string().email('Please enter a valid email'),
  password: z.string().min(6, 'Password must be at least 6 characters'),
});

type LoginFormData = z.infer<typeof loginSchema>;

function LoginPage() {
  const navigate = useNavigate();
  const location = useLocation();
  const setUser = useSetAtom(userAtom);
  const [error, setError] = useState<string | null>(null);
  const [isLoading, setIsLoading] = useState(false);

  // Get return URL from location state or default to home
  const from = (location.state as any)?.from?.pathname || '/';

  const { register, handleSubmit, formState: { errors } } = useForm<LoginFormData>({
    resolver: zodResolver(loginSchema)
  });

  const onSubmit = async (data: LoginFormData) => {
      try {
          setIsLoading(true);
          setError(null);
          
          const response = await api.post<ApiResponse<{ user: any; token: string }>>('/auth/login', data);
          
          // Check if response.data.data exists (new format) or fall back to response.data (old format)
          const authData = response.data.data || response.data;
          
          // Save token
          localStorage.setItem('token', authData.token);
          
          // Update user state
          setUser(authData.user);
          
          // Navigate to return URL
          navigate(from, { replace: true });
      } catch (err: any) {
          const errorMessage = err.response?.data?.error || 'Failed to login';
          setError(errorMessage);
      } finally {
          setIsLoading(false);
      }
  };

  return (
    <div className="container max-w-lg mx-auto p-4">
      <Card>
        <CardHeader>
          <CardTitle>Welcome Back</CardTitle>
          <CardDescription>Sign in to your PawPath account</CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit(onSubmit)} className="space-y-4">
            {error && (
              <Alert variant="destructive">
                <AlertDescription>{error}</AlertDescription>
              </Alert>
            )}
            
            <div className="space-y-2">
              <Label htmlFor="email">Email</Label>
              <Input
                id="email"
                type="email"
                {...register('email')}
                placeholder="you@example.com"
              />
              {errors.email && (
                <p className="text-sm text-red-500">{errors.email.message}</p>
              )}
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="password">Password</Label>
              <Input
                id="password"
                type="password"
                {...register('password')}
                placeholder="••••••••"
              />
              {errors.password && (
                <p className="text-sm text-red-500">{errors.password.message}</p>
              )}
            </div>
            
            <Button 
              type="submit" 
              className="w-full"
              disabled={isLoading}
            >
              {isLoading ? 'Signing in...' : 'Sign In'}
            </Button>
          </form>
        </CardContent>
        <CardFooter className="flex justify-center">
          <p className="text-sm text-muted-foreground">
            Don't have an account?{' '}
            <Button 
              variant="link" 
              className="px-0"
              onClick={() => navigate('/register')}
            >
              Register
            </Button>
          </p>
        </CardFooter>
      </Card>
    </div>
  );
}

export default LoginPage;

```


### File: ./src/pages/ProfilePage.tsx
```
import { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { profileService } from '@/services/profile';
import { UserProfile, ProfileUpdateData } from '@/types/profile';
import { useToast } from '@/hooks/use-toast';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Alert, AlertDescription } from '@/components/ui/alert';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { useAuth } from '@/contexts/AuthContext';

const profileSchema = z.object({
    first_name: z.string().min(1, 'First name is required'),
    last_name: z.string().min(1, 'Last name is required'),
    phone: z.string().min(10, 'Please enter a valid phone number'),
    address: z.string().optional(),
    city: z.string().optional(),
    state: z.string().optional(),
    zip_code: z.string().optional(),
    housing_type: z.enum(['house', 'apartment', 'condo', 'other']).optional(),
    has_yard: z.boolean().optional(),
    other_pets: z.string().optional(),
    household_members: z.number().int().min(1).optional()
});

export default function ProfilePage() {
    const [profile, setProfile] = useState<UserProfile | null>(null);
    const [loading, setLoading] = useState(true);
    const { toast } = useToast();
    const { user } = useAuth();
    
    const form = useForm<ProfileUpdateData>({
        resolver: zodResolver(profileSchema)
    });

    useEffect(() => {
        loadProfile();
    }, []);

    const loadProfile = async () => {
        try {
            const data = await profileService.getProfile();
            setProfile(data);
            form.reset({
                first_name: data.first_name,
                last_name: data.last_name,
                phone: data.phone,
                address: data.address || undefined,
                city: data.city || undefined,
                state: data.state || undefined,
                zip_code: data.zip_code || undefined,
                housing_type: data.housing_type || undefined,
                has_yard: data.has_yard || undefined,
                other_pets: data.other_pets || undefined,
                household_members: data.household_members || undefined
            });
        } catch (error: any) {
            toast({
                variant: "destructive",
                title: "Error",
                description: "Failed to load profile",
            });
        } finally {
            setLoading(false);
        }
    };

    const renderRoleSpecificContent = () => {
        switch (user?.role) {
            case 'shelter_staff':
                return (
                    <TabsContent value="shelter">
                        <Card>
                            <CardHeader>
                                <CardTitle>Shelter Management</CardTitle>
                                <CardDescription>
                                    Manage your shelter's information and pets
                                </CardDescription>
                            </CardHeader>
                            <CardContent>
                                {/* Shelter staff specific content */}
                            </CardContent>
                        </Card>
                    </TabsContent>
                );
            case 'admin':
                return (
                    <TabsContent value="admin">
                        <Card>
                            <CardHeader>
                                <CardTitle>Admin Dashboard</CardTitle>
                                <CardDescription>
                                    System administration tools
                                </CardDescription>
                            </CardHeader>
                            <CardContent>
                                {/* Admin specific content */}
                            </CardContent>
                        </Card>
                    </TabsContent>
                );
            default:
                return null;
        }
    };

    if (loading) {
        return <div>Loading...</div>;
    }

    return (
        <div className="container max-w-4xl mx-auto p-4">
            <Tabs defaultValue="profile">
                <TabsList>
                    <TabsTrigger value="profile">Profile</TabsTrigger>
                    {user?.role === 'shelter_staff' && (
                        <TabsTrigger value="shelter">Shelter Management</TabsTrigger>
                    )}
                    {user?.role === 'admin' && (
                        <TabsTrigger value="admin">Admin Dashboard</TabsTrigger>
                    )}
                </TabsList>

                <TabsContent value="profile">
                    <Card>
                        <CardHeader>
                            <CardTitle>Profile Settings</CardTitle>
                            <CardDescription>
                                Manage your personal information
                            </CardDescription>
                        </CardHeader>
                        <CardContent>
                            {/* Existing profile form content */}
                        </CardContent>
                    </Card>
                </TabsContent>

                {renderRoleSpecificContent()}
            </Tabs>
        </div>
    );
}

```


### File: ./src/pages/profile/ApplicationDetailPage.tsx
```
import { useState, useEffect } from 'react';
import { useParams, useNavigate } from 'react-router-dom';
import { format } from 'date-fns';
import { 
    Card, 
    CardHeader, 
    CardTitle, 
    CardDescription, 
    CardContent 
} from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { useToast } from '@/hooks/use-toast';
import { ChevronLeft, PawPrint, Clock, Building2, FileText } from 'lucide-react';
import api from '@/lib/axios';

interface ApplicationDetails {
    application_id: number;
    pet_id: number;
    user_id: number;
    status: 'pending' | 'under_review' | 'approved' | 'rejected' | 'withdrawn';
    application_date: string;
    reason: string;
    experience: string;
    living_situation: string;
    has_other_pets: boolean;
    other_pets_details: string | null;
    daily_schedule: string;
    veterinarian: string | null;
    pet_name: string;
    pet_breed: string;
    pet_species: string;
    shelter_name: string;
    last_updated: string;
}

export default function ApplicationDetailPage() {
    const { id } = useParams();
    const navigate = useNavigate();
    const { toast } = useToast();
    const [application, setApplication] = useState<ApplicationDetails | null>(null);
    const [loading, setLoading] = useState(true);
    const [error, setError] = useState<string | null>(null);

    useEffect(() => {
        if (id) {
            fetchApplicationDetails();
        }
    }, [id]);

    const fetchApplicationDetails = async () => {
        try {
            setLoading(true);
            setError(null);
            console.log('Fetching application details for ID:', id);

            const response = await api.get(`/adoptions/${id}`);
            console.log('API Response:', response.data);

            if (response.data.success) {
                setApplication(response.data.data);
            } else {
                throw new Error(response.data.error || 'Failed to fetch application details');
            }
        } catch (error: any) {
            console.error('Error fetching application:', error);
            console.error('Full error details:', {
                message: error.message,
                response: error.response?.data,
                status: error.response?.status
            });

            const errorMessage = error.response?.data?.error 
                || error.message 
                || "Failed to load application details";
            
            setError(errorMessage);
            toast({
                variant: "destructive",
                title: "Error",
                description: errorMessage,
            });
        } finally {
            setLoading(false);
        }
    };
    const getStatusBadgeVariant = (status: string) => {
        switch (status) {
            case 'approved':
                return 'success';
            case 'rejected':
                return 'destructive';
            case 'under_review':
                return 'warning';
            case 'withdrawn':
                return 'secondary';
            default:
                return 'default';
        }
    };

    const formatDate = (dateString: string) => {
        return format(new Date(dateString), 'PPP');
    };

    if (loading) {
        return (
            <div className="container max-w-4xl mx-auto p-4">
                <div className="flex justify-center items-center min-h-[400px]">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
                </div>
            </div>
        );
    }

    if (!application) {
        return (
            <div className="container max-w-4xl mx-auto p-4">
                <Card>
                    <CardContent className="flex flex-col items-center justify-center py-12">
                        <FileText className="h-12 w-12 text-muted-foreground mb-4" />
                        <h3 className="text-lg font-semibold mb-2">Application Not Found</h3>
                        <p className="text-muted-foreground text-center mb-4">
                            The application you're looking for doesn't exist or you don't have permission to view it.
                        </p>
                        <Button onClick={() => navigate('/profile/applications')}>
                            View All Applications
                        </Button>
                    </CardContent>
                </Card>
            </div>
        );
    }

    return (
        <div className="container max-w-4xl mx-auto p-4">
            <Button
                variant="ghost"
                className="mb-4"
                onClick={() => navigate('/profile/applications')}
            >
                <ChevronLeft className="mr-2 h-4 w-4" />
                Back to Applications
            </Button>

            <div className="grid gap-6">
                {/* Header Card */}
                <Card>
                    <CardHeader>
                        <div className="flex justify-between items-start">
                            <div>
                                <CardTitle>Adoption Application</CardTitle>
                                <CardDescription>
                                    Application for {application.pet_name}
                                </CardDescription>
                            </div>
                            <Badge variant={getStatusBadgeVariant(application.status)}>
                                {application.status.replace('_', ' ')}
                            </Badge>
                        </div>
                    </CardHeader>
                    <CardContent>
                        <div className="grid gap-4">
                            <div className="flex items-center gap-2 text-muted-foreground">
                                <Clock className="h-4 w-4" />
                                Submitted on {formatDate(application.application_date)}
                            </div>
                            <div className="flex items-center gap-2 text-muted-foreground">
                                <Building2 className="h-4 w-4" />
                                {application.shelter_name}
                            </div>
                        </div>
                    </CardContent>
                </Card>

                {/* Pet Details Card */}
                <Card>
                    <CardHeader>
                        <CardTitle>Pet Information</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <div className="grid gap-4">
                            <div className="flex items-center gap-4">
                                <PawPrint className="h-8 w-8 text-muted-foreground" />
                                <div>
                                    <h3 className="font-semibold">{application.pet_name}</h3>
                                    <p className="text-muted-foreground">
                                        {application.pet_breed} • {application.pet_species}
                                    </p>
                                </div>
                            </div>
                        </div>
                    </CardContent>
                </Card>

                {/* Application Details Card */}
                <Card>
                    <CardHeader>
                        <CardTitle>Application Details</CardTitle>
                    </CardHeader>
                    <CardContent>
                        <div className="space-y-6">
                            <div>
                                <h3 className="font-semibold mb-2">Why do you want to adopt this pet?</h3>
                                <p className="text-muted-foreground">{application.reason}</p>
                            </div>

                            <div>
                                <h3 className="font-semibold mb-2">Pet Care Experience</h3>
                                <p className="text-muted-foreground">{application.experience}</p>
                            </div>

                            <div>
                                <h3 className="font-semibold mb-2">Living Situation</h3>
                                <p className="text-muted-foreground">{application.living_situation}</p>
                            </div>

                            {application.has_other_pets && application.other_pets_details && (
                                <div>
                                    <h3 className="font-semibold mb-2">Other Pets</h3>
                                    <p className="text-muted-foreground">{application.other_pets_details}</p>
                                </div>
                            )}

                            <div>
                                <h3 className="font-semibold mb-2">Daily Schedule</h3>
                                <p className="text-muted-foreground">{application.daily_schedule}</p>
                            </div>

                            {application.veterinarian && (
                                <div>
                                    <h3 className="font-semibold mb-2">Veterinarian Information</h3>
                                    <p className="text-muted-foreground">{application.veterinarian}</p>
                                </div>
                            )}
                        </div>
                    </CardContent>
                </Card>
            </div>
        </div>
    );
}

```


### File: ./src/pages/profile/ProfileSettings.tsx
```
import { useState, useEffect } from 'react';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import { z } from 'zod';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { useToast } from '@/hooks/use-toast';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import {
  Tabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from '@/components/ui/tabs';
import api from '@/lib/axios';

const profileSchema = z.object({
  first_name: z.string().min(1, 'First name is required'),
  last_name: z.string().min(1, 'Last name is required'),
  phone: z.string().min(10, 'Please enter a valid phone number'),
  email: z.string().email('Please enter a valid email'),
  address: z.string().optional(),
  city: z.string().optional(),
  state: z.string().optional(),
  zip_code: z.string().optional(),
  housing_type: z.enum(['house', 'apartment', 'condo', 'other']).optional(),
  has_yard: z.boolean().optional(),
});

type ProfileFormData = z.infer<typeof profileSchema>;

export default function ProfileSettings() {
  const [loading, setLoading] = useState(true);
  const { toast } = useToast();
  
  const form = useForm<ProfileFormData>({
    resolver: zodResolver(profileSchema)
  });

  useEffect(() => {
    const loadProfile = async () => {
      try {
        const response = await api.get('/profile');
        const profileData = response.data.data;
        form.reset(profileData);
      } catch (error) {
        toast({
          variant: "destructive",
          title: "Error",
          description: "Failed to load profile data",
        });
      } finally {
        setLoading(false);
      }
    };

    loadProfile();
  }, []);

  const onSubmit = async (data: ProfileFormData) => {
    try {
      await api.put('/profile', data);
      toast({
        title: "Success",
        description: "Profile updated successfully",
      });
    } catch (error) {
      toast({
        variant: "destructive",
        title: "Error",
        description: "Failed to update profile",
      });
    }
  };

  if (loading) {
    return (
      <div className="flex justify-center items-center min-h-screen">
        <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
      </div>
    );
  }

  return (
    <div className="container max-w-4xl mx-auto p-6">
      <Tabs defaultValue="general">
        <TabsList>
          <TabsTrigger value="general">General</TabsTrigger>
          <TabsTrigger value="notifications">Notifications</TabsTrigger>
          <TabsTrigger value="security">Security</TabsTrigger>
        </TabsList>

        <TabsContent value="general">
          <Card>
            <CardHeader>
              <CardTitle>Profile Settings</CardTitle>
              <CardDescription>
                Update your personal information
              </CardDescription>
            </CardHeader>
            <CardContent>
              <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="first_name">First Name</Label>
                    <Input
                      id="first_name"
                      {...form.register('first_name')}
                      placeholder="John"
                    />
                    {form.formState.errors.first_name && (
                      <p className="text-sm text-red-500">
                        {form.formState.errors.first_name.message}
                      </p>
                    )}
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="last_name">Last Name</Label>
                    <Input
                      id="last_name"
                      {...form.register('last_name')}
                      placeholder="Doe"
                    />
                    {form.formState.errors.last_name && (
                      <p className="text-sm text-red-500">
                        {form.formState.errors.last_name.message}
                      </p>
                    )}
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="email">Email</Label>
                  <Input
                    id="email"
                    type="email"
                    {...form.register('email')}
                    placeholder="john.doe@example.com"
                  />
                  {form.formState.errors.email && (
                    <p className="text-sm text-red-500">
                      {form.formState.errors.email.message}
                    </p>
                  )}
                </div>

                <div className="space-y-2">
                  <Label htmlFor="phone">Phone</Label>
                  <Input
                    id="phone"
                    {...form.register('phone')}
                    placeholder="(555) 555-5555"
                  />
                  {form.formState.errors.phone && (
                    <p className="text-sm text-red-500">
                      {form.formState.errors.phone.message}
                    </p>
                  )}
                </div>

                <div className="space-y-2">
                  <Label htmlFor="address">Address</Label>
                  <Input
                    id="address"
                    {...form.register('address')}
                    placeholder="123 Main St"
                  />
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div className="space-y-2">
                    <Label htmlFor="city">City</Label>
                    <Input
                      id="city"
                      {...form.register('city')}
                      placeholder="City"
                    />
                  </div>

                  <div className="space-y-2">
                    <Label htmlFor="state">State</Label>
                    <Input
                      id="state"
                      {...form.register('state')}
                      placeholder="State"
                    />
                  </div>
                </div>

                <div className="space-y-2">
                  <Label htmlFor="housing_type">Housing Type</Label>
                  <Select
                    defaultValue={form.getValues('housing_type')}
                    onValueChange={(value) => form.setValue('housing_type', value as any)}
                  >
                    <SelectTrigger>
                      <SelectValue placeholder="Select housing type" />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="house">House</SelectItem>
                      <SelectItem value="apartment">Apartment</SelectItem>
                      <SelectItem value="condo">Condo</SelectItem>
                      <SelectItem value="other">Other</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <Button type="submit" className="w-full">
                  Save Changes
                </Button>
              </form>
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="notifications">
          <Card>
            <CardHeader>
              <CardTitle>Notification Settings</CardTitle>
              <CardDescription>
                Manage your notification preferences
              </CardDescription>
            </CardHeader>
            <CardContent>
              {/* Add notification settings here */}
            </CardContent>
          </Card>
        </TabsContent>

        <TabsContent value="security">
          <Card>
            <CardHeader>
              <CardTitle>Security Settings</CardTitle>
              <CardDescription>
                Manage your account security
              </CardDescription>
            </CardHeader>
            <CardContent>
              {/* Add security settings here */}
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
}

```


### File: ./src/pages/profile/ApplicationsPage.tsx
```
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Button } from '@/components/ui/button';
import { useToast } from '@/hooks/use-toast';
import { ChevronRight, ClipboardList } from 'lucide-react';
import api from '@/lib/axios';

interface Application {
  application_id: number;
  pet_id: number;
  status: 'pending' | 'under_review' | 'approved' | 'rejected' | 'withdrawn';
  application_date: string;
  pet_name: string;
  pet_species: string;
  pet_breed: string;
  shelter_name: string;
}

interface ApiResponse {
  success: boolean;
  data: Application[];
  error?: string;
}

export default function ApplicationsPage() {
  const [applications, setApplications] = useState<Application[]>([]);
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();
  const { toast } = useToast();

  useEffect(() => {
    fetchApplications();
  }, []);

  const fetchApplications = async () => {
    try {
      setLoading(true);
      const response = await api.get<ApiResponse>('/adoptions/user');
      console.log('API Response:', response.data); // Debug log

      if (response.data.success) {
        setApplications(response.data.data || []);
      } else {
        throw new Error(response.data.error || 'Failed to load applications');
      }
    } catch (error: any) {
      console.error('Error fetching applications:', error);
      toast({
        variant: "destructive",
        title: "Error",
        description: error.message || "Failed to load applications",
      });
      setApplications([]); // Set to empty array on error
    } finally {
      setLoading(false);
    }
  };

  const getStatusBadgeVariant = (status: string) => {
    switch (status) {
      case 'approved':
        return 'success';
      case 'rejected':
        return 'destructive';
      case 'under_review':
        return 'warning';
      case 'withdrawn':
        return 'secondary';
      default:
        return 'default';
    }
  };

  if (loading) {
    return (
      <div className="container max-w-4xl mx-auto p-4">
        <div className="flex justify-center items-center min-h-[400px]">
          <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
        </div>
      </div>
    );
  }

  return (
    <div className="container max-w-4xl mx-auto p-4">
      <div className="mb-6">
        <h1 className="text-3xl font-bold tracking-tight">My Applications</h1>
        <p className="text-muted-foreground">
          Track the status of your adoption applications
        </p>
      </div>

      {applications.length === 0 ? (
        <Card>
          <CardContent className="flex flex-col items-center justify-center py-12">
            <ClipboardList className="h-12 w-12 text-muted-foreground mb-4" />
            <h3 className="text-lg font-semibold mb-2">No Applications Yet</h3>
            <p className="text-muted-foreground text-center mb-4">
              You haven't submitted any adoption applications yet.
            </p>
            <Button onClick={() => navigate('/pets')}>
              Browse Available Pets
            </Button>
          </CardContent>
        </Card>
      ) : (
        <div className="grid gap-4">
          {applications.map((application) => (
            <Card key={application.application_id} className="group">
              <CardContent className="p-6">
                <div className="flex justify-between items-start">
                  <div className="space-y-1">
                    <div className="flex items-center gap-2">
                      <h3 className="font-semibold text-lg">
                        {application.pet_name}
                      </h3>
                      <Badge variant={getStatusBadgeVariant(application.status)}>
                        {application.status.replace('_', ' ')}
                      </Badge>
                    </div>
                    <p className="text-sm text-muted-foreground">
                      {application.pet_breed} • {application.pet_species}
                    </p>
                    <p className="text-sm text-muted-foreground">
                      At {application.shelter_name}
                    </p>
                    <p className="text-sm text-muted-foreground">
                      Submitted on {new Date(application.application_date).toLocaleDateString()}
                    </p>
                  </div>
                  
                  <Button
                    variant="ghost"
                    size="sm"
                    className="opacity-0 group-hover:opacity-100 transition-opacity"
                    onClick={() => navigate(`/profile/applications/${application.application_id}`)}
                  >
                    View Details
                    <ChevronRight className="ml-2 h-4 w-4" />
                  </Button>
                </div>
              </CardContent>
            </Card>
          ))}
        </div>
      )}
    </div>
  );
}

```


### File: ./src/pages/profile/FavoritesPage.tsx
```
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardContent, CardHeader, CardTitle, CardDescription } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Heart, PawPrint } from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { Pet } from '@/types/api';
import api from '@/lib/axios';
import { PetCard } from '@/components/pets/PetCard';

interface FavoritedPet {
  pet_id: number;
  name: string;
  species: string;
  breed: string;
  age: number;
  gender: string;
  description: string;
  shelter_name: string;
  favorited_at: string;
  traits?: {
    [category: string]: string[];
  };
}

export default function FavoritesPage() {
    const [favorites, setFavorites] = useState<FavoritedPet[]>([]);
    const [loading, setLoading] = useState(true);
    const navigate = useNavigate();
    const { toast } = useToast();

    useEffect(() => {
        fetchFavorites();
    }, []);

    const fetchFavorites = async () => {
        try {
            setLoading(true);
            const response = await api.get('/favorites');
            
            if (response.data.success) {
                setFavorites(response.data.data);
            } else {
                throw new Error(response.data.error || 'Failed to fetch favorites');
            }
        } catch (error: any) {
            console.error('Error fetching favorites:', error);
            toast({
                variant: "destructive",
                title: "Error",
                description: error.message || "Failed to load favorites",
            });
        } finally {
            setLoading(false);
        }
    };

    const handleRemoveFavorite = async (petId: number) => {
        try {
            await api.delete(`/pets/${petId}/favorite`);
            setFavorites(favorites.filter(pet => pet.pet_id !== petId));
            toast({
                title: "Success",
                description: "Pet removed from favorites",
            });
        } catch (error: any) {
            toast({
                variant: "destructive",
                title: "Error",
                description: "Failed to remove from favorites",
            });
        }
    };

    if (loading) {
        return (
            <div className="container max-w-4xl mx-auto p-4">
                <div className="flex justify-center items-center min-h-[400px]">
                    <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
                </div>
            </div>
        );
    }

    if (favorites.length === 0) {
        return (
            <div className="container max-w-4xl mx-auto p-4">
                <Card>
                    <CardContent className="flex flex-col items-center justify-center py-12">
                        <Heart className="h-12 w-12 text-muted-foreground mb-4" />
                        <h3 className="text-lg font-semibold mb-2">No Favorite Pets Yet</h3>
                        <p className="text-muted-foreground text-center mb-4">
                            Browse our available pets and add some to your favorites!
                        </p>
                        <Button onClick={() => navigate('/pets')}>
                            Browse Pets
                        </Button>
                    </CardContent>
                </Card>
            </div>
        );
    }

    return (
        <div className="container max-w-4xl mx-auto p-4">
            <div className="mb-6">
                <h1 className="text-3xl font-bold tracking-tight">Favorite Pets</h1>
                <p className="text-muted-foreground">
                    Pets you've saved as favorites
                </p>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                {favorites.map((pet) => (
                    <div key={pet.pet_id} className="relative group">
                        <PetCard
                            pet={pet}
                            onClick={() => navigate(`/pets/${pet.pet_id}`)}
                        />
                        <Button
                            variant="destructive"
                            size="sm"
                            className="absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity"
                            onClick={(e) => {
                                e.stopPropagation();
                                handleRemoveFavorite(pet.pet_id);
                            }}
                        >
                            <Heart className="h-4 w-4" /> Remove
                        </Button>
                    </div>
                ))}
            </div>
        </div>
    );
}

```


### File: ./src/pages/admin/NewShelterPage.tsx
```
import { useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardHeader, CardTitle, CardDescription, CardContent, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Label } from '@/components/ui/label';
import { Checkbox } from '@/components/ui/checkbox';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/AuthContext';
import api from '@/lib/axios';

interface ShelterFormData {
    name: string;
    address: string;
    phone: string;
    email: string;
    is_no_kill: boolean;
}

export default function NewShelterPage() {
    const [formData, setFormData] = useState<ShelterFormData>({
        name: '',
        address: '',
        phone: '',
        email: '',
        is_no_kill: false
    });
    const [isSubmitting, setIsSubmitting] = useState(false);
    const { toast } = useToast();
    const navigate = useNavigate();
    const { user } = useAuth();

    const handleSubmit = async (e: React.FormEvent) => {
        e.preventDefault();
        
        try {
            setIsSubmitting(true);
            const response = await api.post('/admin/shelters', formData);
            
            if (response.data.success) {
                toast({
                    title: "Success",
                    description: "Shelter created successfully"
                });
                navigate('/admin/shelters');
            } else {
                throw new Error(response.data.error || 'Failed to create shelter');
            }
        } catch (error: any) {
            toast({
                variant: "destructive",
                title: "Error",
                description: error.response?.data?.error || "Failed to create shelter"
            });
        } finally {
            setIsSubmitting(false);
        }
    };

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
        const { name, value, type, checked } = e.target;
        setFormData(prev => ({
            ...prev,
            [name]: type === 'checkbox' ? checked : value
        }));
    };

    return (
        <div className="container max-w-2xl mx-auto p-6">
            <Card>
                <CardHeader>
                    <CardTitle>Add New Shelter</CardTitle>
                    <CardDescription>
                        Create a new animal shelter in the system
                    </CardDescription>
                </CardHeader>

                <form onSubmit={handleSubmit}>
                    <CardContent className="space-y-4">
                        <div className="space-y-2">
                            <Label htmlFor="name">Shelter Name</Label>
                            <Input
                                id="name"
                                name="name"
                                placeholder="Enter shelter name"
                                required
                                value={formData.name}
                                onChange={handleChange}
                            />
                        </div>

                        <div className="space-y-2">
                            <Label htmlFor="address">Address</Label>
                            <Input
                                id="address"
                                name="address"
                                placeholder="Enter full address"
                                required
                                value={formData.address}
                                onChange={handleChange}
                            />
                        </div>

                        <div className="space-y-2">
                            <Label htmlFor="phone">Phone Number</Label>
                            <Input
                                id="phone"
                                name="phone"
                                placeholder="Enter phone number"
                                required
                                value={formData.phone}
                                onChange={handleChange}
                            />
                        </div>

                        <div className="space-y-2">
                            <Label htmlFor="email">Email</Label>
                            <Input
                                id="email"
                                name="email"
                                type="email"
                                placeholder="Enter email address"
                                required
                                value={formData.email}
                                onChange={handleChange}
                            />
                        </div>

                        <div className="flex items-center space-x-2">
                            <Checkbox
                                id="is_no_kill"
                                name="is_no_kill"
                                checked={formData.is_no_kill}
                                onCheckedChange={(checked) => 
                                    setFormData(prev => ({ ...prev, is_no_kill: checked as boolean }))
                                }
                            />
                            <Label htmlFor="is_no_kill">This is a no-kill shelter</Label>
                        </div>
                    </CardContent>

                    <CardFooter className="flex justify-between">
                        <Button
                            type="button"
                            variant="outline"
                            onClick={() => navigate('/admin/shelters')}
                        >
                            Cancel
                        </Button>
                        <Button
                            type="submit"
                            disabled={isSubmitting}
                        >
                            {isSubmitting ? 'Creating...' : 'Create Shelter'}
                        </Button>
                    </CardFooter>
                </form>
            </Card>
        </div>
    );
}

```


### File: ./src/pages/admin/AdminDashboard.tsx
```
import { useEffect, useState } from 'react';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Link, useNavigate } from 'react-router-dom';
import { 
    PawPrint, 
    FileText, 
    Users, 
    Plus, 
    Building2, 
    TrendingUp, 
    AlertTriangle 
} from 'lucide-react';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/AuthContext';
import api from '@/lib/axios';

interface DashboardStats {
    totalUsers: number;
    totalShelters: number;
    totalPets: number;
    totalApplications: number;
    pendingApplications: number;
    activeUsers: number;
    recentActivity: Array<{
        id: number;
        type: string;
        message: string;
        timestamp: string;
    }>;
}

export default function AdminDashboard() {
    const [stats, setStats] = useState<DashboardStats>({
        totalUsers: 0,
        totalShelters: 0,
        totalPets: 0,
        totalApplications: 0,
        pendingApplications: 0,
        activeUsers: 0,
        recentActivity: []
    });

    const [loading, setLoading] = useState(true);
    const { toast } = useToast();
    const { user, isAuthenticated } = useAuth();
    const navigate = useNavigate();

    useEffect(() => {
        // Check if user is authenticated and has admin role
        if (!isAuthenticated || user?.role !== 'admin') {
            toast({
                variant: "destructive",
                title: "Unauthorized Access",
                description: "You don't have permission to view this page."
            });
            navigate('/unauthorized');
            return;
        }

        const fetchStats = async () => {
            try {
                setLoading(true);
                const response = await api.get('/admin/stats');
                if (response.data.success) {
                    setStats(response.data.data);
                } else {
                    throw new Error(response.data.error || 'Failed to fetch stats');
                }
            } catch (error) {
                console.error('Failed to fetch admin stats:', error);
                toast({
                    variant: "destructive",
                    title: "Error",
                    description: "Failed to load dashboard statistics"
                });
            } finally {
                setLoading(false);
            }
        };

        fetchStats();
    }, [isAuthenticated, user, navigate, toast]);

    const StatCard = ({ 
        title, 
        value, 
        icon: Icon, 
        description, 
        href, 
        trend 
    }: { 
        title: string;
        value: number;
        icon: any;
        description?: string;
        href: string;
        trend?: {
            value: number;
            label: string;
        };
    }) => (
        <Card>
            <CardHeader className="flex flex-row items-center justify-between pb-2">
                <CardTitle className="text-sm font-medium">{title}</CardTitle>
                <Icon className="h-4 w-4 text-muted-foreground" />
            </CardHeader>
            <CardContent>
                <div className="flex items-center justify-between">
                    <div>
                        <div className="text-2xl font-bold">{value}</div>
                        {description && (
                            <p className="text-xs text-muted-foreground">{description}</p>
                        )}
                    </div>
                    {trend && (
                        <div className={`text-xs ${trend.value >= 0 ? 'text-green-500' : 'text-red-500'}`}>
                            <TrendingUp className="h-3 w-3 inline mr-1" />
                            {trend.value}% {trend.label}
                        </div>
                    )}
                </div>
                <Button asChild variant="link" className="p-0 mt-2">
                    <Link to={href}>View Details</Link>
                </Button>
            </CardContent>
        </Card>
    );

    if (loading) {
        return (
            <div className="flex justify-center items-center min-h-screen">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            </div>
        );
    }

    return (
        <div className="container mx-auto p-6">
            <div className="space-y-4">
                <div className="flex justify-between items-center">
                    <div>
                        <h2 className="text-3xl font-bold tracking-tight">Admin Dashboard</h2>
                        <p className="text-muted-foreground">
                            Welcome back, {user?.username}. Here's what's happening with your platform.
                        </p>
                    </div>
                    <Button asChild>
                        <Link to="/admin/shelters/new">
                            <Plus className="mr-2 h-4 w-4" />
                            Add New Shelter
                        </Link>
                    </Button>
                </div>

                <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
                    <StatCard
                        title="Total Users"
                        value={stats.totalUsers}
                        icon={Users}
                        description="Active platform users"
                        href="/admin/users"
                        trend={{ value: 12, label: 'this month' }}
                    />
                    <StatCard
                        title="Animal Shelters"
                        value={stats.totalShelters}
                        icon={Building2}
                        description="Registered shelters"
                        href="/admin/shelters"
                    />
                    <StatCard
                        title="Listed Pets"
                        value={stats.totalPets}
                        icon={PawPrint}
                        description="Available for adoption"
                        href="/admin/pets"
                    />
                    <StatCard
                        title="Pending Applications"
                        value={stats.pendingApplications}
                        icon={FileText}
                        description="Requiring review"
                        href="/admin/applications"
                    />
                </div>

                <div className="grid gap-4 grid-cols-1 md:grid-cols-2 mt-4">
                    {/* Recent Activity */}
                    <Card className="md:col-span-2">
                        <CardHeader>
                            <CardTitle>Recent Activity</CardTitle>
                            <CardDescription>Latest platform updates and changes</CardDescription>
                        </CardHeader>
                        <CardContent>
                            <div className="space-y-4">
                                {stats.recentActivity.length > 0 ? (
                                    stats.recentActivity.map((activity) => (
                                        <div 
                                            key={activity.id} 
                                            className="flex items-center justify-between p-2 hover:bg-secondary/50 rounded-lg"
                                        >
                                            <div className="flex items-center gap-2">
                                                <ActivityIcon type={activity.type} />
                                                <div>
                                                    <p className="text-sm">{activity.message}</p>
                                                    <p className="text-xs text-muted-foreground">
                                                        {new Date(activity.timestamp).toLocaleString()}
                                                    </p>
                                                </div>
                                            </div>
                                        </div>
                                    ))
                                ) : (
                                    <div className="text-center text-muted-foreground py-8">
                                        No recent activity to display
                                    </div>
                                )}
                            </div>
                        </CardContent>
                    </Card>

                    {/* System Alerts */}
                    <Card>
                        <CardHeader>
                            <CardTitle className="flex items-center gap-2">
                                <AlertTriangle className="h-5 w-5" />
                                System Alerts
                            </CardTitle>
                        </CardHeader>
                        <CardContent>
                            {/* Add system alerts here */}
                        </CardContent>
                    </Card>
                </div>
            </div>
        </div>
    );
}

// Helper component for activity icons
const ActivityIcon = ({ type }: { type: string }) => {
    switch (type) {
        case 'user':
            return <Users className="h-4 w-4 text-blue-500" />;
        case 'pet':
            return <PawPrint className="h-4 w-4 text-green-500" />;
        case 'shelter':
            return <Building2 className="h-4 w-4 text-purple-500" />;
        default:
            return <FileText className="h-4 w-4 text-gray-500" />;
    }
};

```


### File: ./src/pages/admin/UserManagement.tsx
```
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import {
    Select,
    SelectContent,
    SelectItem,
    SelectTrigger,
    SelectValue,
} from '@/components/ui/select';
import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeader,
    TableRow,
} from '@/components/ui/table';
import { Input } from '@/components/ui/input';
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuLabel,
    DropdownMenuSeparator,
    DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/AuthContext';
import api from '@/lib/axios';
import { 
    MoreHorizontal, 
    Search, 
    UserPlus, 
    Shield, 
    Ban, 
    Mail,
    RefreshCw
} from 'lucide-react';

interface User {
    user_id: number;
    username: string;
    email: string;
    role: string;
    account_status: string;
    registration_date: string;
    last_login?: string;
}

interface UserFilters {
    search?: string;
    role?: string;
    status?: string;
}

export default function UserManagement() {
    const [users, setUsers] = useState<User[]>([]);
    const [loading, setLoading] = useState(true);
    const [filters, setFilters] = useState<UserFilters>({});
    const { toast } = useToast();
    const navigate = useNavigate();
    const { user: currentUser } = useAuth();

    useEffect(() => {
        // Check admin access
        if (currentUser?.role !== 'admin') {
            navigate('/unauthorized');
            return;
        }
        
        fetchUsers();
    }, [currentUser, navigate]);

    const fetchUsers = async (appliedFilters: UserFilters = filters) => {
        try {
            setLoading(true);
            const response = await api.get('/admin/users', { params: appliedFilters });
            if (response.data.success) {
                setUsers(response.data.data);
            } else {
                throw new Error(response.data.error || 'Failed to fetch users');
            }
        } catch (error) {
            toast({
                variant: "destructive",
                title: "Error",
                description: "Failed to fetch users"
            });
        } finally {
            setLoading(false);
        }
    };

    const handleRoleChange = async (userId: number, newRole: string) => {
        try {
            const response = await api.put(`/admin/users/${userId}/role`, { role: newRole });
            if (response.data.success) {
                fetchUsers();
                toast({
                    title: "Success",
                    description: "User role updated successfully"
                });
            } else {
                throw new Error(response.data.error || 'Failed to update role');
            }
        } catch (error) {
            toast({
                variant: "destructive",
                title: "Error",
                description: "Failed to update user role"
            });
        }
    };

    const handleStatusChange = async (userId: number, newStatus: string) => {
        try {
            const response = await api.put(`/admin/users/${userId}/status`, { status: newStatus });
            if (response.data.success) {
                fetchUsers();
                toast({
                    title: "Success",
                    description: "User status updated successfully"
                });
            } else {
                throw new Error(response.data.error || 'Failed to update status');
            }
        } catch (error) {
            toast({
                variant: "destructive",
                title: "Error",
                description: "Failed to update user status"
            });
        }
    };

    const resendVerificationEmail = async (userId: number) => {
        try {
            const response = await api.post(`/admin/users/${userId}/resend-verification`);
            if (response.data.success) {
                toast({
                    title: "Success",
                    description: "Verification email sent successfully"
                });
            } else {
                throw new Error(response.data.error || 'Failed to send verification email');
            }
        } catch (error) {
            toast({
                variant: "destructive",
                title: "Error",
                description: "Failed to send verification email"
            });
        }
    };

    const handleSearch = (searchTerm: string) => {
        const newFilters = { ...filters, search: searchTerm };
        setFilters(newFilters);
        fetchUsers(newFilters);
    };

    const handleFilterChange = (key: string, value: string) => {
        const newFilters = { ...filters, [key]: value };
        setFilters(newFilters);
        fetchUsers(newFilters);
    };

    if (loading) {
        return (
            <div className="flex justify-center items-center min-h-screen">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            </div>
        );
    }

    return (
        <div className="container mx-auto p-6">
            <Card>
                <CardHeader>
                    <div className="flex justify-between items-center">
                        <div>
                            <CardTitle>User Management</CardTitle>
                            <CardDescription>
                                Manage user roles and account status
                            </CardDescription>
                        </div>
                        <Button>
                            <UserPlus className="mr-2 h-4 w-4" />
                            Add User
                        </Button>
                    </div>
                </CardHeader>
                <CardContent>
                    <div className="flex gap-4 mb-6">
                        <div className="flex-1 relative">
                            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                            <Input
                                placeholder="Search users..."
                                className="pl-9"
                                onChange={(e) => handleSearch(e.target.value)}
                            />
                        </div>
                        <Select
                            defaultValue={filters.role}
                            onValueChange={(value) => handleFilterChange('role', value)}
                        >
                            <SelectTrigger className="w-[180px]">
                                <SelectValue placeholder="Filter by role" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="all">All Roles</SelectItem>
                                <SelectItem value="admin">Admin</SelectItem>
                                <SelectItem value="shelter_staff">Shelter Staff</SelectItem>
                                <SelectItem value="adopter">Adopter</SelectItem>
                            </SelectContent>
                        </Select>
                        <Select
                            defaultValue={filters.status}
                            onValueChange={(value) => handleFilterChange('status', value)}
                        >
                            <SelectTrigger className="w-[180px]">
                                <SelectValue placeholder="Filter by status" />
                            </SelectTrigger>
                            <SelectContent>
                                <SelectItem value="all">All Statuses</SelectItem>
                                <SelectItem value="active">Active</SelectItem>
                                <SelectItem value="pending">Pending</SelectItem>
                                <SelectItem value="suspended">Suspended</SelectItem>
                            </SelectContent>
                        </Select>
                    </div>

                    <div className="rounded-md border">
                        <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableHead>Username</TableHead>
                                    <TableHead>Email</TableHead>
                                    <TableHead>Role</TableHead>
                                    <TableHead>Status</TableHead>
                                    <TableHead>Registration Date</TableHead>
                                    <TableHead>Last Login</TableHead>
                                    <TableHead className="text-right">Actions</TableHead>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                {users.map((user) => (
                                    <TableRow key={user.user_id}>
                                        <TableCell className="font-medium">{user.username}</TableCell>
                                        <TableCell>{user.email}</TableCell>
                                        <TableCell>
                                            <Select
                                                defaultValue={user.role}
                                                onValueChange={(value) => handleRoleChange(user.user_id, value)}
                                                disabled={currentUser?.user_id === user.user_id}
                                            >
                                                <SelectTrigger className="w-[140px]">
                                                    <SelectValue />
                                                </SelectTrigger>
                                                <SelectContent>
                                                    <SelectItem value="adopter">Adopter</SelectItem>
                                                    <SelectItem value="shelter_staff">Shelter Staff</SelectItem>
                                                    <SelectItem value="admin">Admin</SelectItem>
                                                </SelectContent>
                                            </Select>
                                        </TableCell>
                                        <TableCell>
                                            <div className={`inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium
                                                ${user.account_status === 'active' ? 'bg-green-100 text-green-800' :
                                                user.account_status === 'pending' ? 'bg-yellow-100 text-yellow-800' :
                                                'bg-red-100 text-red-800'}`}>
                                                {user.account_status.charAt(0).toUpperCase() + user.account_status.slice(1)}
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            {new Date(user.registration_date).toLocaleDateString()}
                                        </TableCell>
                                        <TableCell>
                                            {user.last_login ? new Date(user.last_login).toLocaleString() : 'Never'}
                                        </TableCell>
                                        <TableCell className="text-right">
                                            <DropdownMenu>
                                                <DropdownMenuTrigger asChild>
                                                    <Button variant="ghost" className="h-8 w-8 p-0">
                                                        <span className="sr-only">Open menu</span>
                                                        <MoreHorizontal className="h-4 w-4" />
                                                    </Button>
                                                </DropdownMenuTrigger>
                                                <DropdownMenuContent align="end">
                                                    <DropdownMenuLabel>Actions</DropdownMenuLabel>
                                                    <DropdownMenuItem
                                                        onClick={() => handleStatusChange(user.user_id, 
                                                            user.account_status === 'suspended' ? 'active' : 'suspended')}
                                                    >
                                                        {user.account_status === 'suspended' ? (
                                                            <>
                                                                <RefreshCw className="mr-2 h-4 w-4" />
                                                                Reactivate Account
                                                            </>
                                                        ) : (
                                                            <>
                                                                <Ban className="mr-2 h-4 w-4" />
                                                                Suspend Account
                                                            </>
                                                        )}
                                                    </DropdownMenuItem>
                                                    {user.account_status === 'pending' && (
                                                        <DropdownMenuItem
                                                            onClick={() => resendVerificationEmail(user.user_id)}
                                                        >
                                                            <Mail className="mr-2 h-4 w-4" />
                                                            Resend Verification
                                                        </DropdownMenuItem>
                                                    )}
                                                    <DropdownMenuSeparator />
                                                    <DropdownMenuItem
                                                        onClick={() => navigate(`/admin/users/${user.user_id}`)}
                                                    >
                                                        <Shield className="mr-2 h-4 w-4" />
                                                        View Full Profile
                                                    </DropdownMenuItem>
                                                </DropdownMenuContent>
                                            </DropdownMenu>
                                        </TableCell>
                                    </TableRow>
                                ))}
                            </TableBody>
                        </Table>
                    </div>
                </CardContent>
            </Card>
        </div>
    );
}

```


### File: ./src/pages/admin/ShelterManagement.tsx
```
import { useState, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import { Card, CardHeader, CardTitle, CardDescription, CardContent } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import {
    Table,
    TableBody,
    TableCell,
    TableHead,
    TableHeader,
    TableRow,
} from '@/components/ui/table';
import { Input } from '@/components/ui/input';
import {
    DropdownMenu,
    DropdownMenuContent,
    DropdownMenuItem,
    DropdownMenuLabel,
    DropdownMenuSeparator,
    DropdownMenuTrigger,
} from '@/components/ui/dropdown-menu';
import { useToast } from '@/hooks/use-toast';
import { useAuth } from '@/contexts/AuthContext';
import api from '@/lib/axios';
import { 
    Building2,
    MoreHorizontal, 
    Search, 
    Plus, 
    Edit, 
    Trash2, 
    Users,
    CheckCircle,
    XCircle
} from 'lucide-react';
import { Badge } from '@/components/ui/badge';

interface Shelter {
    shelter_id: number;
    name: string;
    address: string;
    phone: string;
    email: string;
    is_no_kill: boolean;
    manager_id: number | null;
    total_pets: number;
    active_applications: number;
}

interface ShelterFilters {
    search?: string;
    is_no_kill?: boolean;
}

export default function ShelterManagement() {
    const [shelters, setShelters] = useState<Shelter[]>([]);
    const [loading, setLoading] = useState(true);
    const [filters, setFilters] = useState<ShelterFilters>({});
    const { toast } = useToast();
    const navigate = useNavigate();
    const { user } = useAuth();

    useEffect(() => {
        if (user?.role !== 'admin') {
            navigate('/unauthorized');
            return;
        }
        fetchShelters();
    }, [user, navigate]);

    const fetchShelters = async () => {
        try {
            setLoading(true);
            const response = await api.get('/admin/shelters', { params: filters });
            if (response.data.success) {
                setShelters(response.data.data);
            } else {
                throw new Error(response.data.error || 'Failed to fetch shelters');
            }
        } catch (error) {
            toast({
                variant: "destructive",
                title: "Error",
                description: "Failed to fetch shelters"
            });
        } finally {
            setLoading(false);
        }
    };

    const handleDeleteShelter = async (shelterId: number) => {
        if (!confirm('Are you sure you want to delete this shelter? This action cannot be undone.')) {
            return;
        }

        try {
            const response = await api.delete(`/admin/shelters/${shelterId}`);
            if (response.data.success) {
                toast({
                    title: "Success",
                    description: "Shelter deleted successfully"
                });
                fetchShelters();
            } else {
                throw new Error(response.data.error || 'Failed to delete shelter');
            }
        } catch (error: any) {
            toast({
                variant: "destructive",
                title: "Error",
                description: error.response?.data?.error || "Failed to delete shelter"
            });
        }
    };

    const handleSearch = (searchTerm: string) => {
        const newFilters = { ...filters, search: searchTerm };
        setFilters(newFilters);
    };

    if (loading) {
        return (
            <div className="flex justify-center items-center min-h-screen">
                <div className="animate-spin rounded-full h-12 w-12 border-b-2 border-primary"></div>
            </div>
        );
    }

    return (
        <div className="container mx-auto p-6">
            <Card>
                <CardHeader>
                    <div className="flex justify-between items-center">
                        <div>
                            <CardTitle>Shelter Management</CardTitle>
                            <CardDescription>
                                Manage animal shelters and their information
                            </CardDescription>
                        </div>
                        <Button onClick={() => navigate('/admin/shelters/new')}>
                            <Plus className="mr-2 h-4 w-4" />
                            Add New Shelter
                        </Button>
                    </div>
                </CardHeader>
                <CardContent>
                    <div className="flex gap-4 mb-6">
                        <div className="flex-1 relative">
                            <Search className="absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground" />
                            <Input
                                placeholder="Search shelters..."
                                className="pl-9"
                                onChange={(e) => handleSearch(e.target.value)}
                            />
                        </div>
                    </div>

                    <div className="rounded-md border">
                        <Table>
                            <TableHeader>
                                <TableRow>
                                    <TableHead>Name</TableHead>
                                    <TableHead>Contact</TableHead>
                                    <TableHead>Location</TableHead>
                                    <TableHead>Status</TableHead>
                                    <TableHead>Pets</TableHead>
                                    <TableHead>Applications</TableHead>
                                    <TableHead className="text-right">Actions</TableHead>
                                </TableRow>
                            </TableHeader>
                            <TableBody>
                                {shelters.map((shelter) => (
                                    <TableRow key={shelter.shelter_id}>
                                        <TableCell className="font-medium">
                                            {shelter.name}
                                        </TableCell>
                                        <TableCell>
                                            <div className="text-sm">
                                                <div>{shelter.phone}</div>
                                                <div className="text-muted-foreground">{shelter.email}</div>
                                            </div>
                                        </TableCell>
                                        <TableCell>
                                            <div className="text-sm">{shelter.address}</div>
                                        </TableCell>
                                        <TableCell>
                                            <Badge 
                                                variant={shelter.is_no_kill ? "success" : "default"}
                                                className="flex items-center gap-1 w-fit"
                                            >
                                                {shelter.is_no_kill ? 
                                                    <CheckCircle className="h-3 w-3" /> : 
                                                    <XCircle className="h-3 w-3" />
                                                }
                                                {shelter.is_no_kill ? 'No-Kill' : 'Standard'}
                                            </Badge>
                                        </TableCell>
                                        <TableCell>
                                            <Badge variant="outline">{shelter.total_pets}</Badge>
                                        </TableCell>
                                        <TableCell>
                                            <Badge variant="outline">{shelter.active_applications}</Badge>
                                        </TableCell>
                                        <TableCell className="text-right">
                                            <DropdownMenu>
                                                <DropdownMenuTrigger asChild>
                                                    <Button variant="ghost" className="h-8 w-8 p-0">
                                                        <span className="sr-only">Open menu</span>
                                                        <MoreHorizontal className="h-4 w-4" />
                                                    </Button>
                                                </DropdownMenuTrigger>
                                                <DropdownMenuContent align="end">
                                                    <DropdownMenuLabel>Actions</DropdownMenuLabel>
                                                    <DropdownMenuItem
                                                        onClick={() => navigate(`/admin/shelters/${shelter.shelter_id}`)}
                                                    >
                                                        <Building2 className="mr-2 h-4 w-4" />
                                                        View Details
                                                    </DropdownMenuItem>
                                                    <DropdownMenuItem
                                                        onClick={() => navigate(`/admin/shelters/${shelter.shelter_id}/staff`)}
                                                    >
                                                        <Users className="mr-2 h-4 w-4" />
                                                        Manage Staff
                                                    </DropdownMenuItem>
                                                    <DropdownMenuSeparator />
                                                    <DropdownMenuItem
                                                        onClick={() => navigate(`/admin/shelters/${shelter.shelter_id}/edit`)}
                                                    >
                                                        <Edit className="mr-2 h-4 w-4" />
                                                        Edit Shelter
                                                    </DropdownMenuItem>
                                                    <DropdownMenuItem
                                                        onClick={() => handleDeleteShelter(shelter.shelter_id)}
                                                        className="text-red-600"
                                                    >
                                                        <Trash2 className="mr-2 h-4 w-4" />
                                                        Delete Shelter
                                                    </DropdownMenuItem>
                                                </DropdownMenuContent>
                                            </DropdownMenu>
                                        </TableCell>
                                    </TableRow>
                                ))}
                            </TableBody>
                        </Table>
                    </div>
                </CardContent>
            </Card>
        </div>
    );
}

```


### File: ./src/pages/UnauthorizedPage.tsx
```
import { useNavigate } from 'react-router-dom';
import { Button } from '@/components/ui/button';
import { Shield, Home } from 'lucide-react';
import { Card, CardContent } from '@/components/ui/card';

export default function UnauthorizedPage() {
  const navigate = useNavigate();

  return (
    <div className="container max-w-md mx-auto px-4 py-16">
      <Card>
        <CardContent className="pt-6 text-center">
          <Shield className="h-16 w-16 mx-auto mb-6 text-muted-foreground" />
          
          <h1 className="text-2xl font-bold mb-4">
            Access Denied
          </h1>
          
          <p className="text-muted-foreground mb-8">
            You don't have permission to access this page. Please contact your administrator if you believe this is an error.
          </p>
          
          <div className="space-x-4">
            <Button 
              variant="default"
              onClick={() => navigate(-1)}
            >
              Go Back
            </Button>
            
            <Button 
              variant="outline"
              onClick={() => navigate('/')}
            >
              <Home className="mr-2 h-4 w-4" />
              Home
            </Button>
          </div>
        </CardContent>
      </Card>
    </div>
  );
}

```


### File: ./src/App.css
```
@tailwind base;
@tailwind components;
@tailwind utilities;
 
@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 0 0% 3.9%;

    --card: 0 0% 100%;
    --card-foreground: 0 0% 3.9%;
 
    --popover: 0 0% 100%;
    --popover-foreground: 0 0% 3.9%;
 
    --primary: 0 0% 9%;
    --primary-foreground: 0 0% 98%;
 
    --secondary: 0 0% 96.1%;
    --secondary-foreground: 0 0% 9%;
 
    --muted: 0 0% 96.1%;
    --muted-foreground: 0 0% 45.1%;
 
    --accent: 0 0% 96.1%;
    --accent-foreground: 0 0% 9%;
 
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 0 0% 98%;

    --border: 0 0% 89.8%;
    --input: 0 0% 89.8%;
    --ring: 0 0% 3.9%;
 
    --radius: 0.5rem;
 
    --chart-1: 12 76% 61%;
 
    --chart-2: 173 58% 39%;
 
    --chart-3: 197 37% 24%;
 
    --chart-4: 43 74% 66%;
 
    --chart-5: 27 87% 67%;
  }
 
  .dark {
    --background: 0 0% 3.9%;
    --foreground: 0 0% 98%;
 
    --card: 0 0% 3.9%;
    --card-foreground: 0 0% 98%;
 
    --popover: 0 0% 3.9%;
    --popover-foreground: 0 0% 98%;
 
    --primary: 0 0% 98%;
    --primary-foreground: 0 0% 9%;
 
    --secondary: 0 0% 14.9%;
    --secondary-foreground: 0 0% 98%;
 
    --muted: 0 0% 14.9%;
    --muted-foreground: 0 0% 63.9%;
 
    --accent: 0 0% 14.9%;
    --accent-foreground: 0 0% 98%;
 
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 0 0% 98%;
 
    --border: 0 0% 14.9%;
    --input: 0 0% 14.9%;
    --ring: 0 0% 83.1%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;
  }
}
 
@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
}

```


### File: ./src/types/api.ts
```
export interface PetImage {
    image_id: number;
    url: string;
    is_primary: boolean;
    created_at: string;
}

export interface PetTrait {
    trait_id: number;
    trait_name: string;
    category: string;
}

export interface Pet {
    pet_id: number;
    name: string;
    species: string;
    breed: string;
    age: number;
    gender: string;
    description: string;
    shelter_name: string;
    traits: {
        [category: string]: string[];
    };
    images?: PetImage[];
}

export interface ApiResponse<T> {
    success: boolean;
    data?: T;
    error?: string;
}

export interface PaginatedResponse<T> extends ApiResponse<T> {
    data: {
        items: T[];
        total: number;
        page: number;
        perPage: number;
    };
}

```


### File: ./src/types/profile.ts
```
export interface UserProfile {
    profile_id: number;
    user_id: number;
    first_name: string;
    last_name: string;
    phone: string;
    address: string | null;
    city: string | null;
    state: string | null;
    zip_code: string | null;
    housing_type: 'house' | 'apartment' | 'condo' | 'other' | null;
    has_yard: boolean | null;
    other_pets: string | null;
    household_members: number | null;
    email: string;
    username: string;
    role: 'adopter' | 'shelter_staff' | 'admin';
    account_status: 'pending' | 'active' | 'suspended';
}

export interface ProfileUpdateData {
    first_name: string;
    last_name: string;
    phone: string;
    address?: string;
    city?: string;
    state?: string;
    zip_code?: string;
    housing_type?: 'house' | 'apartment' | 'condo' | 'other';
    has_yard?: boolean;
    other_pets?: string;
    household_members?: number;
}

```


### File: ./src/types/index.ts
```

```


### File: ./src/index.css
```
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tpe && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.3.2",
    "@radix-ui/react-dialog": "^1.0.5",
    "@radix-ui/react-dropdown-menu": "^2.0.6",
    "@radix-ui/react-tabs": "^1.0.4",
    "@tanstack/react-query": "^5.8.4",
    "axios": "^1.6.2",
    "clsx": "^2.0.0",
    "jotai": "^2.5.1",
    "lucide-react": "^0.292.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-hook-form": "^7.48.2",
    "react-router-dom": "^6.19.0",
    "recharts": "^2.9.3",
    "tailwind-merge": "^2.0.0",
    "zod": "^3.22.4"
  },
  "devDependencies": {
    "@heroicons/react": "^2.0.18",
    "@testing-library/jest-dom": "^6.1.4",
    "@testing-library/react": "^14.1.2",
    "@types/node": "^20.9.2",
    "@types/react": "^18.2.37",
    "@types/react-dom": "^18.2.15",
    "@typescript-eslint/eslint-plugin": "^6.11.0",
    "@typescript-eslint/parser": "^6.11.0",
    "@vitejs/plugin-react": "^4.2.0",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.53.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.1",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.4",
    "postcss": "^8.4.31",
    "prettier": "^3.1.0",
    "tailwindcss": "^3.3.5",
    "typescript": "^5.2.2",
    "vite": "^5.0.0",
    "vitest": "^0.34.6"
  }
}

```


### File: ./src/stores/auth.ts
```
import { atom } from 'jotai';

export interface User {
  user_id: number;
  username: string;
  email: string;
  role: 'admin' | 'shelter_staff' | 'adopter';
}

// Create atoms for user and loading state
export const userAtom = atom<User | null>(null);
export const authLoadingAtom = atom<boolean>(true);

// Token management functions
export const getStoredToken = () => localStorage.getItem('token');
export const setStoredToken = (token: string) => localStorage.setItem('token', token);
export const removeStoredToken = () => localStorage.removeItem('token');

// User management functions
export const getStoredUser = (): User | null => {
  try {
    const userStr = localStorage.getItem('user');
    if (!userStr) return null;
    const user = JSON.parse(userStr);
    return user;
  } catch (e) {
    console.error('Error parsing stored user:', e);
    return null;
  }
};

export const setStoredUser = (user: User) => {
  try {
    localStorage.setItem('user', JSON.stringify(user));
  } catch (e) {
    console.error('Error storing user:', e);
  }
};

export const removeStoredUser = () => {
  localStorage.removeItem('user');
};

```


### File: ./src/services/api.ts
```

```


### File: ./src/services/profile.ts
```
import api from '@/lib/axios';
import { UserProfile, ProfileUpdateData } from '@/types/profile';
import { ApiResponse } from '@/types/api';

export const profileService = {
    async getProfile() {
        const response = await api.get<ApiResponse<UserProfile>>('/profile');
        return response.data.data;
    },

    async updateProfile(data: ProfileUpdateData) {
        const response = await api.put<ApiResponse<UserProfile>>('/profile', data);
        return response.data.data;
    },
    
    async updateUserRole(userId: number, role: string) {
        const response = await api.put<ApiResponse<UserProfile>>(`/admin/users/${userId}/role`, { role });
        return response.data.data;
    },
    
    async getUsersByRole(role: string) {
        const response = await api.get<ApiResponse<UserProfile[]>>(`/admin/users`, {
            params: { role }
        });
        return response.data.data;
    },
    
    async getShelterStaff(shelterId: number) {
        const response = await api.get<ApiResponse<UserProfile[]>>(`/shelters/${shelterId}/staff`);
        return response.data.data;
    },

    async verifyEmail(token: string) {
        const response = await api.post<ApiResponse<{ message: string }>>('/auth/verify-email', { token });
        return response.data;
    },
    
    hasPermission(requiredRole: string): boolean {
        const user = JSON.parse(localStorage.getItem('user') || '{}');
        const roles = {
            'admin': ['admin'],
            'shelter_staff': ['admin', 'shelter_staff'],
            'adopter': ['admin', 'shelter_staff', 'adopter']
        };
        return roles[requiredRole]?.includes(user.role) || false;
    }
};

```


### File: ./src/services/auth.ts
```
import api from '@/lib/axios'

interface LoginCredentials {
  email: string
  password: string
}

interface RegisterCredentials {
  username: string
  email: string
  password: string
}

interface AuthResponse {
  user: {
    user_id: number
    username: string
    email: string
  }
  token: string
}

export const authService = {
    async login(credentials: LoginCredentials) {
        const response = await api.post<ApiResponse<AuthResponse>>('/auth/login', credentials);
        return response.data.data || response.data;
    },

    async register(credentials: RegisterCredentials) {
        const response = await api.post<ApiResponse<AuthResponse>>('/auth/register', credentials);
        return response.data.data || response.data;
    },

    async logout() {
        localStorage.removeItem('token');
    }
}

```


### File: ./src/hooks/use-toast.ts
```
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

```


### File: ./src/main.tsx
```
import React from 'react'
import ReactDOM from 'react-dom/client'
import App from './App'  // Remove the .tsx extension
import './App.css'
import { Toaster } from "@/components/ui/toaster"

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <App />
    <Toaster />
  </React.StrictMode>
)

```


### File: ./src/App.tsx
```
import { BrowserRouter as Router, Routes, Route } from 'react-router-dom';
import { AuthProvider } from '@/contexts/AuthContext';
import { ProtectedRoute } from '@/components/auth/ProtectedRoute';
import { RoleProtectedRoute } from '@/components/auth/RoleProtectedRoute';
import Navbar from '@/components/layout/Navbar';

// Page Imports
import HomePage from '@/pages/HomePage';
import LoginPage from '@/pages/LoginPage';
import PetsPage from '@/pages/PetsPage';
import QuizPage from '@/pages/QuizPage';
import QuizResultsPage from '@/pages/QuizResultsPage';
import RegisterPage from '@/pages/RegisterPage';
import PetDetailPage from '@/pages/PetDetailPage';
import ProfilePage from '@/pages/ProfilePage';
import ProfileSettings from '@/pages/profile/ProfileSettings';
import UnauthorizedPage from '@/pages/UnauthorizedPage';
import AdoptionFormPage from '@/pages/AdoptionFormPage';
import ApplicationsPage from '@/pages/profile/ApplicationsPage';
import ApplicationDetailPage from '@/pages/profile/ApplicationDetailPage';
import FavoritesPage from '@/pages/profile/FavoritesPage';

// Admin Pages
import AdminDashboard from '@/pages/admin/AdminDashboard';
import UserManagement from '@/pages/admin/UserManagement';
import ShelterManagement from '@/pages/admin/ShelterManagement';
import NewShelterPage from '@/pages/admin/NewShelterPage';

// Shelter Pages
import ShelterDashboard from '@/pages/shelter/ShelterDashboard';
import ShelterPetManagement from '@/pages/shelter/ShelterManagement';
import NewPetPage from '@/pages/shelter/NewPetPage';
import SheltersPage from '@/pages/SheltersPage';
import ShelterDetailPage from '@/pages/ShelterDetailPage';

function App() {
  return (
    <AuthProvider>
      <Router>
        <div className="min-h-screen bg-background">
          <Navbar />
          <Routes>
            {/* Public Routes */}
            <Route path="/" element={<HomePage />} />
            <Route path="/login" element={<LoginPage />} />
            <Route path="/register" element={<RegisterPage />} />
            <Route path="/unauthorized" element={<UnauthorizedPage />} />

            {/* Protected Routes */}
            <Route 
              path="/pets" 
              element={
                <ProtectedRoute>
                  <PetsPage />
                </ProtectedRoute>
              } 
            />
            <Route 
              path="/pets/:id" 
              element={
                <ProtectedRoute>
                  <PetDetailPage />
                </ProtectedRoute>
              }
            />

            <Route 
              path="/quiz" 
              element={
                <ProtectedRoute>
                  <QuizPage />
                </ProtectedRoute>
              }
            />
            
            <Route 
              path="/quiz/results" 
              element={
                <ProtectedRoute>
                  <QuizResultsPage />
                </ProtectedRoute>
              }
            />

            <Route 
              path="/adopt/:id" 
              element={
                <ProtectedRoute>
                  <AdoptionFormPage />
                </ProtectedRoute>
              }
            />

            {/* Profile Routes */}
            <Route 
              path="/profile/*" 
              element={
                <ProtectedRoute>
                  <Routes>
                    <Route path="/" element={<ProfilePage />} />
                    <Route path="/settings" element={<ProfileSettings />} />
                    <Route path="/applications" element={<ApplicationsPage />} />
                    <Route path="/applications/:id" element={<ApplicationDetailPage />} />
                    <Route path="/favorites" element={<FavoritesPage />} />
                  </Routes>
                </ProtectedRoute>
              } 
            />

            {/* Admin Routes */}
            <Route
              path="/admin/*"
              element={
                <RoleProtectedRoute requiredRole="admin">
                  <Routes>
                    <Route path="/" element={<AdminDashboard />} />
                    <Route path="/users" element={<UserManagement />} />
                    <Route path="/shelters" element={<ShelterManagement />} />
                    <Route path="/shelters/new" element={<NewShelterPage />} />
                  </Routes>
                </RoleProtectedRoute>
              }
            />

            {/* Shelter Routes */}
            <Route
              path="/shelter/*"
              element={
                <RoleProtectedRoute requiredRole="shelter_staff">
                  <Routes>
                    <Route path="/" element={<ShelterDashboard />} />
                    <Route path="/pets" element={<ShelterPetManagement />} />
                    <Route path="/pets/new" element={<NewPetPage />} />
                  </Routes>
                </RoleProtectedRoute>
              }
            />

            <Route 
              path="/shelters" 
              element={
                <ProtectedRoute>
                  <SheltersPage />
                </ProtectedRoute>
              }
            />

            <Route 
              path="/shelters/:id" 
              element={
                <ProtectedRoute>
                  <ShelterDetailPage />
                </ProtectedRoute>
              }
            />
          </Routes>
        </div>
      </Router>
    </AuthProvider>
  );
}

export default App;

```


### File: ./vite.config.ts
```
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";
import path from "path";

export default defineConfig({
  plugins: [react()],
  resolve: {
    alias: {
      "@": path.resolve(__dirname, "./src"),
    },
  },
  server: {
    proxy: {
      "/api": {
        target: "http://localhost:8000",
        changeOrigin: true,
      },
      "/uploads": {
        target: "http://localhost:8000",
        changeOrigin: true,
      },
    },
  },
});

```


### File: ./package.json
```
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc && vite build",
    "lint": "eslint . --ext ts,tsx --report-unused-disable-directives --max-warnings 0",
    "preview": "vite preview"
  },
  "dependencies": {
    "@hookform/resolvers": "^3.9.1",
    "@radix-ui/react-avatar": "^1.1.1",
    "@radix-ui/react-checkbox": "^1.1.2",
    "@radix-ui/react-dialog": "^1.1.2",
    "@radix-ui/react-dropdown-menu": "^2.1.2",
    "@radix-ui/react-label": "^2.1.0",
    "@radix-ui/react-progress": "^1.1.0",
    "@radix-ui/react-radio-group": "^1.2.1",
    "@radix-ui/react-select": "^2.1.2",
    "@radix-ui/react-slot": "^1.1.0",
    "@radix-ui/react-tabs": "^1.1.1",
    "@radix-ui/react-toast": "^1.2.2",
    "@tanstack/react-query": "^5.8.4",
    "axios": "^1.6.2",
    "class-variance-authority": "^0.7.0",
    "clsx": "^2.1.1",
    "jotai": "^2.5.1",
    "lucide-react": "^0.292.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-hook-form": "^7.53.2",
    "react-router-dom": "^6.19.0",
    "recharts": "^2.9.3",
    "tailwind-merge": "^2.5.4",
    "tailwindcss-animate": "^1.0.7",
    "zod": "^3.23.8"
  },
  "devDependencies": {
    "@heroicons/react": "^2.0.18",
    "@shadcn/ui": "^0.0.4",
    "@testing-library/jest-dom": "^6.1.4",
    "@testing-library/react": "^14.1.2",
    "@types/node": "^20.9.2",
    "@types/react": "^18.2.37",
    "@types/react-dom": "^18.2.15",
    "@typescript-eslint/eslint-plugin": "^6.11.0",
    "@typescript-eslint/parser": "^6.11.0",
    "@vitejs/plugin-react": "^4.2.0",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.53.0",
    "eslint-config-prettier": "^9.0.0",
    "eslint-plugin-prettier": "^5.0.1",
    "eslint-plugin-react-hooks": "^4.6.0",
    "eslint-plugin-react-refresh": "^0.4.4",
    "postcss": "^8.4.31",
    "prettier": "^3.1.0",
    "shadcn-ui": "^0.9.3",
    "tailwindcss": "^3.3.5",
    "typescript": "^5.2.2",
    "vite": "^5.4.11",
    "vitest": "^0.34.6"
  }
}

```


### File: ./tailwind.config.cjs
```
/** @type {import('tailwindcss').Config} */
module.exports = {
  darkMode: ['class'],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
  ],
  theme: {
  	container: {
  		center: 'true',
  		padding: '2rem',
  		screens: {
  			'2xl': '1400px'
  		}
  	},
  	extend: {
  		colors: {
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		},
  		keyframes: {
  			'accordion-down': {
  				from: {
  					height: '0'
  				},
  				to: {
  					height: 'var(--radix-accordion-content-height)'
  				}
  			},
  			'accordion-up': {
  				from: {
  					height: 'var(--radix-accordion-content-height)'
  				},
  				to: {
  					height: '0'
  				}
  			}
  		},
  		animation: {
  			'accordion-down': 'accordion-down 0.2s ease-out',
  			'accordion-up': 'accordion-up 0.2s ease-out'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
}

```


### File: ./tsconfig.json
```
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true,
    "baseUrl": ".",
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}

```
